/* Minification failed. Returning unminified contents.
(803,79-80): run-time error JS1195: Expected expression: >
(803,109-110): run-time error JS1004: Expected ';': )
(804,26-27): run-time error JS1195: Expected expression: )
(807,73-74): run-time error JS1195: Expected expression: >
(807,104-105): run-time error JS1195: Expected expression: )
(807,106-107): run-time error JS1004: Expected ';': {
(810,22-23): run-time error JS1004: Expected ';': )
(821,17-18): run-time error JS1002: Syntax error: }
(827,34-35): run-time error JS1195: Expected expression: )
(827,36-37): run-time error JS1004: Expected ';': {
(929,1-2): run-time error JS1002: Syntax error: }
 */
var Webropol = Webropol || {};
Webropol.BossTools = Webropol.BossTools || {};
Webropol.BossTools.Hierarchy = Webropol.BossTools.Hierarchy || {};

Webropol.BossTools.Hierarchy.HierarchyManagement = function (urls, messages) {
    var _this = this;
    var _selectedPersons = ko.observableArray([]);

    this.update = function (data) {
        _selectedPersons([]);

        var mapping = {
            'Nodes': {
                create: function (options) {
                    var node = {};
                    ko.mapping.fromJS(options.data, {}, node);

                    node.onPersonChecked = _this.onPersonChecked;

                    return node;
                }
            }
        };

        ko.mapping.fromJS(data, mapping, _this);
    };

    this.init = function (initialData) {
        _this.update(initialData);
        _this.initExtendedProperties();
        _this.initComputed();
    };

    this.updateAndApplyBindings = function (initialData) {
        _this.init(Webropol.Shared.Common.parseJSON(initialData));

        ko.applyBindings(_this);
    };

    this.mappings = {};

    this.mappings.nodesMapping = {
        "/Nodes": function (e, o) {
            return _this.toObservableNode(o, {});
        }
    };

    this.notificationReceiverId = ko.observable();

    this.handleHirarchyChanging = function () { };

    this.toObservableManager = function (managerObj) {
        var manager = ko.mapping.fromJS(managerObj);
        return manager;
    };

    this.toObservableRespondent = function (respondentObj) {
        var respondent = ko.mapping.fromJS(respondentObj);
        return respondent;
    };

    this.toObservableNode = function (nodeObj, targetNode) {
        ko.utils.extend(targetNode, ko.wrap.fromJS(nodeObj, {}));

        targetNode.SendingEnabled = ko.computed(function () {
            return (targetNode.ResponsiblePersons().length > 0);
        });

        targetNode.validateManagers = function (displayValidationErrors) {
            if (targetNode.ResponsiblePersons().length == 0) {
                return false;
            }

            var hasInvalidItems = $.Enumerable.From(targetNode.ResponsiblePersons())
                .Where(function (manager) {
                    var validateResult = _this.validateManager(manager, targetNode, displayValidationErrors);
                    return !validateResult;
                }).Any();
            return !hasInvalidItems;
        };

        targetNode.validateRespondents = function (displayValidationErrors) {
           var hasInvalidItems = $.Enumerable.From(targetNode.Respondents())
                .Where(function (manager) {
                    var validateResult = _this.validateRespondent(manager, targetNode, displayValidationErrors);
                    return !validateResult;
                }).Any();
            return !hasInvalidItems;
        };

        targetNode.areRespondentsValid = ko.computed(function () {
            return targetNode.validateRespondents(false);
        });

        targetNode.areManagersValid = ko.computed(function () {
            return targetNode.validateRespondents(false);
        });

        targetNode.isLevelNameValid = ko.pureComputed({
            read: function() {
                return _this.ActionTargetNodeObservableClone.LevelName().length > 0;
            },
            deferEvaluation: true
        });

        targetNode.isMembersCountValid = ko.pureComputed({
            read: function () {
                var num = Number(_this.ActionTargetNodeObservableClone.MembersCount());
                var result = Number.isInteger(num) && num >= 0;
                return result;
            },
            deferEvaluation: true
        });

        return targetNode;
    };

    this.initExtendedProperties = function () {
        //_this.isFullHierarchyTreeLoaded = false;

        _this.ActionTargetNode = {};
        _this.createActionTargetObservableClone();

        _this.NewNode = ko.mapping.fromJS({
            LevelName: '',
            FirstName: '',
            LastName: '',
            Email: '',
            IsAssistable: false,
            IsAssistabilitySettingVisible: true
        });

        _this.NewNode.allowToAddNewNode = ko.pureComputed({
            read: function() {
                return _this.validateNewNode(false);
            },
            deferEvaluation: true
        });

        _this.AddNewNodeCaption = ko.observable('');
        _this.CanImportHierarchy = ko.observable(false);
    };

    this.initComputed = function () {
        _this.canSearch = ko.pureComputed(function () {
            return (_this.HierarchyGrid.SelectedSearchMode() != null) && ($.trim(_this.HierarchyGrid.SearchText()).length > 0);
        });

        _this.areEmailFieldsFilled = ko.pureComputed(function () {
            return ($.trim(_this.EmailSending.Subject()).length > 0) &&
                ($.trim(_this.EmailSending.Body()).length > 0);
        });

        _this.HasSelectedPerson = ko.pureComputed(function () {
            return _selectedPersons().length > 0;
        });
    };

    this.getSelectedIds = function() {
        return ko.utils.arrayMap(_selectedPersons(), function (person) {
            return person.Id();
        });
    };

    this.createActionTargetObservableClone = function () {
        _this.ActionTargetNodeObservableClone = {
            LevelName: ko.observable(''),
            ResponsiblePersons: ko.observableArray(),

            IsReady: ko.observable(false),
            RemovableNodeCaption: ko.observable(''),
            RemovableNodeConfirmationText: ko.observable(''),
            RenameNodeCaption: ko.observable(''),
            EditManagersCaption: ko.observable(''),
            EditRespondentsCaption: ko.observable(''),
            SendNodeCaption: ko.observable(''),
            ChangeMembersCountCaption: ko.observable(''),
        };
    };

    this.updateActionTargetObservableClone = function (node) {
        _this.ActionTargetNodeObservableClone.IsReady(false);
        _this.toObservableNode(ko.mapping.toJS(node), _this.ActionTargetNodeObservableClone);

        _this.ActionTargetNodeObservableClone.RemovableNodeCaption(messages.removeMessage + ' ' + _this.ActionTargetNodeObservableClone.LevelName());
        _this.ActionTargetNodeObservableClone.RemovableNodeConfirmationText(messages.sureToRemoveMessage + ' ' + _this.ActionTargetNodeObservableClone.LevelName() + '?');
        _this.ActionTargetNodeObservableClone.RenameNodeCaption(messages.renameMessage + ' ' + _this.ActionTargetNodeObservableClone.LevelName());
        _this.ActionTargetNodeObservableClone.EditManagersCaption(messages.editManagersMessage + ' ' + _this.ActionTargetNodeObservableClone.LevelName());
        _this.ActionTargetNodeObservableClone.EditRespondentsCaption(messages.editRespondentsMessage + ' ' + _this.ActionTargetNodeObservableClone.LevelName());
        _this.ActionTargetNodeObservableClone.ChangeMembersCountCaption(messages.changeMembersCountMessage + ' ' + _this.ActionTargetNodeObservableClone.LevelName());


        var responsiblePersonEmails = $.Enumerable.From(_this.ActionTargetNodeObservableClone.ResponsiblePersons())
            .Select(function (person) {
                return person.Email();
            }).ToArray();

        _this.ActionTargetNodeObservableClone.SendNodeCaption(messages.sendToMessage + ' ' + _this.ActionTargetNodeObservableClone.LevelName() + ' (' + responsiblePersonEmails.join(', ') + ')');

        if (_this.ActionTargetNodeObservableClone.ResponsiblePersons().length == 0) {
            _this.addNewManager();
        }

        _this.ActionTargetNodeObservableClone.IsReady(true);
    };

    this.exportHierarchy = function () {
        var url = urls.exportHierarchyUrl;
        window.location.href = url;
    };

    this.onNodeClick = function (node) {
        if (!node.HasChildren()) {
            return;
        }

        if (node.IsExpanded()) {
            _this.collapseNode(node);
        } else {
            if (node.ChildrenLoaded()) {
                _this.expandNode(node);
            } else {
                _this.getChildrenNodes(node);
            }
        }
    };

    _this.onPersonChecked = function(person) {
        if (person.IsSelected()) {
            _selectedPersons.push(person);
        } else {
            _selectedPersons.remove(person);
        }

        return true;
    };

    var toggleChildrenSelection = function(node, state) {
        if (node.HasChildren()) {
            var children = _this.findNodes(node.ChildrenIds);
            for (var i = 0; i < children.length; i++) {
                var child = children[i];

                child.IsSelected(state);
                toggleChildrenSelection(child, state);
            }
        }

        ko.utils.arrayForEach(node.ResponsiblePersons(), function(person) {
            if (person.IsSelected() !== state && !person.IsReadOnly()) {
                person.IsSelected(state);
                _this.onPersonChecked(person);
            }
        });
    };

    this.onNodeChecked = function(node) {
        toggleChildrenSelection(node, node.IsSelected());

        return true;
    };

    this.findNode = function (nodeId) {
        var result = $.Enumerable.From(_this.HierarchyGrid.Nodes())
            .Where(function (node) {
                return (node.NodeId() == nodeId);
            }).FirstOrDefault();

        return result;
    };

    this.findNodes = function (nodeIds) {
        var result = $.Enumerable.From(_this.HierarchyGrid.Nodes())
            .Where(function (node) {
                return (nodeIds.indexOf(node.NodeId()) >= 0);
            }).ToArray();

        return result;
    };

    this.getNodeIndex = function (nodeId) {
        //TODO: optimize
        //try {
        var result = $.Enumerable.From(_this.HierarchyGrid.Nodes())
            .Select(function (item, index) {
                return { item: item, index: index };
            })
            .Where(function (map) {
                return (map.item.NodeId() == nodeId);
            })
            .First().index;

        return result;
        //}
        //catch (err) {
        //    return -1;
        //}
    };

    this.getChildrenNodes = function (node) {
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON(node),
            urls.getChildrenNodesUrl,
            function (data) {
                var position = _this.HierarchyGrid.Nodes.indexOf(node) + 1;
                for (var i = 0; i < data.ExtraData.length; i++) {
                    _this.HierarchyGrid.Nodes.splice(position + i, 0, ko.mapping.fromJS(data.ExtraData[i]));
                }

                node.ChildrenLoaded(true);
                node.IsExpanded(true);
            }
        );
    };

    this.countInnerNodes = function (node) {
        var result = 0;
        var children = _this.findNodes(node.ChildrenIds);
        if (children.length == 0)
            return result;

        result += children.length;

        for (var i = 0; i < children.length; i++) {
            result += _this.countInnerNodes(children[i]);
        }
        
        return result;
    };

    this.expandNode = function (node) {
        node.IsExpanded(true);//must be called before
        this.setChildrenVisibility(node, true);
    };

    this.collapseNode = function (node) {
        node.IsExpanded(false);//must be called before
        this.setChildrenVisibility(node, false);
    };

    this.setChildrenVisibility = function (node, state) {
        //children precondition
        if (!node.HasChildren() || !node.ChildrenLoaded()) {
            return;
        }

        //for expand operation stop recursion when child node is collapsed
        if (state && !node.IsExpanded()) {
            return;
        }

        var children = _this.findNodes(node.ChildrenIds);
        for (var i = 0; i < children.length; i++) {
            var child = children[i];

            child.IsVisible(state);
            _this.setChildrenVisibility(child, state);
        }
    };

    this.setActionTarget = function (node) {
        _this.ActionTargetNode = node;
        _this.updateActionTargetObservableClone(node);
    };

    this.onAddNewNode = function (parentNode) {
        _this.ActionTargetNode = parentNode;
        _this.AddNewNodeCaption(messages.addToMessage + ' ' + parentNode.LevelName());

        _this.NewNode.LevelName('');
        _this.NewNode.FirstName('');
        _this.NewNode.LastName('');
        _this.NewNode.Email('');

        ko.shared.showPopupFromTemplate('add-hierarchy-node-dialog-template', _this);
    };

    this.onRenameNode = function (node) {
        _this.setActionTarget(node);
        ko.shared.showPopupFromTemplate('rename-hierarchy-node-dialog-template', _this);
    };

    this.onRemoveNode = function (node) {
        _this.setActionTarget(node);
        ko.shared.showPopupFromTemplate('remove-hierarchy-node-dialog-template', _this);
    };

    this.onEditManagers = function (node) {
        _this.setActionTarget(node);
        ko.shared.showPopupFromTemplate('edit-managers-dialog-template', _this);
    };

    this.onEditRespondents = function (node) {
        _this.setActionTarget(node);
        ko.shared.showPopupFromTemplate('edit-respondents-dialog-template', _this);
    };

    this.onChangeMemberCount = function (node) {
        _this.setActionTarget(node);
        ko.shared.showPopupFromTemplate('change-member-count-dialog-template', _this);
    };

    this.onMoveNode = function (node) {
        _this.setActionTarget(node);

        var obl = {
            nodeToMove: node,
            parentNodeId: node.ParentNodeId()
        };

        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON(obl),
            urls.getNodesForMovingUrl,
            function (data) {
                _this.HierarchyGrid.SelectedNode = ko.mapping.fromJS(node);
                _this.MovePopup.Header(messages.moveMessage + ' ' + node.LevelName() + " " + messages.toMessage);
                _this.MovePopup.Nodes.removeAll();
                ko.mapping.fromJS(data.ExtraData, {}, _this.MovePopup.Nodes);

                ko.shared.showPopupFromTemplate('move-hierarchy-node-dialog-template', _this);
            });
    };

    this.moveNode = function () {
        //var nodeToTake;
        //for (var i = 0; i < _this.MovePopup.Nodes().length; i++) {
        //    if (_this.MovePopup.Nodes()[i].Selected()) {
        //        nodeToTake = _this.MovePopup.Nodes()[i];
        //        break;
        //    }
        //}
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON({
                nodeToMove: ko.mapping.toJS(_this.HierarchyGrid.SelectedNode),
                nodeToTake: ko.mapping.toJS(_this.MovePopup.SelectedNode)
            }),
            urls.moveNodeUrl,
            function (data) {
                if (!data.ErrorCode) {
                    var nodeToMove = _this.HierarchyGrid.SelectedNode;
                    var nodeIndex = _this.getNodeIndex(nodeToMove.NodeId());
                    var nodesToRemoveCount = _this.countInnerNodes(nodeToMove) + 1;

                    var nodesToMove = _this.HierarchyGrid.Nodes.splice(nodeIndex, nodesToRemoveCount);

                    if (nodeToMove.ParentNodeId()) {
                        var parent = _this.findNode(nodeToMove.ParentNodeId());
                        parent.ChildrenIds.remove(nodeToMove.NodeId());

                        if (parent.ChildrenIds().length == 0) {
                            parent.HasChildren(false);
                            parent.IsExpanded(false);
                        }
                    }

                    //var nodeToTake = _this.MovePopup.SelectedNode();
                    var nodeToTake = _this.findNode(_this.MovePopup.SelectedNode().NodeId());

                    if (nodeToMove.ParentNodeId()) {
                        nodeToMove.ParentNodeId(_this.MovePopup.SelectedNode().NodeId());
                    }

                    if (nodeToTake) {
                        var indexToMove = _this.getNodeIndex(nodeToTake.NodeId()) + 1;
                        var hasChildren = nodeToTake.HasChildren();
                        if (nodeToTake.HasChildren()) {
                            var children = _this.findNodes(nodeToTake.ChildrenIds);
                            for (var i = 0; i < children.length; i++) {
                                indexToMove += (_this.countInnerNodes(children[i]) + 1);
                            }
                        }
                        nodeToTake.ChildrenIds.push(nodeToMove.NodeId());
                        if (hasChildren) {
                            if (nodeToTake.IsExpanded()) {
                                for (var i = 0; i < nodesToMove.length; i++) {
                                    _this.HierarchyGrid.Nodes.splice(indexToMove + i, 0, nodesToMove[i]);
                                }
                            } else {
                                if (nodeToTake.ChildrenLoaded()) {
                                    for (var i = 0; i < nodesToMove.length; i++) {
                                        _this.HierarchyGrid.Nodes.splice(indexToMove + i, 0, nodesToMove[i]);
                                    }
                                    _this.expandNode(nodeToTake);
                                } else {
                                    _this.getChildrenNodes(nodeToTake);
                                }
                            }
                        } else {
                            //_this.HierarchyGrid.Nodes.splice(newNodeIndex, 0, newNode);
                            for (var i = 0; i < nodesToMove.length; i++) {
                                _this.HierarchyGrid.Nodes.splice(indexToMove + i, 0, nodesToMove[i]);
                            }
                            nodeToTake.HasChildren(true);
                            nodeToTake.ChildrenLoaded(true);
                            nodeToTake.IsExpanded(true);
                        }
                    }
                    $('#moveHierarchyNodeModal').modal('hide');
                }
                Webropol.Common.showSuccessMessage(data, null);
            });
    };

    _this.validateNewNode = function (showToastr) {
        if (($.trim(_this.NewNode.FirstName()).length == 0) ||
            ($.trim(_this.NewNode.LastName()).length == 0) ||
            ($.trim(_this.NewNode.Email()).length == 0) || 
            ($.trim(_this.NewNode.LevelName()).length == 0)  ) {

            if (showToastr) {
                toastr.error(messages.allFieldsMandatoryMessage);
            }
            return false;
        }

        if (!Webropol.Common.validateRequiredEmail(_this.NewNode.Email())) {
            if (showToastr) {
                toastr.error(messages.enterValidEmailMessage);
            }
            return false;
        }

        return true;
    };

    this.addNewNode = function () {
        if (!_this.validateNewNode(true)) {
            return;
        }

        var nodeToAdd = ko.mapping.toJS(_this.NewNode);
        nodeToAdd.ResponsiblePersons = [{
            FirstName: nodeToAdd.FirstName,
            LastName: nodeToAdd.LastName,
            Email: nodeToAdd.Email,
            IsAssistable: nodeToAdd.IsAssistable
        }];

        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON({
                nodeToAdd: nodeToAdd,
                parentNode: ko.mapping.toJS(_this.ActionTargetNode)
            }),
            urls.addHierarchyNodeUrl,
            function (data) {
                if (!data.ErrorCode) {
                    var newNode = _this.toObservableNode(data.ExtraData, {});
                    var newNodeIndex = _this.calculateNewNodeIndex();
                    var hasChildren = _this.ActionTargetNode.HasChildren();

                    _this.ActionTargetNode.ChildrenIds.push(newNode.NodeId());

                    if (hasChildren) {
                        if (_this.ActionTargetNode.IsExpanded()) {
                            _this.HierarchyGrid.Nodes.splice(newNodeIndex, 0, newNode);
                        } else {
                            if (_this.ActionTargetNode.ChildrenLoaded()) {
                                _this.HierarchyGrid.Nodes.splice(newNodeIndex, 0, newNode);
                                _this.expandNode(_this.ActionTargetNode);
                            } else {
                                _this.getChildrenNodes(_this.ActionTargetNode);
                            }
                        }
                    } else {
                        _this.HierarchyGrid.Nodes.splice(newNodeIndex, 0, newNode);
                        _this.ActionTargetNode.HasChildren(true);
                        _this.ActionTargetNode.ChildrenLoaded(true);
                        _this.ActionTargetNode.IsExpanded(true);
                    }
                    $('#addHierarchyNodeModal').modal('hide');
                }
                Webropol.Common.showSuccessMessage(data);
            });
    };

    this.calculateNewNodeIndex = function () {
        var result = _this.getNodeIndex(_this.ActionTargetNode.NodeId()) + 1;

        if (!_this.ActionTargetNode.HasChildren()) {
            return result;
        }

        var children = _this.findNodes(_this.ActionTargetNode.ChildrenIds);
        for (var i = 0; i < children.length; i++) {
            result += (_this.countInnerNodes(children[i]) + 1);
        }

        return result;
    };

    this.removeNode = function (toCompletelyDelete) {
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON({
                nodeToRemove: _this.ActionTargetNode,
                isExclude: !toCompletelyDelete
            }),
            urls.removeHierarchyNodeUrl,
            function (data) {
                if (!data.ErrorCode) {
                    var nodeIndex = _this.getNodeIndex(_this.ActionTargetNode.NodeId());
                    var nodesToRemoveCount = _this.countInnerNodes(_this.ActionTargetNode) + 1;

                    _this.HierarchyGrid.Nodes.splice(nodeIndex, nodesToRemoveCount);

                    if (_this.ActionTargetNode.ParentNodeId()) {
                        var parent = _this.findNode(_this.ActionTargetNode.ParentNodeId());
                        parent.ChildrenIds.remove(_this.ActionTargetNode.NodeId());

                        if (parent.ChildrenIds().length == 0) {
                            parent.HasChildren(false);
                            parent.IsExpanded(false);
                        }
                    }
                    $('#removeHierarchyNodeModal').modal('hide');
                }
                Webropol.Common.showSuccessMessage(data, null);
            });
    };

    this.renameNode = function () {
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON(_this.ActionTargetNodeObservableClone),
            urls.renameHierarchyNodeUrl,
            function (data) {
                _this.ActionTargetNode.LevelName(_this.ActionTargetNodeObservableClone.LevelName());
                $('#renameHierarchyNodeModal').modal('hide');
                Webropol.Common.showSuccessMessage(data, null);
            });
    };

    this.changeMembersCount = function () {
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON(_this.ActionTargetNodeObservableClone),
            urls.changeMemberCountUrl,
            function (data) {
                _this.ActionTargetNode.MembersCount(_this.ActionTargetNodeObservableClone.MembersCount());
                $('#changeMembersCountModal').modal('hide');
                Webropol.Common.showSuccessMessage(data, null);
            });
    };

    this.validateManager = function (manager, targetNode, displayValidationErrors) {
        manager.FirstName($.trim(manager.FirstName()));
        manager.LastName($.trim(manager.LastName()));
        manager.Email($.trim(manager.Email()));

        if ((manager.FirstName().length == 0) ||
            (manager.LastName().length == 0) ||
            (manager.Email().length == 0)) {
            if (displayValidationErrors) {
                toastr.error(messages.managersFieldsMandatoryMessage);
            }
            return false;
        }

        if (!Webropol.Common.validateEmail(manager.Email())) {
            if (displayValidationErrors) {
                toastr.error(messages.enterValidEmailMessage);
            }
            return false;
        }

        var doesAlreadyExist = $.Enumerable.From(targetNode.ResponsiblePersons())
            .Where(function (item) {
                return (item != manager) && ($.trim(item.Email()).toLowerCase() == $.trim(manager.Email()).toLowerCase());
            }).Any();

        if (doesAlreadyExist) {
            if (displayValidationErrors) {
                toastr.error(messages.managerAlreadyExistsMessage);
            }
            return false;
        }

        return true;
    };

    this.validateRespondent = function (respondent, targetNode, displayValidationErrors) {
        respondent.FirstName($.trim(respondent.FirstName()));
        respondent.LastName($.trim(respondent.LastName()));
        respondent.Email($.trim(respondent.Email()));

        if ((respondent.FirstName().length == 0) ||
            (respondent.LastName().length == 0) ||
            (respondent.Email().length == 0)) {
            if (displayValidationErrors) {
                toastr.error(messages.managersFieldsMandatoryMessage);
            }
            return false;
        }

        //if (!Webropol.Common.validateEmailBase(manager.Email())) {
        if (!Webropol.Common.validateEmail(respondent.Email())) {
            if (displayValidationErrors) {
                toastr.error(messages.enterValidEmailMessage);
            }
            return false;
        }

        var doesAlreadyExist = $.Enumerable.From(targetNode.Respondents())
            .Where(function (item) {
                return (item != respondent) && ($.trim(item.Email()).toLowerCase() == $.trim(respondent.Email()).toLowerCase());
            }).Any();

        if (doesAlreadyExist) {
            if (displayValidationErrors) {
                toastr.error(messages.respondentAlreadyExistsMessage);
            }
            return false;
        }

        return true;
    };

    this.addNewManager = function () {
        var newManager = _this.toObservableManager({
            Id: Webropol.Shared.Common.guidEmpty,
            FirstName: "",
            LastName: "",
            Email: "",
            IsAssistable: false,
            IsAssistabilitySettingVisible: true,
            IsRespondent: false
        });

        _this.ActionTargetNodeObservableClone.ResponsiblePersons.push(newManager);

    };
    
    this.addNewRespondent = function () {
        var newRespondent = _this.toObservableManager({
            Id: Webropol.Shared.Common.guidEmpty,
            FirstName: "",
            LastName: "",
            Email: "",
            IsAssistable: false,
            IsAssistabilitySettingVisible: true
        });

        _this.ActionTargetNodeObservableClone.Respondents.push(newRespondent);

    };
    
    this.onRemoveManager = function (manager) {
        if (_this.ActionTargetNodeObservableClone.ResponsiblePersons().length == 1) {
            toastr.error(messages.atLeastOneManagerMessage);
        } else {
            _this.removeManager(manager);
        }
    };

    this.onRemoveRespondent = function (respondent) {
        _this.removeRespondent(respondent);
    };

    this.removeRespondent = function (respondent) {
        _this.ActionTargetNodeObservableClone.Respondents.remove(respondent);
    };

    this.removeManager = function (manager) {
        _this.ActionTargetNodeObservableClone.ResponsiblePersons.remove(manager);
        if (_this.ActionTargetNodeObservableClone.ResponsiblePersons().length == 0) {
            _this.addNewManager();
        }
    };

    this.saveManagers = function () {
        if (!_this.ActionTargetNodeObservableClone.validateManagers(true)) {
            return;
        }

        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON({
                node: _this.ActionTargetNodeObservableClone
            }),
            urls.saveManagersUrl,
            function (data) {
                if (!data.ErrorCode) {
                    ko.mapping.fromJS({ 'ResponsiblePersons': ko.mapping.toJS(_this.ActionTargetNodeObservableClone.ResponsiblePersons) }, _this.mappings.managersMapping, { 'ResponsiblePersons': _this.ActionTargetNode.ResponsiblePersons });
                    $('#editManagersModal').modal('hide');
                }
                Webropol.Common.showSuccessMessage(data, null);
            });
    };

    this.saveRespondents = function () {
        var nodeObservableClone = _this.ActionTargetNodeObservableClone;
        
        if (!nodeObservableClone.validateRespondents(true)) {
            return;
        }

        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON({
                node: nodeObservableClone
            }),
            urls.saveRespondentsUrl,
            function (data) {
                if (!data.ErrorCode) {
                    var targetNode = _this.ActionTargetNode;
                    var respondents = ko.utils.arrayFilter(nodeObservableClone.Respondents(),
                        function(person) {
                            return !targetNode.ResponsiblePersons().some((y) => y.Email() === person.Email());
                        });

                    ko.utils.arrayForEach(targetNode.ResponsiblePersons(), function (person) {
                        if (nodeObservableClone.Respondents().some((y) => y.Email() === person.Email())) {
                            person.IsRespondent(true);
                        }
                    });
                    
                    ko.mapping.fromJS({ 'Respondents': ko.mapping.toJS(respondents) }, _this.mappings.managersMapping, { 'Respondents': targetNode.Respondents });
                    
                    if (respondents.length > 0){
                        targetNode.HasChildren(true);
                    } else if (targetNode.ChildrenIds().length === 0) {
                        targetNode.HasChildren(false);
                    }
                    
                    $('#editRespondentsModal').modal('hide');
                }
                
                Webropol.Common.showSuccessMessage(data, null);
            });
    };

    this.onExpandAll = function () {
        var notLoadedToLevel = ko.utils.arrayFirst(_this.HierarchyGrid.Nodes(), function(node) {
            return !node.ChildrenLoaded();
        });

        if (notLoadedToLevel) {
            ko.shared.showPopupFromTemplate('full-hierarchy-loading-warning-dialog-template', _this);
        } else {
            _this.expandAll();
        }
    };

    this.loadFullHierarchy = function () {
        Webropol.Shared.Common.callAsync(
            null,
            urls.expandAllUrl,
            function (data) {
                var hierarchyGrid = { Nodes: data.ExtraData };

                //                    var t0 = performance.now();
                //                    console.log("Organization management, expanding...");

                var koObject = ko.wrap.fromJS({ Nodes: hierarchyGrid.Nodes }, _this.mappings.nodesMapping);
                //                    var t1 = performance.now();
                _this.HierarchyGrid.Nodes(koObject.Nodes());

                //                    var t2 = performance.now();
                //
                //                    console.log("ko.mapping.fromJS ==" + (t1 - t0) + " milliseconds.");
                //                    console.log("o.applyBindings ==" + (t2 - t1) + " milliseconds.");
                //                    console.log("Organization management, expand all ==" + (t2 - t0) + " milliseconds.");
                $('#fullHierarchyLoadingWarningModal').modal('hide');
            }, 0);
    };

    this.expandAll = function () {
        $.Enumerable.From(_this.HierarchyGrid.Nodes())
            .ForEach(function (node) {
                node.IsVisible(true);
                if (node.HasChildren) {
                    node.IsExpanded(true);
                }
            });
    };

    this.collapseAll = function () {
        $.Enumerable.From(_this.HierarchyGrid.Nodes())
            .ForEach(function (node) {
                if (node.DisplayLevel() > 0) {
                    node.IsVisible(false);
                }

                if (node.HasChildren) {
                    node.IsExpanded(false);
                }
            });
    };

    this.search = function () {
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON({
                searchMode: _this.HierarchyGrid.SelectedSearchMode(),
                searchText: _this.HierarchyGrid.SearchText()
            }),
            urls.hierarchySearchUrl,
            function (data) {
                _this.HierarchyGrid.Nodes.removeAll();
                ko.mapping.fromJS({ 'Nodes': data.ExtraData }, _this.mappings.nodesMapping, { 'Nodes': _this.HierarchyGrid.Nodes });
            });
    };

    this.onSendEmail = function (node) {
        _this.setActionTarget(node);

        //clear fields before open modal
        _this.EmailSending.Subject('');
        _this.EmailSending.Body('');
        ko.shared.showPopupFromTemplate('send-email-dialog-template', _this);
    };

    this.sendEmail = function () {
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON({
                node: ko.mapping.toJS(_this.ActionTargetNode),
                email: ko.mapping.toJS(_this.EmailSending)
            }),
            urls.sendEmailUrl,
            function (data) {
                Webropol.Common.showSuccessMessage(data, null);
                $('#sendEmailModal').modal('hide');
            });
    };

    this.getPersons = function (node) {
        var responsiblePersons = node.ResponsiblePersons();

        if (node.IsExpanded()) {
            return responsiblePersons.concat(node.Respondents());
        }

        return responsiblePersons;
    };
};;
