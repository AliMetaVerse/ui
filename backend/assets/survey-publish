/* Minification failed. Returning unminified contents.
(1010,114-115): run-time error JS1014: Invalid character: `
(1010,115-116): run-time error JS1195: Expected expression: ?
(1010,142-143): run-time error JS1014: Invalid character: `
 */
var Webropol = Webropol || {};
Webropol.Constants = Webropol.Constants || {};
Webropol.Constants.SurveyPublish = Webropol.Constants.SurveyPublish || {};

Webropol.Constants.SurveyPublish.ScheduledTaskType = {
    ResumeSurvey: 0,
    PauseSurveyPublic: 1,
    PauseSurveyPrivate: 2,
    MakeSurveyPrivate: 3,
    MakeSurveyPublic: 4,
    SendInvitation: 5,
    SendReminder: 6,
    SendThankYouPrivate: 7,
    SendThankYouPublic: 8,
};

Webropol.Constants.SurveyPublish.SchedulingOccurrenceType = {
    Once: 1,
    Reoccurrence: 2
};

Webropol.Constants.SurveyPublish.SchedulingReoccurringType = {
    Daily: 1,
    Weekly: 2,
    Monthly: 3,
    MonthlyRelative: 4
};

Webropol.Constants.SurveyPublish.SchedulingEditMode = {
    Public: 1,
    Private: 2
};

Webropol.Constants.SurveyPublish.SelectedPublishType = {
    Unpublished: 0,
    Public: 1,
    Private: 2,
    Both: 3
};

Webropol.Constants.SurveyPublish.SelectedColorCode = {
    Green: "#82b45f",
    Orange: "#ee6414",
    LightBlue: "#46bed7",
    Violet: "#7864aa",
    Petroleum: "#005267"
};


Webropol.Constants.SurveyPublish.PrivateLinkResponseType = {
    Email: 0,
    Sms: 1,
};

Webropol.Constants.SurveyPublish.EmailSendingMode = {
    Stub: -1,
    SendToAll: 0,
    SendToNew: 1,
    SendToSelected: 2,
    SendFirstReminders: 3,
    SendReminders: 4,
    SendToWaitlist: 5,
    SendGroupReminders: 6,
    SendWhoNotCompleteEvaluation: 7,
    SendWhoCompleteEvaluation: 8,
    SendWhoHaveAnswered: 9,
    SendToAllFromHierarchy: 10,
    SendToSelectedFromHierarchy: 11
};

Webropol.Constants.SurveyPublish.EmailValidationStatus = {
    Unknown: 0,
    Valid: 1,
    Invalid: 2
};

Webropol.Constants.SurveyPublish.CloseSurveyPopupBehavior = {
    CloseSurvey: 0,
    EditMessage: 1
};

Webropol.Constants.SurveyPublish.EvaluationRuleHierarchyLevelSelectionType = {
    AllItems: 1,
    RandomItems: 2
};

Webropol.Constants.SurveyPublish.AutoReportFilterType = {
    GenericOptionLinks: 0,
    PrefilledAnswerGroups: 1
};;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.CollectAnswers = function (urls, messages, imageGalleryViewModel) {
    var _this = this;
    var _urls = urls;
    var _messages = messages;
    var _imageGalleryViewModel = imageGalleryViewModel;

    var SelectedPublishType = Webropol.Constants.SurveyPublish.SelectedPublishType,
        closePrivateLinkMessageClone,
        closePublicLinkMessageClone;

    this.TotalAmountOfRecipients = ko.observable(0);
    this.ResetSurveyConfirmed = ko.observable(false);
    this.hasFirstClick = ko.observable(false);
    this.isHideOnLoading = ko.observable(true);
    this.isExpandedEmails = ko.observable(false);
    this.isExpandedSms = ko.observable(false);
    this.showSpamWarning = ko.observable(false);
    this.getPublish = function() {
        return _this;
    };

    this.updateAndApplyBindings = function (initialData) {

        var mapping = {
            'PrivateScheduling': {
                create: function (options) {
                    var s = new Webropol.SurveyPublish.Scheduling(_urls, _messages, _this);
                    s.init(options.data);
                    return s;
                }
            },
            'PublicScheduling': {
                create: function (options) {
                    var s = new Webropol.SurveyPublish.Scheduling(_urls, _messages, _this);
                    s.init(options.data);
                    return s;
                }
            },
            'EmailMessage': {
                create: function (options) {
                    var s = new Webropol.SurveyPublish.EmailMessage(_urls, _messages, _this);
                    Webropol.Common.EmailTemplateSaver.call(s, _urls);
                    s.init(options.data);
                    return s;
                }
            },
            'SmsMessage': {
                create: function (options) {
                    var s = new Webropol.SurveyPublish.SmsMessage(_urls, _messages, _this);
                    s.init(options.data);
                    return s;
                }
            },
            'EmailRecipients': {
                create: function (options) {
                    var s = new Webropol.SurveyPublish.ManageRecipients(_urls, _messages, _this, Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Email);
                    s.init(options.data);
                    return s;
                }
            },
            'SmsRecipients': {
                create: function (options) {
                    var s = new Webropol.SurveyPublish.ManageRecipients(_urls, _messages, _this, Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Sms);
                    s.init(options.data);
                    return s;
                }
            },
            'AutoReportFilterSettings': {
                create: function (options) {
                    var s = new Webropol.Shared.AutoReportFilterSettings(_urls, _messages, _this);
                    s.init(options.data);
                    return s;
                }
            },
            'LoginPageSettings': {
                create: function (options) {
                    var s = new Webropol.SurveyPublish.LoginPageSettings(_urls, _messages, _this);
                    s.init(options.data);
                    return s;
                }
            },
            'PublishRequestApproval': {
                create: function (options) {
                    var s = new Webropol.SurveyPublish.Approval(_urls, _messages, _this);
                    s.init(options.data);
                    return s;
                }
            },
            'DirectSurveyPublish': {
                create: function (options) {
                    var s = new Webropol.SurveyPublish.DirectSurveyPublish(_urls, _messages, _this);
                    s.init(options.data);
                    return s;
                }
            },
            'OwnPublicLink': {
                create: function (options) {
                    var s = new Webropol.SurveyPublish.CollectAnswers.OwnPublicLink(_urls);
                    s.init(options.data);
                    return s;
                }
            },
            'SmsSurveyPublish': {
                create: function (options) {
                    var s = new Webropol.SurveyPublish.SmsSurveyPublish(_urls, _messages, _this);
                    s.init(options.data);
                    return s;
                }
            },
        };

        ko.mapping.fromJS(Webropol.Shared.Common.parseJSON(initialData), mapping, _this);

        _this.initializeComputed();
        ko.applyBindings(_this);

        _this.subscribeOnValuesChanged();
        _this.PrivateScheduling.onBindingComplete();
        _this.PublicScheduling.onBindingComplete();
        _this.EmailMessage.onBindingComplete();
        _this.SmsMessage.onBindingComplete();
        _this.LoginPageSettings.onBindingComplete();
        _this.isHideOnLoading(false);
    };

    this.initializeComputed = function () {
        _this.canShowOverview = ko.computed({
            read: function () {
                const searchParams = new URLSearchParams(location.search);
                const selectedMenuItem = searchParams.get('selectedMenuItem');
                if (selectedMenuItem != 'smsSurvey') {
                    return _this.IsPublished() || _this.hasFirstClick();
                }
                else {
                    return true;
                }
            }
        });

        _this.IsPublic = ko.computed(function () {
            return _this.IsPublished() && !_this.IsBoth() && !_this.IsPrivate();
        });

        _this.IsPublicOrBoth = ko.pauseableComputed(function () {
            return _this.IsPublished() && !_this.IsPrivate();
        });

        _this.IsPrivateOrBoth = ko.computed(function () {
            return _this.IsPublished() && (_this.IsPrivate() || _this.IsBoth());
        });

        _this.CanSuspendPublicLink = ko.computed(function () {
            return _this.IsPublicOrBoth() && !_this.IsSuspended();
        });

        _this.CanSuspendPrivateLink = ko.computed(function () {
            return _this.IsPrivateOrBoth() && !_this.IsSuspendedPrivate();
        });

        _this.InvitationText = ko.computed(function () {
            var subject = _this.EmailMessage.EmailSubject();
            var body = _this.EmailMessage.EmailBody();

            var subjectP = subject ? $("<div></div>").html(subject)[0].outerHTML : '';
            var bodyP = body ? $("<div></div>").html(body)[0].outerHTML : '';

            var invitataionText = subjectP + bodyP;
            return invitataionText || '-';
        });

        _this.CanOpenSendSummaryDialog = ko.computed(function () {
            return !_this.IsReadOnly() && ($.trim(_this.EmailMessage.EmailBody()).length > 0);
        });

    };

    this.subscribeOnValuesChanged = function () {
        var oldPublishTypeValue;
        _this.CollectingMethod.PublishTypeSelected.subscribe(function (oldValue) {
            oldPublishTypeValue = oldValue;
        }, null, "beforeChange");

        _this.CollectingMethod.PublishTypeSelected.subscribe(function (newValue) {
            _this.IsPublicOrBoth.pause();

            switch (newValue) {
                case SelectedPublishType.Public:
                    _this.IsPublished(true);
                    break;
                case SelectedPublishType.Private:
                    _this.IsPublished(true);
                    _this.IsPrivate(true);
                    break;
                case SelectedPublishType.Both:
                    _this.IsPublished(true);
                    _this.IsPrivate(false);
                    _this.IsBoth(true);

                    if (oldPublishTypeValue === SelectedPublishType.Public) {
                        _this.IsSuspendedPrivate(false);
                    }
                    if (oldPublishTypeValue === SelectedPublishType.Private) {
                        _this.IsSuspended(false);
                    }

                    break;
            }

            _this.IsPublicOrBoth.resume();
        });
    };

    this.showSendSummaryDialog = function () {
        _this.EmailMessage.TestEmails.removeAll();
        ko.shared.showPopupFromTemplate("test-send-popup-template", _this);
    };

    this.switchPublishEmbeddedLinkText = function (data, event) {
        var $link = $(event.target);
        $link.text($link.hasClass('collapsed')
            ? messages.hideEmbeddedLink
            : messages.showEmbeddedLink);
    };

    this.onBeforeResetSurvey = function () {
        ko.shared.showPopupFromTemplate("reset-survey-notification-template", _this);
    };

    this.resetSurvey = function () {
        var obj = {
            surveyId: _this.Id(),
            isPersistUsers: _this.IsCaseManagment()
        };

        Webropol.Shared.Common.callAsync(
            JSON.stringify(obj),
            _urls.surveyResetUrl,
            function (data) {
                window.location.reload();
            });
    };

    this.needsToShowFirstPublishNotification = function (publishType, isSendOperation) {
        return !_this.IsPublished();
    };

    this.getPublicLinkAction = function () {
        return _this.IsPublicOrBoth()
            ? function () { _this.togglePublicLinkSuspendState(); }
            : openPublicLink;

        function openPublicLink() {
            if (_this.needsToShowFirstPublishNotification(Webropol.Constants.SurveyPublish.SelectedPublishType.Public)) {

                var header = _this.IsEvent()
                    ? _messages.firstPublishHeaderByPublicLinkForEvent
                    : _messages.firstPublishHeaderByPublicLink;
                var mainNotification = _this.IsEvent()
                    ? _messages.firstPublishPublicLinkNoteForEvent
                    : _messages.firstPublishPublicLinkNote;

                var firstPublishInitialData = {
                    header: header,
                    mainNotification: mainNotification,
                    submitButtonText: _messages.firstPublishSubmitButtonByPublicLink,
                    submitAction: _this.publishSurveyAction,
                    viewEditingPossibilities: _messages.firstPublishViewEditingPossibilitiesWeblink,
                    showSpamWarning: _this.showSpamWarning
                };
                new Webropol.SurveyPublish.CollectAnswers.FirstPublish(urls, messages, _this).init(firstPublishInitialData).showModal();
            } else {
                _this.publishSurveyAction();
            }
        }
    };

    this.publishSurveyAction = function () {
        if (_this.IsPrivate()) {
            _this.CollectingMethod.PublishTypeSelected(SelectedPublishType.Both);
        } else {
            _this.CollectingMethod.PublishTypeSelected(SelectedPublishType.Public);
        }

        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON(_this.CollectingMethod),
            _urls.surveyPublishUrl,
            function (data) {
                _this.IsSuspended(false);
                _this.Workflow.Reporting.Disabled(false);
                _this.Workflow.Followup.Disabled(false);
                _this.Workflow.Analysis.Disabled(false);
                _this.Workflow.ManageEventParticipants.Disabled(false);

                ko.shared.notifySuccess(_this, data.Message);
                $('[data-toggle="popover"]').popover();
            });
    };

    this.togglePublicLinkSuspendState = function () {
        if (_this.IsSuspended()) {
            if (_this.needsToShowFirstPublishNotification(Webropol.Constants.SurveyPublish.SelectedPublishType.Public)) {
                var firstPublishInitialData = {
                    SelectedPublishType: SelectedPublishType.Public,
                    header: _messages.firstPublishHeaderByPublicLink,
                    mainNotification: _messages.firstPublishPublicLinkNote,
                    submitButtonText: _messages.firstPublishSubmitButtonByPublicLink,
                    submitAction: unsuspendPublicLink,
                    viewEditingPossibilities: _messages.firstPublishViewEditingPossibilitiesWeblink,
                    showSpamWarning: _this.showSpamWarning
                };
                new Webropol.SurveyPublish.CollectAnswers.FirstPublish(urls, messages, _this).init(firstPublishInitialData).showModal();
            } else {
                unsuspendPublicLink();
            }
        } else {

            var header = _this.IsEvent()
                ? _messages.closeSurveyPublicLinkForEvent
                : _messages.closeSurveyPublicLink;

            var closeSurveyWarningText = _this.IsEvent()
                ? _messages.closeSurveyPublicLinkWarningTextForEvent
                : _messages.closeSurveyPublicLinkWarningText;

            var closeLinkInitialData = {
                SelectedPublishType: SelectedPublishType.Public,
                header: header,
                editCloseMessageTitle: _messages.closeSurveyEditPublicMessageTitle,
                submitButtonText: _messages.closeSurveyPublicLinkPopupSubmitButton,
                editCloseMessageText: _messages.closeSurveyEditPublicMessageText,
                closeSurveyWarningText: closeSurveyWarningText,
                onSubmit: function () {
                    _this.IsSuspended(true);
                }
            };

            _this.SurveyCloseMessagePublic = _this.SurveyCloseMessagePublic || new Webropol.SurveyPublish.CollectAnswers.CloseSurvey(urls, messages, _this);
            _this.SurveyCloseMessagePublic.init(closeLinkInitialData).showCloseLinkModal(closePublicLinkMessageClone);
        }

        function unsuspendPublicLink() {
            Webropol.Shared.Common.callAsync(
                ko.mapping.toJSON({
                    SelectedPublishType: SelectedPublishType.Public
                }),
                _urls.openSurveyUrl,
                function(result) {
                    _this.IsSuspended(false);
                    ko.shared.notifySuccess(_this, result.Message);
                    _this.Workflow.Reporting.Disabled(false);
                    _this.Workflow.Followup.Disabled(false);
                    _this.Workflow.ManageEventParticipants.Disabled(false);
                });
        }
    };

    this.handleSendSurvey = function (sendSurveyInstance) {
        if (_this.needsToShowFirstPublishNotification(Webropol.Constants.SurveyPublish.SelectedPublishType.Private, true)) {
            if (sendSurveyInstance.EmailRecipientsCount) {
                _this.showSpamWarning(sendSurveyInstance.EmailRecipientsCount.RecipientsDomainCount() > 1 && !sendSurveyInstance.UseUnsubscribeOption());
            }

            var mainNotification = _this.IsEvent()
                ? _messages.firstPublishPrivateLinkNoteForSendSurveyForEvent
                : _messages.firstPublishPrivateLinkNoteForSendSurvey;

            var header = _this.IsEvent()
                ? _messages.firstPublishHeaderForSendSurveyForEvent
                : _messages.firstPublishHeaderForSendSurvey;

            var submitButtonText = _this.IsEvent()
                ? _messages.firstPublishSubmitButtonForSendSurveyForEvent
                : !_this.showSpamWarning() ? _messages.firstPublishSubmitButtonForSendSurvey : _messages.firstPublishSubmitButtonForSendSurveyAddSub;
            
            var firstPublishInitialData = {
                header: header,
                mainNotification: mainNotification,
                submitButtonText: submitButtonText,
                sendWithoutUnsubscribeButtonText: _messages.firstPublishSubmitButtonForSendSurveyNoUnsub,
                showSpamWarning: _this.showSpamWarning,
                submitAction: sendSurveyInstance.publishSurveyAction,
                addUnsubSubmitAction: sendSurveyInstance.publishSurveyWithUnsubscribeAction,
                viewEditingPossibilities: _messages.firstPublishViewEditingPossibilitiesPrivateLink
            };
            new Webropol.SurveyPublish.CollectAnswers.FirstPublish(urls, messages, _this).init(firstPublishInitialData).showModal();
        } else {
            sendSurveyInstance.publishSurveyAction();
        }
    };

    this.togglePrivateLinkSuspendState = function () {
        if (_this.IsSuspendedPrivate()) {
            if (_this.needsToShowFirstPublishNotification(Webropol.Constants.SurveyPublish.SelectedPublishType.Private)) {
                var firstPublishInitialData = {
                    header: _messages.firstPublishHeaderByPrivateLink,
                    mainNotification: _messages.firstPublishPrivateLinkNote,
                    submitButtonText: _messages.firstPublishSubmitButtonByPrivateLink,
                    submitAction: unsuspendPrivateLink,
                    viewEditingPossibilities: _messages.firstPublishViewEditingPossibilitiesPrivateLink,
                    showSpamWarning: ko.observable(false)
                };
                new Webropol.SurveyPublish.CollectAnswers.FirstPublish(urls, messages, _this).init(firstPublishInitialData).showModal();
            } else {
                unsuspendPrivateLink();
            }
        } else {
            var closeSurveyWarningText = _this.IsEvent()
                ? _messages.closeSurveyPublicLinkWarningTextForEvent
                : _messages.closeSurveyPrivateLinkWarningText;
            var header = _this.IsEvent() ? _messages.closeSurveyPrivateLinkForEvent : _messages.closeSurveyPrivateLink;
            var editCloseMessageTitle = _this.IsEvent()
                ? _messages.closeSurveyEditPrivateMessageTitleForEvent
                : _messages.closeSurveyEditPrivateMessageTitle;
            var submitButtonText = _this.IsEvent() ? _messages.closeSurveyPrivateLinkForEvent : _messages.closeSurveyPrivateLinkPopupSubmitButton;
            var editCloseMessageText = _this.IsEvent() ? _messages.closeSurveyEditPrivateMessageTextForEvent : _messages.closeSurveyEditPrivateMessageText;

            var closeLinkInitialData = {
                SelectedPublishType: SelectedPublishType.Private,
                header: header,
                editCloseMessageTitle: editCloseMessageTitle,
                submitButtonText: submitButtonText,
                closeSurveyWarningText: closeSurveyWarningText,
                editCloseMessageText: editCloseMessageText,
                onSubmit: function () {
                    _this.IsSuspendedPrivate(true);
                }
            };

            _this.SurveyCloseMessagePrivate = _this.SurveyCloseMessagePrivate || new Webropol.SurveyPublish.CollectAnswers.CloseSurvey(urls, messages, _this);
            _this.SurveyCloseMessagePrivate.init(closeLinkInitialData).showCloseLinkModal(closePrivateLinkMessageClone);
        }

        function unsuspendPrivateLink() {
            Webropol.Shared.Common.callAsync(
                ko.mapping.toJSON({
                    SelectedPublishType: SelectedPublishType.Private
                }),
                _urls.openSurveyUrl,
                function (result) {
                    _this.IsSuspendedPrivate(false);
                    ko.shared.notifySuccess(_this, result.Message);
                });
        }
    };

    this.editClosePublicSurveyMessage = function () {
        var header = _this.IsEvent() ? _messages.webLinkIsClosedHeaderForEvent : _messages.webLinkIsClosedHeader;
        var initialData = {
            SelectedPublishType: SelectedPublishType.Public,
            header: header,
            submitButtonText: _messages.closeSurveyPublicLinkPopupSubmitButton,
            editCloseMessageText: _messages.closeSurveyEditPublicMessageText,
        };


        _this.SurveyCloseMessagePublic = _this.SurveyCloseMessagePublic || new Webropol.SurveyPublish.CollectAnswers.CloseSurvey(urls, messages, _this);
        _this.SurveyCloseMessagePublic.init(initialData).showEditCloseMessageModal(closePublicLinkMessageClone);
    };

    this.getEditClosePrivateSurveyMessage = function() {
        if (!_this.IsReadOnly()) {
            _this.editClosePrivateSurveyMessage();
        }
    };

    this.editClosePrivateSurveyMessage = function () {
        var editCloseMessageText = _this.IsEvent() ? _messages.closeSurveyEditPrivateMessageTextForEvent : _messages.closeSurveyEditPrivateMessageText;
        var initialData = {
            SelectedPublishType: SelectedPublishType.Private,
            header: _messages.privateLinkIsClosedHeader,
            submitButtonText: _messages.closeSurveyPrivateLinkPopupSubmitButton,
            editCloseMessageText: editCloseMessageText,
        };

        _this.SurveyCloseMessagePrivate = _this.SurveyCloseMessagePrivate || new Webropol.SurveyPublish.CollectAnswers.CloseSurvey(urls, messages, _this);
        _this.SurveyCloseMessagePrivate.init(initialData).showEditCloseMessageModal(closePrivateLinkMessageClone);
    };

    this.getPublicLinkButtonText = function () {
        if (_this.CanSuspendPublicLink()) {
            return _this.IsEvent()
                ? _messages.closeSurveyPublicLinkForEvent
                : _messages.closeSurveyPublicLink;
        }

        return _this.IsEvent()
            ? _messages.openSurveyPublicLinkForEvent
            : _messages.openSurveyPublicLink;
    };

    this.getPrivateLinkSuspendButtonText = function () {
        if (_this.CanSuspendPrivateLink()) {
            return _this.IsEvent()
                ? _messages.closeSurveyPrivateLinkForEvent
                : _messages.closeSurveyPrivateLink;
        }

        return _this.IsEvent()
            ? _messages.openSurveyPrivateLinkForEvent
            : _messages.openSurveyPrivateLink;
    };

    this.getPrivateLinkButtonTextInOverviewGrid = function () {
        if (_this.CanSuspendPrivateLink()) {
            return _this.IsEvent()
                ? _messages.closeSurveyPrivateLinkForEvent
                : _messages.privateLinkCloseButtonTextInOverviewGrid;
        }

        return _this.IsEvent()
            ? _messages.openSurveyPrivateLinkForEvent
            : _messages.privateLinkOpenButtonTextInOverviewGrid;
    };

    this.getPublicLinkButtonTextInOverviewGrid = function () {
        return _this.CanSuspendPublicLink()
                ? _messages.publicLinkCloseButtonTextInOverviewGrid
                : _messages.publicLinkOpenButtonTextInOverviewGrid;
    };

    this.getOpenPublicLinkStateText = function () {
        var firstPublicScheduledOnOpen = _this.getFirstPublicScheduledTaskOnOpen();

        var closedMessage = _this.IsEvent() ? messages.webLinkClosedStateForEvent : messages.webLinkClosedState;
        if (firstPublicScheduledOnOpen == null) {
            return closedMessage;
        }

        return Webropol.Shared.Common.stringFormat(closedMessage + messages.webLinkOpenStateByScheduling, firstPublicScheduledOnOpen.NextRunDate());
    };

    this.getFirstPublicScheduledTaskOnOpen = function() {
        return ko.utils.arrayFirst(_this.PublicScheduling.ActiveReminders(), function (reminder) {
            return (reminder.RegionType() == Webropol.Constants.SurveyPublish.ScheduledTaskType.MakeSurveyPublic);
        });
    };

    this.getClosePublicLinkStateText = function () {
        var firstPublicScheduledOnClose = getFirstPublicScheduledTaskOnClose();

        var openedMessage = _this.IsEvent() ? messages.webLinkOpenStateForEvent : messages.webLinkOpenState;

        if (firstPublicScheduledOnClose == null) {
            return openedMessage;
        }

        var scheduledMessage = _this.IsEvent()
            ? messages.webLinkClosedStateBySchedulingForEvent
            : messages.webLinkClosedStateByScheduling;

        return Webropol.Shared.Common.stringFormat(openedMessage + scheduledMessage, firstPublicScheduledOnClose.NextRunDate());

        function getFirstPublicScheduledTaskOnClose() {
            return ko.utils.arrayFirst(_this.PublicScheduling.ActiveReminders(), function (reminder) {
                return (reminder.RegionType() == Webropol.Constants.SurveyPublish.ScheduledTaskType.PauseSurveyPublic);
            });
        }
    };

    this.getOpenPrivateLinkStateText = function () {
        var firstPrivateScheduledOnOpen = getFirstPrivateScheduledTaskOnOpen();
        var closedState = _this.IsEvent() ? messages.privateLinkClosedStateForEvent : messages.privateLinkClosedState;

        if (firstPrivateScheduledOnOpen == null) {
            return closedState;
        }

        var openedMessage = _this.IsEvent() ? messages.privateLinkOpenStateBySchedulingForEvent : messages.privateLinkOpenStateByScheduling;
        return Webropol.Shared.Common.stringFormat(openedMessage, firstPrivateScheduledOnOpen.NextRunDate());

        function getFirstPrivateScheduledTaskOnOpen() {
            return ko.utils.arrayFirst(_this.PrivateScheduling.ActiveReminders(), function (reminder) {
                return (reminder.RegionType() == Webropol.Constants.SurveyPublish.ScheduledTaskType.MakeSurveyPrivate);
            });
        }
    };

    this.getClosePrivateLinkStateText = function () {
        var firstPublicScheduledOnClose = getFirstPrivateScheduledTaskOnClose();
        var openedMessage = _this.IsEvent() ? messages.privateLinkOpenStateForEvent : messages.privateLinkOpenState;

        if (firstPublicScheduledOnClose == null) {
            return openedMessage;
        }

        var closedMessage = _this.IsEvent() ? messages.privateLinkClosedStateBySchedulingForEvent : messages.privateLinkClosedStateByScheduling;
        return Webropol.Shared.Common.stringFormat(closedMessage, firstPublicScheduledOnClose.NextRunDate());

        function getFirstPrivateScheduledTaskOnClose() {
            return ko.utils.arrayFirst(_this.PrivateScheduling.ActiveReminders(), function (reminder) {
                return (reminder.RegionType() == Webropol.Constants.SurveyPublish.ScheduledTaskType.PauseSurveyPrivate);
            });
        }
    };

    this.onFirstVisitCollectAnswersPrivateEmailClick = function () {
        _this.onBeforeFirstVisitCollectAnswersClick();

        $("#privateLinkEmailTrigger").trigger("click");
    };

    this.onFirstVisitCollectAnswersPrivateSmsClick = function () {
        _this.onBeforeFirstVisitCollectAnswersClick();

        $("#privateLinkSmsTrigger").trigger("click");
    };

    this.onFirstVisitCollectAnswersHierarchyTabClick = function () {
        window.location = '/Surveys/SurveyPublish/ChooseMethod/' + _this.Id();
    }

    this.onFirstVisitCollectAnswersHierarchyClick = function () {
        this.onFirstVisitCollectAnswersHierarchyTabClick();
    }

    this.onFirstVisitCollectAnswersMobileConnectorClick = function () {
        window.location = '/Surveys/SurveyPublish/Index/' + _this.Id();
    }

    this.onFirstVisitCollectAnswersPublicClick = function () {
        _this.onBeforeFirstVisitCollectAnswersClick();

        $("#publicLinkTrigger").trigger("click");
    };

    this.onBeforeFirstVisitCollectAnswersClick = function () {
        _this.hasFirstClick(true);
    };

    this.toggleExpandedEmailState = function() {
        _this.isExpandedEmails(!_this.isExpandedEmails());
    };

    this.toggleExpandedSmsState = function() {
        _this.isExpandedSms(!_this.isExpandedSms());
    };

    this.getPrivateEmailResponseCount = function() {
        if (!_this.IsPrivateOrBoth())
            return '-';

        return _this.ShortStatistics.PrivateEmailResponseCount();
    };

    this.getPrivateSmsResponseCount = function() {
        if (!_this.IsPrivateOrBoth())
            return '-';

        return _this.ShortStatistics.PrivateSmsResponseCount();
    };

    this.getPrivateResponsesCount = function() {
        if (!_this.IsPrivateOrBoth())
            return '-';

        return _this.ShortStatistics.PrivateResponsesCount();
    };

    this.getPublishResponsesCount = function () {
        if (!_this.IsPublicOrBoth())
            return '-';

        return _this.ShortStatistics.PublicResponsesCount();
    };

    this.getTotalResponsesCount = function() {
        if (!_this.IsPublished())
            return "-";

        var result = _this.ShortStatistics.PublicResponsesCount() + _this.ShortStatistics.PrivateResponsesCount();
        return result;
    };

    this.getImageGallery = function() {
        return _imageGalleryViewModel;
    };

    this.onAutolFilterSettingsTabClick = function () {
        if (this.AutoReportFilterSettings && !this.AutoReportFilterSettings.hasFirstClick()) {
            this.AutoReportFilterSettings.reloadPersonnelRecipientGrid();
            this.AutoReportFilterSettings.hasFirstClick(true);
        }
    };

    this.onLoginPageSettingsTabClick = function () {
        if (this.LoginPageSettings &&
            this.LoginPageSettings.MultiplePasswordSettings &&
            !this.LoginPageSettings.MultiplePasswordSettings.hasFirstClick()) {
            this.LoginPageSettings.MultiplePasswordSettings.reloadPersonnelRecipientGrid();
            this.LoginPageSettings.MultiplePasswordSettings.hasFirstClick(true);
        }
    };

    this.setExpandedStateForSendingBlock = function (recipientType, isExpanded) {
        switch (recipientType) {
            case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Email:
                _this.isExpandedEmails(isExpanded);
                break;
            case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Sms:
                _this.isExpandedSms(isExpanded);
                break;
        }
    };

    this.showImageGallery = function (callback) {
        return _this.getImageGallery().showImageGallery(Webropol.Constants.ImageGalleryMode.InsertIntoEmail, callback);
    };
};
;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};
Webropol.SurveyPublish.CollectAnswers = Webropol.SurveyPublish.CollectAnswers || {};

Webropol.SurveyPublish.CollectAnswers.FirstPublish = function (urls, messages, publishInstance) {
    var _this = this;
    var _urls = urls.firstPublish;
    var _messages = messages;

    this.init = function (initialData) {
        ko.mapping.fromJS(initialData, {}, _this);
        return _this;
    };

    this.showModal = function () {
        _this.checkSurveyCanBePublished()
            .done(function (canBePublished) {
                if (canBePublished) {
                    _this.loadModal();
                }
            });
    };

    this.checkSurveyCanBePublished = function () {
        var deferred = $.Deferred();

        Webropol.Shared.Common.callAsync(
            {},
            _urls.checkSurveyCanBePublished,
            function (data) {
                if (data.ErrorCode === Webropol.Constants.Common.ErrorCode.Ok) {
                    deferred.resolve(true);
                } else {
                    ko.shared.notifyError(_this, data.Message);
                    deferred.resolve(false);
                }
            },
            function () {
                deferred.resolve(false);
            }
        );

        return deferred.promise();
    };

    this.loadModal = function () {
        ko.shared.showPopupFromTemplate("first-publish-popup-template", { model: _this, publish: publishInstance }, null, _urls.getFirstPublishPopupTemplate);
    };

    this.switchSurveyEditingPossibilitiesText = function (data, event) {
        var $link = $(event.target);
        $link.text($link.hasClass('collapsed')
            ? _messages.firstPublishHideEditingPossibilities
            : _this.viewEditingPossibilities());
    };
};
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};
Webropol.SurveyPublish.CollectAnswers = Webropol.SurveyPublish.CollectAnswers || {};

Webropol.SurveyPublish.CollectAnswers.CloseSurvey = function(urls, messages, publishInstance) {
    var _this = this;
    var _urls = urls;
    var _messages = messages;

    this.init = function(initialData) {
        ko.mapping.fromJS(initialData, {}, _this);
        return _this;
    };

    this.updateMapping = function(data) {
        ko.mapping.fromJS(data, {}, _this);
    };
    
    this.showCloseLinkModal = function (closeLinkClone) {
        if (closeLinkClone == undefined) {
            _this.getSurveyCloseMessageAndShowPopup(closeLinkClone, _this.showCloseLinkModal);
            return;
        }
        else {
            _this.updateMapping(closeLinkClone);
        }
        
        _this.submitAction = closeSurvey;
        _this.selectedPopupBehaviour = Webropol.Constants.SurveyPublish.CloseSurveyPopupBehavior.CloseSurvey;
        _this.showModal();

        function closeSurvey() {
            Webropol.Shared.Common.callAsync(
                ko.mapping.toJSON(_this),
                _urls.closeSurveyUrl,
                function (result) {
                    closeLinkClone = {
                        SelectedPublishType: _this.SelectedPublishType(),
                        SurveyId: _this.SurveyId(),
                        Message: _this.Message()
                    };
                    _this.onSubmit();
                    ko.shared.notifySuccess(publishInstance, result.Message);
                });
        }
    };

    this.showEditCloseMessageModal = function (closeLinkClone) {
        if (closeLinkClone == undefined) {
            _this.getSurveyCloseMessageAndShowPopup(closeLinkClone, _this.showEditCloseMessageModal);
            return;
        }
        else {
            _this.updateMapping(closeLinkClone);
        }

        _this.submitAction = editCloseSurveyMessage;
        _this.selectedPopupBehaviour = Webropol.Constants.SurveyPublish.CloseSurveyPopupBehavior.EditMessage;
        _this.showModal();

        function editCloseSurveyMessage() {
            Webropol.Shared.Common.callAsync(
                ko.mapping.toJSON(_this),
                _urls.saveCloseSurveyMessageUrl,
                function (result) {
                    closeLinkClone = {
                            SelectedPublishType: _this.SelectedPublishType(),
                            SurveyId: _this.SurveyId(),
                            Message: _this.Message()
                    };
                    ko.shared.notifySuccess(publishInstance, result.Message);
                });
        }
    };

    this.getSurveyCloseMessageAndShowPopup = function (closeLinkClone, showModalAction) {
        var viewModel = {
            selectedPublishType: _this.SelectedPublishType()
        };

        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON(viewModel),
            _urls.getCloseSurveyViewModelUrl,
            function (result) {
                closeLinkClone = result.ExtraData.ViewModel;
                _this.updateMapping(result.ExtraData.ViewModel);
                showModalAction(closeLinkClone, showModalAction);
            });
    };

    this.showModal = function () {
        ko.shared.showPopupFromTemplate("close-survey-popup-template", _this, null, _urls.getCloseSurveyPopupTemplate);
    };

    this.isEditMessagePopup = function() {
        return _this.selectedPopupBehaviour == Webropol.Constants.SurveyPublish.CloseSurveyPopupBehavior.EditMessage;
    };

    this.isCloseSurveyPopup = function() {
        return _this.selectedPopupBehaviour == Webropol.Constants.SurveyPublish.CloseSurveyPopupBehavior.CloseSurvey;
    };
};;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.ManageRecipients = function (urls, messages, publish, recipientType) {
    var _this = this;
    var _urls = urls;
    var _messages = messages;
    var _recipientType = recipientType;

    var _grid = null;
    var EmailValidationStatusPropertyName = "EmailValidationStatus";
    var isInterfaceLocked = true;

    this.ReloadedGrid = {
        Recipients: 0,
        RecipientGroups: 1,
        Demographic: 2,
        All: 3,
        EvaluationTargets: 4
    };

    this.RecipientTab = {
        Recipients: 0,
        RecipientGroups: 1,
        Demographic: 2,
        Hierarchy: 3,
        CopyPasteOutlook: 4,
        ImportExcelFile: 5,
        RespondentLibrary: 6
    };

    this.AddRecipientsFromHierarchy = null;
    this.DemDataError = ko.observable(null);
    this.VariableFieldAvailableValuesMap = {};

    this.getPublish = function () {
        return publish;
    };

    this.IsEmailRecipients = function() {
        return _recipientType === Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Email;
    };

    this.RedirectToSmsMenu = function () {
        if (!_this.IsEmailRecipients()) {
            const searchParams = new URLSearchParams(location.search);
            const selectedMenuItem = searchParams.get('selectedMenuItem');
            if (selectedMenuItem != 'smsSurvey') {
                searchParams.append('selectedMenuItem', 'smsSurvey');
                var newurl = window.location.protocol + "//" + window.location.host + window.location.pathname + `?${searchParams.toString()}`;
                window.history.pushState({ path: newurl }, '', newurl);
            }
            location.reload();
        }
        else {
            var newurl = window.location.protocol + "//" + window.location.host + window.location.pathname;
            window.history.pushState({ path: newurl }, '', newurl);
        }
    }

    this.init = function (initialData) {
        var mapping;

        switch (_recipientType) {
            case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Email:
                mapping = {
                    'DemDataGrid': {
                        create: function (options) {
                            var s = createDemDataGrid(options.data);
                            return s;
                        }
                    },
                    'RecipientGrid': {
                        create: function (options) {
                            var s = createRecipientGrid(options.data);
                            return s;
                        }
                    },
                    'ManageRecipientGroups': {
                        create: function (options) {
                            var manageRecipientGroups = new Webropol.SurveyPublish.ManageRecipientGroups(urls, messages, publish);
                            manageRecipientGroups.init(options.data);
                            return manageRecipientGroups;
                        }
                    },
                    'CircularGrid': {
                        create: function (options) {
                            var grid = createCircularGrid(options.data);
                            return grid;
                        }
                    },
                    'HierarchyGrid': {
                        create: function (options) {
                            var data = options.data;
                            if (!data) {
                                return null;
                            }

                            var hierarchyManagement = new Webropol.BossTools.Hierarchy.HierarchyManagement(_urls, _messages);
                            hierarchyManagement.init(options.data);
                            return hierarchyManagement;
                        }
                    }
                };
                break;
            case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Sms:
                mapping = {
                    'RecipientGrid': {
                        create: function (options) {
                            var s = createRecipientGrid(options.data);
                            return s;
                        }
                    },
                    'HierarchyGrid': {
                        create: function (options) {
                            var data = options.data;
                            if (!data) {
                                return null;
                            }

                            var hierarchyManagement = new Webropol.BossTools.Hierarchy.HierarchyManagement(_urls, _messages);
                            hierarchyManagement.init(options.data);
                            return hierarchyManagement;
                        }
                    }
                };
                break;
            default:
                throw 'not implemented';
        };

        ko.mapping.fromJS(initialData, mapping, _this);

        _this.initObservable();
        _this.initComputed();
        _this.initActiveTab();
        _this.setExpandedStateForSendingBlock();

        if (ko.unwrap(_this.HasUploadingDemData)) {
            _this.startDemDataUploadChecking();
        }
    };

    this.initObservable = function () {
        _this.selectedQuestionsForDemDataTemplate = ko.observableArray();

        _this.isExpandedRecipients = ko.observable(true);
        
        var lastActiveTab = localStorage.getItem('lastActiveTab');

        if (lastActiveTab == 'SendSms') {
            _this.isAllRecipients = ko.observable(false);
            _this.isSendSms = ko.observable(true);
            _this.isSmsSchedule = ko.observable(false);
            _this.allRecipientsButtonClass = ko.observable('tab tab-regular');
            _this.sendSmsButtonClass = ko.observable('tab tab-regular selected');
            _this.smsScheduleButtonClass = ko.observable('tab tab-regular');
        }        
        else {
            _this.isAllRecipients = ko.observable(true);
            _this.isSendSms = ko.observable(false);
            _this.isSmsSchedule = ko.observable(false);
            _this.allRecipientsButtonClass = ko.observable('tab tab-regular selected');
            _this.sendSmsButtonClass = ko.observable('tab tab-regular');
            _this.smsScheduleButtonClass = ko.observable('tab tab-regular');
        }

        _this.RecipientsFileChosenValue = ko.observable('');
        _this.DemDataFileChosenValue = ko.observable('');
        _this.AddOnlyNewEmailsFromOutlook = ko.observable(true);
        _this.OutlookRecipientsString = ko.observable('');
        _this.useRecipientGroup = ko.observable(false);
        _this.recipientGroupName = ko.observable('');
        _this.activeTab = ko.observable(_this.RecipientTab.RecipientGroups);
        _this.AddOnlyNewEmailsForBothDemData = ko.observable(true);

        _this.AreRecipentsUploading = ko.observable(false);
        _this.UploadOnlyNewEmails = ko.observable(_this.AddOnlyNewEmails());
        _this.CanImportRecipientDemData = ko.observable(false);
        _this.CanImportDemData = ko.observable(false);
        _this.CanUploadRecipients = ko.observable(false);
        _this.AddRecipientsErrorMessage = ko.observable('');
        _this.CanDeleteRecipients = ko.observable(false);
        _this.CanClearInvalidEmailsFilter = ko.observable(false);

        _this.BackgroundVariableItems = ko.observableArray();
    };

    this.initComputed = function () {
        _this.CanPrintDemDataRecipients = ko.pauseableComputed(function () {
            if (!_this.IsEmailRecipients()) {
                return false;
            }

            var firstChecked = ko.utils.arrayFirst(_this.DemDataGrid.Items(), function (item) {
                return item.IsSelected();
            });
            return firstChecked != null;
        });

        _this.CanDeleteRecipientsFromHierarchy = ko.pureComputed(function () {
            return _this.HasHierarchy() && _this.HierarchyGrid.HasSelectedPerson();
        });

        _this.CanDeleteCircularRecipients = ko.pureComputed(function () {
            if (!_this.IsEmailRecipients()) {
                return false;
            }

            var firstChecked = ko.utils.arrayFirst(_this.CircularGrid.Items(), function (item) {
                return item.IsSelected() == true;
            });
            return firstChecked != null;
        }, _this);

        _this.CanAddRecipients = ko.pureComputed(function () {
            return _this.RecipientsString() != null && _this.RecipientsString().length > 0;
        });

        _this.CanAddRecipientsFromOutlook = ko.computed(function () {
            return _this.IsEmailRecipients() && _this.OutlookRecipientsString() != null && _this.OutlookRecipientsString().length > 0;
        });

        _this.CanShowInvalidEmailsCount = ko.computed(function () {
            return _this.RecipientsInfo.InvalidEmailsCount() > 0;
        });

        _this.CanImportDemDataWithGroup = ko.pureComputed({
            read: function () {
                return (
                    _this.CanImportDemData()
                    &&
                    (
                        !_this.useRecipientGroup()
                        ||
                        (
                            _this.useRecipientGroup()
                            &&
                            _this.recipientGroupName() != null
                            &&
                            _this.recipientGroupName().length > 0
                        )
                    )
                );
            },
            deferEvaluation: true
        });

        _this.recipientsPrivateTitle = ko.pureComputed(function () {
            switch (_recipientType) {
                case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Email:
                    var strTemplate = (_this.hasRecipientGroups()
                        ? _messages.addRecipientGroups
                        : _messages.addRecipients) + "({0})";

                    return Webropol.Shared.Common.stringFormat(strTemplate,
                        _this.hasRecipientGroups()
                            ? _this.ManageRecipientGroups.RecipientGroupGridListClone().length
                            : _this.RecipientsInfo.RecipientsCount());
                case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Sms:
                    strTemplate = messages.addRecipients + "({0})";
                    return Webropol.Shared.Common.stringFormat(strTemplate, _this.RecipientsInfo.RecipientsCount());
            }
        });

        _this.tabNameRecipientGroups = ko.pureComputed(function () {
            if (!_this.IsEmailRecipients()) {
                return;
            }

            return Webropol.Shared.Common.stringFormat(_messages.recipientGroupTabTemplate,
                _this.ManageRecipientGroups.RecipientGroupGridList().length);
        });

        _this.tabNameAllRecipients = ko.pureComputed(function () {
            return Webropol.Shared.Common.stringFormat(_messages.recipientAllTabTemplate, _this.RecipientsInfo.RecipientsCount());
        });

        _this.hasRecipientGroups = ko.pureComputed(function () {
            if (_this.IsEmailRecipients()) {
                return (_this.ManageRecipientGroups.RecipientGroupGridListClone().length > 0);
            }

            return false;
        });

        _this.addRecipientsButtonText = ko.pureComputed(function () {
            return _this.IsEmailRecipients() && _this.hasRecipientGroups()
                ? _messages.addRecipientGroups
                : _messages.addRecipients;
        });

        _this.currentTab = ko.computed({
            read: _this.activeTab,
            write: function (value) {
                if (_this.IsEmailRecipients()) {
                    if (value === _this.RecipientTab.Demographic && !_this.isDemographicTabAvailable()) {
                        return;
                    }
                }
                _this.activeTab(value);
            },
            deferEvaluation: true
        });

        _this.CanImportRecipientsFromRespondentLibrary = ko.pureComputed(function () {
            var anyBackgroundVariableItemsNotSelected = ko.utils.arrayFirst(_this.BackgroundVariableItems(), function (item) {
                return item.selectedVariableOptions().length === 0;
            });

            return !anyBackgroundVariableItemsNotSelected;
        });

        _this.CanAddMoreBackgroundVariables = ko.pureComputed(function () {
            if (_this.BackgroundVariableItems().length <= 1) {
                return true;
            }

            if (_this.BackgroundVariableItems().length >= _this.AvailableRespondentLibraryVariables().length) {
                return false;
            }

            return _this.CanImportRecipientsFromRespondentLibrary();
        });

    };

    this.initActiveTab = function () {
        switch (_recipientType) {
            case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Email:
                var recipietnGroupsCount = _this.ManageRecipientGroups.RecipientGroupGridList().length;

                if (recipietnGroupsCount == 0 && _this.activeTab() == _this.RecipientTab.RecipientGroups) {
                    _this.activeTab(_this.RecipientTab.Recipients);
                }
                break;
            case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Sms:
                if (_this.activeTab() == _this.RecipientTab.RecipientGroups) {
                    _this.activeTab(_this.RecipientTab.Recipients);
                }
                else {
                    _this.activeTab(_this.RecipientTab.ImportExcelFile);
                }
                break;
            default:
        }
    };

    this.toggleExpandedRecipientState = function () {
        _this.isExpandedRecipients(!_this.isExpandedRecipients());        
    };

    this.OpenAllRecipients = function () {        
        _this.isAllRecipients(true);
        _this.isSendSms(false);

        _this.allRecipientsButtonClass('tab tab-regular selected');
        _this.sendSmsButtonClass('tab tab-regular');
        _this.smsScheduleButtonClass('tab tab-regular');
        localStorage.setItem('lastActiveTab', 'AllRecipients');
    }

    _this.openSendSms = function () {
        _this.isAllRecipients(false);        
        _this.isSendSms(true);

        _this.allRecipientsButtonClass('tab tab-regular');
        _this.sendSmsButtonClass('tab tab-regular selected');
        _this.smsScheduleButtonClass('tab tab-regular');
        localStorage.setItem('lastActiveTab', 'SendSms');

        const event = new CustomEvent('collect-answer-tab-switch', { detail: 'send-sms'});
        window.dispatchEvent(event)
    };
    _this.openSmsSchedule = function () {
        _this.isAllRecipients(false);
        _this.isSendSms(true);

        _this.allRecipientsButtonClass('tab tab-regular');
        _this.sendSmsButtonClass('tab tab-regular');
        _this.smsScheduleButtonClass('tab tab-regular selected');
        localStorage.setItem('lastActiveTab', 'ScheduleSMS');

        const event = new CustomEvent('collect-answer-tab-switch', { detail: 'sms-schedule' });
        window.dispatchEvent(event)
    };

    this.onRecipientsFileChange = function (element, event) {
        var $fileInput = $(event.target);
        _this.RecipientsFileChosenValue($fileInput.val());

        if (Webropol.Shared.Common.validateFileFormat($fileInput, ["xlsx"])) {
            _this.CanUploadRecipients(true);
        } else {
            _this.CanUploadRecipients(false);
        }
    };

    this.onCleanupChosenRecipientsFile = function () {
        var $fileInput = $('#recipientsUploadForm').find('input:file');
        var confirmationMessage = Webropol.Shared.Common.stringFormat(_messages.deleteChosenRecipientsFilePopupMessageTemplate,
            Webropol.Shared.Common.getFileNameFromFilePath($fileInput.val(), true));

        ko.shared.showConfirmDialog(
            confirmationMessage,
            function () {
                _this.cleanupChosenRecipientsFile($fileInput);
            },
            function () {
            },
            _messages.deleteChosenRecipientsFilePopupHeader
        );
    };

    this.cleanupChosenRecipientsFile = function ($fileInput) {
        $fileInput = $fileInput || $('#recipientsUploadForm').find('input:file');
        $fileInput.replaceWith($fileInput.val('').clone(true)); //clearing value from file input

        _this.RecipientsFileChosenValue('');
        _this.CanUploadRecipients(false);
    };

    this.cleanupChosenDemDataFile = function ($fileInput) {
        $fileInput = $fileInput || $('.dem-data-import').find('input:file');
        $fileInput.replaceWith($fileInput.val('').clone(true)); //clearing value from file input

        _this.DemDataFileChosenValue('');
        _this.CanImportDemData(false);
    };

    this.onUploadRecipientsFromExcel = function (item, evt) {

        var $fileInput = $('#recipientsUploadForm').find('input:file');
        var fileName = Webropol.Shared.Common.getFileNameFromFilePath($fileInput.val(), true);

        if (fileName == null || fileName.length < 1) return;

        var data = {
            surveyId: _this.SurveyId(),
            addOnlyNewEmails: _this.UploadOnlyNewEmails(),
            IsEvent: _this.IsEvent(),
            recipientType: _recipientType
        };

        publish.EmailMessage.IsEmailRecipientsCountUploaded(false);
        lockRecipientsGrid();

        // this uses jquery.form.js plugin
        var $form = $fileInput.parents('form').first();

        Webropol.Shared.Common.callAjaxSubmit($form, {
            url: _urls.uploadRecipientsFromExcelUrl,
            data: data,
            success: function (result) {
                if (Webropol.Common.isJson(result)) {
                    Webropol.Common.showSuccessMessage(Webropol.Shared.Common.parseJSON(result));
                    _this.reloadRecipientGrids(_this.ReloadedGrid.All, _this.reloadCallback);
                }
                _this.cleanupChosenRecipientsFile($fileInput);
                _this.RedirectToSmsMenu();
            }
        });
    };

    this.onUploadRecipientDemDataImportFileChange = function (element, event) {
        var $fileInput = $(event.target);
        _this.CanImportRecipientDemData(Webropol.Shared.Common.validateFileFormat($fileInput, ["xlsx"]));
    };

    this.onCleanupChosenDemDataFile = function (element, event) {
        var $fileInput = $('.dem-data-import').find('input:file');
        var confirmationMessage = Webropol.Shared.Common.stringFormat(_messages.deleteChosenRecipientsFilePopupMessageTemplate,
            Webropol.Shared.Common.getFileNameFromFilePath($fileInput.val(), true));

        ko.shared.showConfirmDialog(
            confirmationMessage,
            function () {
                _this.cleanupChosenDemDataFile($fileInput);
            },
            function () {
            },
            _messages.deleteChosenRecipientsFilePopupHeader
        );
    };

    this.onUploadDemDataImportFileChange = function (element, event) {
        var $fileInput = $(event.target);
        _this.DemDataFileChosenValue($fileInput.val());
        _this.CanImportDemData(Webropol.Shared.Common.validateFileFormat($fileInput, ["xlsx"]));
    };

    this.checkDemDataUploading = function(interval) {
        Webropol.Shared.Common.callAsync(
            {},
            _urls.checkDemDataIsUploadedUrl,
            function (isUploaded) {
                if (isUploaded) {
                    _this.reloadRecipientGrids(_this.ReloadedGrid.All, _this.reloadCallback);
                    clearInterval(interval);
                    ko.shared.notifySuccess(_this, _messages.demDataSuccessfullyUploaded);
                    _this.HasUploadingDemData(false);
                }
            });
    };

    this.startDemDataUploadChecking = function() {
        var interval = setInterval(function () {
            _this.checkDemDataUploading(interval);
        },
            10000);
    };

    var afterImportDemData = function (data) {
        _this.reloadRecipientGrids(_this.ReloadedGrid.All, _this.reloadCallback);

        if (data.IsFailed || data.HasDetailedErrors) {
            var demDataError = new Webropol.SurveyPublish.ManageRecipients.DemDataError();
            demDataError.init(data);

            _this.DemDataError(demDataError);
        } else {
            Webropol.Shared.Common.closeAllPopups();
            ko.shared.notifySuccess(_this, data.Message);

            if (data.IsScheduled) {
                _this.HasUploadingDemData(true);
                _this.startDemDataUploadChecking();
            }
        }
    };

    this.onImportDemData = function () {
        _this.DemDataError(null);
        Webropol.Shared.SpinLoader.startSpin();

        var fileInput = $('.dem-data-import').find('input:file');
        var fileName = fileInput.val().split('\\').pop();
        if (fileName == null || fileName.length < 1) {
            return;
        }

        publish.EmailMessage.IsEmailRecipientsCountUploaded(false);
        lockRecipientsGrid();

        var data = {
            AllowDuplicates: !_this.AddOnlyNewEmailsForBothDemData(),
            RecipientType: _recipientType
        };

        var $form = $(fileInput).parents('form').first();
        Webropol.Shared.Common.callAjaxSubmit($form, {
            url: _urls.importDemDataUrl,
            data: data,
            success: function (result) {
                Webropol.Shared.SpinLoader.stopSpin();
                // Handle IE8 case
                if (Webropol.Common.isJson(result)) {
                    afterImportDemData(Webropol.Shared.Common.parseJSON(result));
                }
                fileInput.replaceWith(fileInput.val('').clone(true)); //clearing value from file input
                _this.CanImportDemData(false);
            }
        });
    };

    this.onImportRecipientDemData = function () {
        var fileInput = $('.recipient-dem-data-import').find('input:file');
        var fileName = fileInput.val().split('\\').pop();
        if (fileName == null || fileName.length < 1) return;

        publish.EmailMessage.IsEmailRecipientsCountUploaded(false);
        lockRecipientsGrid();

        var $form = $(fileInput).parents('form').first();

        Webropol.Shared.Common.callAjaxSubmit($form, {
            url: _urls.importRecipientsDemDataUrl,
            success: function (result) {
                // Handle IE8 case
                if (Webropol.Common.isJson(result)) {
                    Webropol.Common.showSuccessMessage(Webropol.Shared.Common.parseJSON(result));
                    _this.reloadRecipientGrids(_this.ReloadedGrid.All, function () {
                        _this.reloadCallback();

                        var newGrid = Webropol.Shared.Common.parseJSON(result).ExtraData;
                        updateDemDataGrid(newGrid);
                        _this.RedirectToSmsMenu();
                    });
                }
                fileInput.replaceWith(fileInput.val('').clone(true)); //clearing value from file input
                _this.CanImportRecipientDemData(false);
            }
        });
    };

    this.deleteDemDataColumn = function (columnId) {
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON({ columnId: columnId }),
            _urls.deleteDemDataColumnUrl,
            function (result) {
                Webropol.Common.showSuccessMessage(result);
                _this.reloadRecipientGrids(_this.ReloadedGrid.Recipients);
                var newGrid = result.ExtraData;
                updateDemDataGrid(newGrid);
            }
        );
    };

    var processRecipientImport = function (data) {
        if (data.ErrorCode != Webropol.Constants.Common.ErrorCode.Error) {
            _this.RecipientsString(null);
        }

        _this.reloadRecipientGrids(_this.ReloadedGrid.All, _this.reloadCallback);

        Webropol.Common.showSuccessMessage(data);
        _this.RedirectToSmsMenu();
    };

    var processAddRecipientsFromString = function (data) {
        Webropol.Shared.SpinLoader.stopSpin();

        if (data.ErrorCode === Webropol.Constants.Common.ErrorCode.Ok) {
            _this.RecipientsString(null);

            _this.reloadRecipientGrids(_this.ReloadedGrid.All, _this.reloadCallback);

            Webropol.Shared.Common.closeAllPopups();

            Webropol.Common.showSuccessMessage(data);
            _this.RedirectToSmsMenu();
        } else {
            releaseRecipientsGrid();

            _this.AddRecipientsErrorMessage(data.Message);
        }
    };

    this.onAddRecipients = function () {
        addRecipientFromString(_urls.importRecipientsFromStringUrl)
    };

    this.onAddSmsRecipients = function () {
        addRecipientFromString(_urls.importSmsRecipientsFromStringUrl)
    };

    var addRecipientFromString = function (url) {
        Webropol.Shared.SpinLoader.startSpin();

        _this.AddRecipientsErrorMessage('');

        var data = {
            recipientsString: _this.RecipientsString(),
            allowDuplicates: !_this.AddOnlyNewEmails()
        };

        publish.EmailMessage.IsEmailRecipientsCountUploaded(false);
        lockRecipientsGrid();

        publish.EmailMessage.IsEmailRecipientsCountUploaded(false);

        Webropol.Shared.Common.callAsync(data, url, processAddRecipientsFromString        
            , function () { Webropol.Shared.SpinLoader.stopSpin(); releaseRecipientsGrid(); }, null, true);
    }

    this.onAddRecipientsFromOutlook = function () {
        publish.EmailMessage.IsEmailRecipientsCountUploaded(false);
        lockRecipientsGrid();

        publish.EmailMessage.IsEmailRecipientsCountUploaded(false);

        var model = {
            RecipientsString: _this.OutlookRecipientsString(),
            AddOnlyNewEmails: _this.AddOnlyNewEmailsFromOutlook(),
            SurveyId: _this.SurveyId()
        };

        Webropol.Shared.Common.callAsync(
            model,
            _urls.importRecipientsFromOutlookUrl,
            function (data) {
                processRecipientImport(data);
            }
        );
    };

    this.addRecipientsFromHierarchy = function (selectedPersons) {
        publish.EmailMessage.IsEmailRecipientsCountUploaded(false);
        lockRecipientsGrid();

        publish.EmailMessage.IsEmailRecipientsCountUploaded(false);

        var model = {
            selectedPersons: selectedPersons
        };

        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON(model),
            _urls.importRecipientsFromHierarchyUrl,
            function (data) {
                if (!_this.HasHierarchy()) {
                    _this.HasHierarchy(true);
                }
                publish.EmailMessage.reloadSendToList();

                processRecipientImport(data);
            }
        );
    };

    this.addSMSRecipientsFromHierarchy = function (selectedPersons) {
        lockRecipientsGrid();

        var model = {
            selectedPersons: selectedPersons
        };

        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON(model),
            _urls.importRecipientsFromHierarchyUrl,
            function (data) {
                if (!_this.HasHierarchy()) {
                    _this.HasHierarchy(true);
                }
                processRecipientImport(data);
            }
        );
    };

    var onBeforeDeleteRecipientsInternal = function (onDelete) {
        ko.shared.showConfirmDialog(
            _messages.deleteRecipientsBody,
            function () {
                onDelete();
            },
            function () { },
            _messages.deleteRecipientsHeader,
            _messages.deleteRecipientsButton
        );
    };

    this.onBeforeDeleteRecipients = function () {
        onBeforeDeleteRecipientsInternal(function () {
            _this.deleteRecipients(_this.getSelectedRecipientIds());
        });
    };

    this.onPrintDemDataRecipients = function () {

        var selectedRecipientIds = _this.getSelectedRecipientIds(true);

        var $form = $('#recipients-pdf-export-form');
        $form.html('');

        selectedRecipientIds.forEach(function (id) {
            $form.append($("<input />").attr('type', 'hidden').attr('name', 'selectedRecipientsIds').val(id));
        });

        $form.trigger("submit");
    };

    this.getSelectedRecipientIds = function (isDemdata) {
        var selectedRecipientIds = [];
        var grid = isDemdata ? _this.DemDataGrid : _this.RecipientGrid;

        ko.utils.arrayForEach(grid.Items(), function (item) {
            if (item.IsSelected()) {
                selectedRecipientIds.push(item.RowId());
            }
        });

        return selectedRecipientIds;
    };

    this.onBeforeDeleteRecipientsFromHierarchy = function () {
        onBeforeDeleteRecipientsInternal(function () {
            var recipientIdsToDelete = _this.HierarchyGrid.getSelectedIds();

            _this.deleteRecipients(recipientIdsToDelete);
        });
    };

    this.onEditRecipientEmail = function (data, event) {
        var viewModel = ko.mapping.toJSON(data);
        Webropol.Shared.Common.callAsync(
            viewModel,
            _urls.onRecipientEmailUpdateUrl,
            function (result) {
                ko.mapping.fromJS(result.ExtraData, {}, data);
                Webropol.Common.showSuccessMessage(result);
            });
    };

    this.deleteRecipients = function (recipientIdsToDelete) {
        publish.EmailMessage.IsEmailRecipientsCountUploaded(false);
        lockRecipientsGrid();

        var viewModel = ko.mapping.toJSON(recipientIdsToDelete);
        Webropol.Shared.Common.callAsync(
            viewModel,
            _urls.removeRecipientsUrl,
            function (result) {
                if (result.ErrorCode == Webropol.Constants.Common.ErrorCode.Ok) {
                    _this.reloadRecipientGrids(_this.ReloadedGrid.All, function () {
                        _this.reloadCallback();

                        deleteFromSelectedRecipients(recipientIdsToDelete);

                        if (_this.RecipientsInfo.InvalidEmailsCount() == 0) {
                            _this.clearGridsFilters();
                        }
                    });

                    Webropol.Common.showSuccessMessage(result);
                    _this.RedirectToSmsMenu();
                }
            });
    };

    this.getRecipientDemDataTemplateUrl = function () {
        return urls.getRecipientDemDataTemplate;
    };

    this.showAddRecipientsPopup = function () {
        setInitialState();

        var templateName = _this.IsEmailRecipients()
            ? "add-email-recipients-popup-template"
            : "add-sms-recipients-popup-template";

        var data = {
            surveyId: _this.SurveyId(),
            recipientType: _recipientType
        };

        _this.addRecipientsPopup = ko.shared.showPopupFromTemplateWithOptions({
            TemplateName: templateName,
            Model: _this,
            ShownCallback: function (popup) {
                $(popup).on('hidden.bs.modal',
                    function () {
                        _this.cleanupChosenRecipientsFile();

                        if (_this.IsEmailRecipients()) {
                            _this.cleanupChosenDemDataFile();
                        }
                    });

                if (_this.IsEvent()) {
                    $('#importForSurveyAndReporting').collapse('show');
                }
                _this.addNewBackgroundVariableItem();
            },
            GetTemplateUrl: _urls.getAddRecipientsPopupTemplate,
            TemplateModel: ko.mapping.toJSON(data)
        });

        switch (_recipientType) {
            case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Email:
                _this.ManageRecipientGroups.reset();
                break;
            case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Sms:
                _this.getPublish().EmailRecipients.ManageRecipientGroups.reset();
                break;
        }
    };

    this.showInvalidEmails = function () {
        _this.RecipientGrid.Filtering.SelectedFilter.SelectedOption(Webropol.Constants.SurveyPublish.EmailValidationStatus.Invalid);
        _this.RecipientGrid.Filtering.SelectedFilter.SelectedProperty(EmailValidationStatusPropertyName);

        if (_this.IsEmailRecipients() && _this.IsDemDataGridAvailable()) {
            _this.DemDataGrid.Filtering.SelectedFilter.SelectedOption(Webropol.Constants.SurveyPublish.EmailValidationStatus.Invalid);
            _this.DemDataGrid.Filtering.SelectedFilter.SelectedProperty(EmailValidationStatusPropertyName);
        }

        _this.reloadRecipientGrids(_this.ReloadedGrid.All);
    };

    this.clearGridsFilters = function () {
        _this.RecipientGrid.onCancelFilterClick();

        if (_this.IsEmailRecipients() && _this.IsDemDataGridAvailable()) {
            _this.DemDataGrid.onCancelFilterClick();
        }
    };

    this.refreshRecipientsGrid = function () {
        _this.reloadRecipientGrids(_this.ReloadedGrid.All);
    };

    this.refreshRecipientsGridExceptGroups = function () {
        $.each(_this.ReloadedGrid, function (index, value) {
            if (value != _this.ReloadedGrid.RecipientGroups &&
                value != _this.ReloadedGrid.All) {
                _this.reloadRecipientGrids(value, _this.reloadCallback());
            }
        });
    };

    var createDemDataGrid = function (initialData) {
        var gridOptions = {
            editColumnTitle: {
                canColumnTitleEdit: function () { return true; },
                beforeColumnTitleEdit: function (column, onSaveColumnTitleChanges) { onSaveColumnTitleChanges(); },
                saveColumnTitleChanges: function (columnTilteViewModel, afterSaveColumnChanges) {
                    Webropol.Shared.Common.callAsync(
                        ko.mapping.toJSON(columnTilteViewModel),
                        _urls.saveDemDataColumnTitle,
                        function (data) {
                            if (data.ErrorCode == 0) {
                                ko.shared.notifySuccess(columnTilteViewModel, data.Message);
                                afterSaveColumnChanges();
                            }
                        }
                    );
                },
                validateEditedColumn: function (column) {
                    if (column.ColumnName() == null || column.ColumnName().length == 0) {
                        return false;
                    }

                    var nameAlreadyExist = ko.utils.arrayFirst(column.getGrid().Columns(), function (item) {
                        return item != column && item.ColumnName().trim() == column.ColumnName().trim();
                    });

                    return nameAlreadyExist == null;
                }
            },

            deleteColumn: {
                onColumnDelete: function (columnTitleViewModel) {
                    var options = {
                        message: _messages.deleteDemDataQuestionConfirmation,
                        onOk: function () {
                            _this.deleteDemDataColumn(columnTitleViewModel.columnId);
                        },
                        onCancel: function () { },
                        okButtonText: _messages.deleteDemDataFieldButtonText,
                    };

                    ko.shared.showConfirmation(options);
                },
            }
        };

        var gridUrls = {
            loadDataUrl: _urls.getDemDataGrid
        };

        var grid = new Webropol.BossTools.GenericGrid(gridUrls, _messages, _this, gridOptions);
        grid.exportToExcel = function () {
            var model = new Webropol.SurveyPublish.ManageRecipients.DemDataExport(_urls.exportDemData);

            ko.shared.showPopupFromTemplate("export-demdata-template", model);
        };
        grid.init(initialData);
        return grid;
    };

    var createRecipientGrid = function (initialData) {
        var gridOptions = {
            items: {
                'IsSelected': {
                    click: function (row) {
                        if (!row.IsUpdated()) {
                            row.IsSelected(false);
                        };
                    }
                }
            }
        };

        var gridUrls;

        switch (_recipientType) {
            case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Email:
                gridUrls = {
                    loadDataUrl: _urls.getEmailRecipientGrid,
                    exportToExcelUrl: _urls.exportEmailRecipients
                };
                break;
            case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Sms:
                gridUrls = {
                    loadDataUrl: _urls.getSmsRecipientGrid,
                    exportToExcelUrl: _urls.exportSmsRecipients
                };
                break;
        }

        var grid = new Webropol.BossTools.GenericGrid(gridUrls, _messages, _this, gridOptions);

        grid.showEditRecipientPopup = _this.showEditRecipientPopup;
        grid.canEditRecipientsInGrid = _this.canEditRecipientsInGrid;

        grid.init(initialData);

        ko.computed(function () {
            _this.CanDeleteRecipients(grid.getSelectedRows().length > 0);
        });

        ko.computed(function () {
            var result = grid.Filtering.SelectedFilter.SelectedOption() == Webropol.Constants.SurveyPublish.EmailValidationStatus.Invalid &&
                grid.Filtering.SelectedFilter.SelectedProperty() == EmailValidationStatusPropertyName;

            _this.CanClearInvalidEmailsFilter(result);
        });

        return grid;
    };

    this.reloadRecipientGridWithViewReload = function (onload) {
        var model = ko.toJSON({
            searchData: _this.RecipientGrid.getSearchData(),
        });

        var url = '';
        switch (_recipientType) {
            case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Email:
                url = _urls.getEmailRecipientGridWithView;
                break;
            case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Sms:
                url = _urls.getSmsRecipientGridWithView;
                break;
        }
        Webropol.Shared.Common.callAsync(
            model,
            url,
            function (initialData) {
                var $grid = null;
                switch (_recipientType) {
                    case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Email:
                        $grid = $('#recipient-grid');
                        break;
                    case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Sms:
                        $grid = $('#sms-recipient-grid');
                        break;
                }

                if ($grid.length) {
                    $grid.html(initialData.RecipientGridView);
                    _this.RecipientGrid = createRecipientGrid(initialData.Model);

                    var gridElement = $grid[0];
                    ko.cleanNode(gridElement);
                    ko.applyBindings(_this.RecipientGrid, gridElement);
                    onload && onload(initialData.Model);
                }
            });
        return true;
    };

    this.reloadRecipientGrids = function (reloadedGridType, onload, reloadOtherGrid) {
        if (reloadOtherGrid == null) {
            reloadOtherGrid = true;
        }

        //reload respondents' grid
        if (reloadedGridType == _this.ReloadedGrid.Recipients || reloadedGridType == _this.ReloadedGrid.All) {
            Webropol.Shared.Common.callAsync(
                { recipientType: _recipientType },
                _urls.getRecipientsInfo,
                function (data) {
                    if (data.ErrorCode == 0) {
                        _this.redirectToRecipientTab();

                        _this.RecipientsInfo.InvalidEmailsCount(data.ExtraData.InvalidEmailsCount);
                        _this.RecipientsInfo.RecipientsCount(data.ExtraData.RecipientsCount);
                        _this.RecipientsInfo.NotUpdatedCount(data.ExtraData.NotUpdatedCount);

                        _this.reloadRecipientGridWithViewReload(onload);
                    }
                });

            if (_this.HasHierarchy()) {
                Webropol.Shared.Common.callAsync(
                    {},
                    _urls.getHierarchyRecipientsGridUrl,
                    function (data) {
                        _this.HierarchyGrid.update(data);
                    });
            }

            if (reloadOtherGrid) {
                switch (_recipientType) {
                    case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Email:
                        _this.getPublish().SmsRecipients.reloadRecipientGrids(reloadedGridType, onload, false);
                        break;
                    case Webropol.Constants.SurveyPublish.PrivateLinkResponseType.Sms:
                        _this.getPublish().EmailRecipients.reloadRecipientGrids(reloadedGridType, onload, false);
                        break;
                }
            }
        }

        if (!_this.IsEmailRecipients()) {
            return;
        }

        if (reloadedGridType == _this.ReloadedGrid.RecipientGroups || reloadedGridType == _this.ReloadedGrid.All) {
            _this.ManageRecipientGroups.refreshRecipientGroupList();
        }

        if (_this.IsDemDataGridAvailable()) {
            //reload dem data grid
            if (reloadedGridType == _this.ReloadedGrid.Demographic || reloadedGridType == _this.ReloadedGrid.All) {
                _this.DemDataGrid.reload(onload);
            }
        }

        //reload email grid
        if (publish.EmailMessage.RecipientEmailGrid != null) {
            publish.EmailMessage.RecipientEmailGrid.needToRefresh = true;
        }

        if (ko.isObservable(publish.PrivateScheduling.ActiveReminders)) {
            //reload scheduled tasks' grids
            var sendInvitationReminder = ko.utils.arrayFirst(publish.PrivateScheduling.ActiveReminders(), function (region) {
                return region.RegionType() == Webropol.Constants.SurveyPublish.ScheduledTaskType.SendInvitation;
            });

            if (ko.unwrap(sendInvitationReminder)) {
                if (sendInvitationReminder.ReminderMessage.RecipientEmailGrid != null) {
                    sendInvitationReminder.ReminderMessage.RecipientEmailGrid.needToRefresh = true;
                }
            }
        }

        //reload recipient info for circular survey
        if (reloadedGridType == _this.ReloadedGrid.EvaluationTargets) {
            Webropol.Shared.Common.callAsync(
                { recipientType: _recipientType },
                _urls.getRecipientsInfo,
                function (data) {
                    if (data.ErrorCode == 0) {
                        _this.RecipientsInfo.InvalidEmailsCount(data.ExtraData.InvalidEmailsCount);
                        _this.RecipientsInfo.RecipientsCount(data.ExtraData.RecipientsCount);
                        _this.RecipientsInfo.NotUpdatedCount(data.ExtraData.NotUpdatedCount);
                    }
                });
        }
    };

    var deleteFromSelectedRecipients = function (recipientIds) {
        publish.EmailMessage.removeFromSelectedRecipientsOnClient(recipientIds);

        if (ko.isObservable(publish.PrivateScheduling.ActiveReminders)) {
            var sendInvitationReminder = ko.utils.arrayFirst(publish.PrivateScheduling.ActiveReminders(), function (region) {
                return region.RegionType() == Webropol.Constants.SurveyPublish.ScheduledTaskType.SendInvitation;
            });

            if (ko.unwrap(sendInvitationReminder)) {
                sendInvitationReminder.ReminderMessage.SelectedRecipients.removeAll(recipientIds);
            }
        }
    };

    var updateDemDataGrid = function (data) {
        if (data && data.ViewHtml) {
            var demDataTotalItems = Math.max(_this.DemDataGrid.Pager.TotalItemsCount(), data.Recipients.DemDataGrid.Pager.TotalItemsCount);
            _this.RecipientsInfo.RecipientsCount(demDataTotalItems);
            var oldDemDataGrid = $(".dem-data-grid");
            var newDemDataGrid = $(data.ViewHtml).filter('.dem-data-grid');

            // we should pause computed because reference on `DemDataGrid` will be changed
            _this.CanPrintDemDataRecipients.pause();

            ko.cleanNode(oldDemDataGrid[0]);
            oldDemDataGrid.replaceWith(newDemDataGrid);

            _this.DemDataGrid = createDemDataGrid(data.Recipients.DemDataGrid);
            ko.applyBindings(_this, $(".dem-data-grid")[0]);

            _this.CanPrintDemDataRecipients.resume();
        }
    };

    var setInitialState = function () {
        _this.CanImportRecipientDemData(false);
        _this.CanImportDemData(false);
        _this.CanUploadRecipients(false);
        _this.RecipientsString(null);
        _this.AddOnlyNewEmails(true);
        _this.UploadOnlyNewEmails(true);
        _this.selectedQuestionsForDemDataTemplate([]);
        _this.OutlookRecipientsString('');
        _this.AddOnlyNewEmailsFromOutlook(true);
        _this.useRecipientGroup(false);
        _this.recipientGroupName('');
        _this.BackgroundVariableItems([]);

        if (_this.HierarchyGrid) {
            _this.AddRecipientsFromHierarchy = new Webropol.SurveyPublish.AddRecipientsFromHierarchy(_urls, _messages, _this);
        }
    };

    var lockRecipientsGrid = function () {
        isInterfaceLocked = true;
        setTimeout(function () {
            if (isInterfaceLocked) {
                _this.AreRecipentsUploading(true);
            }
        }, 1000);
    };

    var releaseRecipientsGrid = function () {
        _this.AreRecipentsUploading(false);
        isInterfaceLocked = false;
    };

    this.IsEvent = function () {
        return _this.getPublish().IsEvent();
    };

    this.isDemographicTabAvailable = function () {
        return !this.IsEvent();
    };

    this.onAddRecipientsFromHierarchy = function () {
        if (_this.AddRecipientsFromHierarchy.IsLoaded()) {
            return;
        }
        var url = '';
        if (_this.IsEmailRecipients()) {
            url = _urls.getHierarchyImportUrl;
        }
        else {
            url = _urls.getHierarchyImportUrlForSMS;
        }

        Webropol.Shared.Common.callAsync(
            {},
            url,
            function (data) {
                _this.AddRecipientsFromHierarchy.init(data);
            });
    };

    this.canEditRecipientsInGrid = function () {
        return _this.getPublish().IsReadOnly();
    }

    this.showEditRecipientPopup = function (genericGridRow) {
        var recipientGroupGrid = _this.IsEmailRecipients()
            ? _this.ManageRecipientGroups.RecipientGroupGridList()
            : _this.getPublish().EmailRecipients.ManageRecipientGroups.RecipientGroupGridList();

        var recipientGroups = $.map(recipientGroupGrid, function (group) {
            return { Id: group.RecipientGroupId(), Name: group.Name() };
        });

        recipientGroups.push({ Id: null, Name: _messages.recipientGroupsEmptyOption });

        recipientGroups.sort(function (a, b) { return a.Name > b.Name });

        var recipient = ko.mapping.fromJS(ko.mapping.toJS(genericGridRow), {});

        var editRecipient = new Webropol.SurveyPublish.ManageRecipients.EditRecipient(_this, recipient, recipientGroups, _urls.getEditRecipientTemplateUrl)
        editRecipient.show().done(function (value) {
            _this.saveRecipientRow(value);
        });
    };

    this.showEditDemDataRecipientPopup = function (genericGridRow) {

        var recipient = ko.mapping.fromJS(ko.mapping.toJS(genericGridRow), {});

        _this.editRecipientsPopup = ko.shared.showPopupFromTemplate(
            "edit-dem-data-recipient-popup",
            {
                recipient: recipient,
                headerText: recipient.Email(),
                manageRecipients: _this,
                canSaveDemDataRecipientRow: ko.computed(function () {
                    var rawEmail = (recipient.Email() || '').trim();
                    var isEmptyEmail = rawEmail.length === 0;
                    if (isEmptyEmail) {
                        return false;
                    }
                    return Webropol.Common.validateEmail(rawEmail);
                }),
                canEditEmail: ko.computed(function () {
                    return !recipient.MailSent();
                }),
            },
            null,
            _urls.getEditDemDataRecipientTemplateUrl);
    };

    this.saveRecipientRow = function (recipientRow) {
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON({ recipientRowViewModel: recipientRow }),
            urls.saveRecipientRowUrl,
            function (result) {
                if (result.ErrorCode == Webropol.Constants.Common.ErrorCode.Ok) {
                    _this.refreshRecipientsGridExceptGroups();
                    _this.getPublish().EmailRecipients.ManageRecipientGroups.updateRecipientInRecipientGroupGridList(recipientRow);
                    toastr.success(result.Message);
                }
            });
    };

    this.saveDemDataRecipientRow = function (recipientRow) {
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON({ editingRow: recipientRow }),
            urls.saveDemDataRow,
            function (result) {
                if (result.ErrorCode == Webropol.Constants.Common.ErrorCode.Ok) {
                    _this.refreshRecipientsGridExceptGroups();
                    toastr.success(result.Message);
                }
            });
    };

    var findAllChildren = function (parent) {
        var children = ko.utils.arrayFilter(_grid.Items(),
            function (item) {
                return item.ParentId() === parent.RowId();
            });
        return children;
    };

    var switchAllChildren = function (parent) {
        var children = findAllChildren(parent);
        ko.utils.arrayForEach(children,
            function (item) {
                item.IsSelected(parent.IsSelected());
            });
        return children;
    };

    var isAllChildrenSelected = function (parent) {
        var children = findAllChildren(parent);
        var child = ko.utils.arrayFirst(children,
            function (child) {
                return !child.IsSelected();
            });
        return child === null;
    };

    var findEvaluationTargets = function (rows) {
        var targets = ko.utils.arrayFilter(rows,
            function (row) {
                return row.ItemType() === Webropol.Constants.Publish.Circular.GridItemTypes.EvaluationTarget;
            }) || [];
        return targets;
    };

    var findEvaluators = function (rows) {
        var evaluators = ko.utils.arrayFilter(rows,
            function (row) {
                return row.ItemType() === Webropol.Constants.Publish.Circular.GridItemTypes.Evaluator;
            }) || [];
        return evaluators;
    };

    var createCircularGrid = function (initialData) {
        var selectRows = {
            click: function (row, columnId, event) {

                if (row.HasChilds()) {
                    var children = switchAllChildren(row);
                }

                if (row.ParentId && row.ParentId()) {
                    var parent = _grid.getRowById(row.ParentId());
                    if (isAllChildrenSelected(parent)) {
                        parent.IsSelected(true);
                    } else {
                        parent.IsSelected(false);
                    }
                }
            }
        };

        var gridOptions = {
            items: {
                "IsSelected": selectRows
            },
            editRow: {
                customRowValidation: function (propertyValues) {
                    var validateEvaluator = function (evaluator) {
                        if (!(evaluator.email && evaluator.roleId)) {
                            return false;
                        }

                        if (!Webropol.Common.validateRequiredEmail(evaluator.email)) {
                            return false;
                        }

                        return true;
                    };

                    var isEvaluatorValid = validateEvaluator({
                        email: propertyValues[2],
                        roleId: propertyValues[3] && propertyValues[3].Id()
                    });
                    return isEvaluatorValid;
                },
                canRowEdit: function (row) {
                    return (row.ParentId() != null);
                },
                saveRowChanges: function (rowJsObject, afterSaveRow) {
                    Webropol.Shared.Common.callAsync(
                        ko.mapping.toJSON({
                            evaluatorRowViewModel: rowJsObject
                        }),
                        urls.saveCircularSingleEvaluator,
                        function (data) {
                            if (data.ErrorCode === Webropol.Constants.Common.ErrorCode.Ok) {
                                _grid.reload();
                                ko.shared.notifySuccess(rowJsObject, data.Message);
                            }
                        }
                    );
                }
            }
        };

        var gridUrls = {
            loadDataUrl: _urls.getCircularGrid,
            exportToExcelUrl: _urls.exportCircularData
        };

        _grid = new Webropol.BossTools.GenericGrid(gridUrls, _messages, _this, gridOptions);
        _grid.init(initialData);

        return _grid;
    };

    this.showDeleteCircularRecipientRowsConfirmation = function (vm, event) {
        ko.shared.showPopupFromTemplate("delete-circular-recipient-rows-confirmation-template",
            _this,
            null,
            _urls.getDeleteCircularRecipientRowsConfirmationTemplate);
    };

    this.DeleteCircularRecipientRows = function (vm, event) {
        var deletingRows = vm.CircularGrid.getSelectedRows();

        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON({ deletingRowsVeiwModel: deletingRows }),
            urls.deleteCircularRecipientGridRows,
            function (result) {
                if (result.ErrorCode == Webropol.Constants.Common.ErrorCode.Ok) {
                    ko.shared.notifySuccess({}, result.Message);
                    _grid.reload();
                }
            });
    };

    this.DeletingCircularRecipientsConfirmationQuestion = function () {
        var selectedRows = _grid.getSelectedRows();
        var deletingEvaluationTargets = findEvaluationTargets(selectedRows);
        var deletingEvaluators = findEvaluators(selectedRows);
        var formatted = Webropol.Shared.Common.stringFormat(_messages.deletingCircularRecipientRowsConfirmationQuestion,
            deletingEvaluationTargets.length,
            deletingEvaluators.length);
        return formatted;
    };

    this.redirectToRecipientTab = function () {
        var redirectedTabs = [
            _this.RecipientTab.CopyPasteOutlook,
            _this.RecipientTab.ImportExcelFile
        ];
        var isRedirected = redirectedTabs.indexOf(_this.currentTab()) !== -1;

        if (isRedirected) {
            _this.currentTab(_this.RecipientTab.Recipients);
        }
    };

    this.setExpandedStateForSendingBlock = function () {
        if (typeof publish.setExpandedStateForSendingBlock === "function") {
            var isExpanded = _this.RecipientGrid.Items().length > 0;

            publish.setExpandedStateForSendingBlock(_recipientType, isExpanded);
        }
    };

    this.reloadCallback = function () {
        releaseRecipientsGrid();

        publish.EmailMessage.getEmailRecipientsCount(function () {
            publish.EmailMessage.IsEmailRecipientsCountUploaded(true);
        });

        _this.setExpandedStateForSendingBlock();
    };

    this.onImportRecipientsFromRespondentLibrary = function () {
        publish.EmailMessage.IsEmailRecipientsCountUploaded(false);
        lockRecipientsGrid();

        var respondentLibraryFieldValues = _this.BackgroundVariableItems().map(function (item) {
            return item.selectedVariableOptions();
        });

        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON({ respondentLibraryFieldValues: respondentLibraryFieldValues }),
            _urls.importRecipientsFromRespondentLibraryUrl,
            function (result) {
                Webropol.Common.showSuccessMessage(result);
                _this.reloadRecipientGrids(_this.ReloadedGrid.All, function () {
                    _this.reloadCallback();

                    var newGrid = result.ExtraData;
                    updateDemDataGrid(newGrid);
                });
            }
        );
    }

    this.onVariableFieldChange = function (variable) {
        if (variable.variableId()) {
            var fieldAvailableValues = _this.VariableFieldAvailableValuesMap[variable.variableId()];

            if (fieldAvailableValues) {
                variable.variableOptions(fieldAvailableValues);
                return;
            }

            Webropol.Shared.Common.callAsync(
                ko.mapping.toJSON({ variableId: variable.variableId }),
                _urls.getVariableFieldAvailableValuesUrl,
                function(fieldAvailableValues) {
                    if (fieldAvailableValues.length) {
                        _this.VariableFieldAvailableValuesMap[variable.variableId()] = fieldAvailableValues;
                        variable.variableOptions(fieldAvailableValues);
                    }
                }
            );
        } else {
            variable.variableOptions([]);
        }
    }

    this.addNewBackgroundVariableItem = function() {
        var newBackgroundVariableItem = {
            variableId: ko.observable(''),
            variableOptions: ko.observableArray(),
            selectedVariableOptions: ko.observableArray()
        };

        _this.BackgroundVariableItems.push(newBackgroundVariableItem);
    }

    this.removeBackgroundVariableItem = function (index) {
        _this.BackgroundVariableItems.splice(index(), 1);
    }

    this.getAvailableRespondentLibraryVariables = function (index) {
        if (!_this.BackgroundVariableItems().length) {
            return _this.AvailableRespondentLibraryVariables();
        }

        var currentVariableId = _this.BackgroundVariableItems()[index()].variableId();

        var availableRespondentLibraryVariables = ko.utils.arrayFilter(_this.AvailableRespondentLibraryVariables(),
            function (variable) {
                if (currentVariableId === variable.Id()) {
                    return true;
                }

                var selected = ko.utils.arrayFirst(_this.BackgroundVariableItems(), function (item) {
                    return variable.Id() === item.variableId();
                });

                return !selected;
            }) || [];

        return availableRespondentLibraryVariables;
    }
};;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};
Webropol.SurveyPublish.ManageRecipients = Webropol.SurveyPublish.ManageRecipients || {};

Webropol.SurveyPublish.ManageRecipients.DemDataError = function () {
    var _this = this;
    
    this.init = function (data) {
        ko.mapping.fromJS(data, {}, _this);

        var detailedErrors = _this.DetailedErrors();
        this.ErrorDetailsString = detailedErrors ? detailedErrors.join('\n') : null;
    };
    
    this.showDetails = function () {
        ko.shared.showPopupFromTemplate('import-dem-data-error-details', _this);
    };
};;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.ManageRecipientGroups = function (urls, messages, publish) {
    var _this = this;

    this.init = function (initialData) {
        var mapping = {
            'RecipientGroup': {
                create: function (options) {
                    var recipientGroup = new Webropol.SurveyPublish.RecipientGroup(urls, messages, _this, publish);
                    recipientGroup.init(options.data);
                    return recipientGroup;
                }
            }
        };

        ko.mapping.fromJS(initialData, mapping, _this);

        _this.RecipientGroupGridListClone = _this.getObservableClone(_this.RecipientGroupGridList());

        _this.initObservables();
        _this.initSubscribers();
    };

    this.initObservables = function () {
        _this.canUploadRecipientGroups = ko.observable(false);
        _this.groupsListSortBy = ko.observable();
        _this.groupsListSearchText = ko.observable();
        _this.searchClicked = ko.observable(false);
    };

    this.initSubscribers = function () {
        var _wasEmpty = false;
        _this.RecipientGroupGridListClone.subscribe(function (arrayState) {
            _wasEmpty = (arrayState.length == 0);
        }, null, 'beforeChange');
        _this.RecipientGroupGridListClone.subscribe(function (arrayState) {
            if (_wasEmpty && (arrayState.length > 0)) {
                publish.EmailRecipients.activeTab(publish.EmailRecipients.RecipientTab.RecipientGroups);
            }
            _wasEmpty = (arrayState.length == 0);
        });
    };

    this.reset = function () {
        _this.RecipientGroup.reset();
        _this.UploadOnlyNewEmails(true);
    };

    this.getObservableClone = function (observable) {
        return ko.mapping.fromJS(ko.mapping.toJS(observable));
    };

    this.createRecipientGroup = function (group) {
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON({
                recipientGroupViewModel: ko.mapping.toJS(group),
                surveyId: publish.Id()
            }),
            urls.createRecipientGroupUrl,
            function (result) {
                if (result.ExtraData != null) {
                    var resultDataAsObservable = ko.mapping.fromJS(result.ExtraData);
                    if (_this.groupsListSortBy() == messages.recipientGroupsSortbyKeyTime) {
                        var groupClone = ko.mapping.fromJS(ko.mapping.toJS(resultDataAsObservable));

                        _this.RecipientGroupGridList.splice(0, 0, resultDataAsObservable);
                        _this.RecipientGroupGridListClone.splice(0, 0, groupClone);
                    } else {
                        _this.pushItemToRecipientGroupGridList(resultDataAsObservable);
                    }

                    //not nessesary to call server request for recipient groups
                    publish.EmailRecipients.refreshRecipientsGridExceptGroups();
                }

                Webropol.Common.showSuccessMessage(result);
                $('#addRecipientsPopup').modal('hide');
            });
    };

    this.onEditRecipientGroup = function (recipientGroupGridItem) {
        var recipientGroup = _this.fromRecipientGroupGridItemToRecipientGroup(recipientGroupGridItem);
        recipientGroup.callEditPopup(recipientGroupGridItem);
    };

    this.fromRecipientGroupGridItemToRecipientGroup = function (recipientGroupGridItem) {
        var gridItemJsObject = ko.mapping.toJS(recipientGroupGridItem, { ignore: ['SentCount', 'ResponsesCount'] });

        var recipientEmails = $.map(gridItemJsObject.ShortRecipients, function (shortRecipient) { return shortRecipient.Email; });

        var recipientGroupJsObject = {
            RecipientGroupId: gridItemJsObject.RecipientGroupId,
            RecipientGroupName: gridItemJsObject.Name,
            GroupLeaders: ko.utils.arrayMap(gridItemJsObject.LeaderEmails, function (rgl) {
                return rgl;
            }),
            NewGroupLeader: {
                GroupLeaderEmail: '',
                IsRecipient: false
            },
            RecipientsOfGroupString: recipientEmails.join('\n'),
            AddOnlyNewEmails: gridItemJsObject.AddOnlyNewEmails
        };
        var recipientGroup = new Webropol.SurveyPublish.RecipientGroup(urls, messages, _this, publish);
        recipientGroup.init(recipientGroupJsObject);
        return recipientGroup;
    };

    this.onRecipientGroupsFileChange = function (manageGroups, event) {
        var $fileInput = $(event.target);
        if (Webropol.Shared.Common.validateFileFormat($fileInput, ['xls', 'xlsx'])) {
            _this.canUploadRecipientGroups(true);
        } else {
            _this.canUploadRecipientGroups(false);
        }
    };

    this.uploadRecipientGroups = function (manageGroups, event) {
        var $form = $('#recipientGroupsUploadForm');
        var $fileInput = $form.find('input:file');
        var fileName = Webropol.Shared.Common.getFileNameFromFilePath($fileInput.val(), true);
        if ($.trim(fileName).length == 0) {
            return;
        }

        Webropol.Shared.Common.callAjaxSubmit($form, {
            url: urls.uploadRecipientGroupsUrl,
            data: {
                surveyId: publish.Id(),
                addOnlyNewEmails: _this.UploadOnlyNewEmails()
            },
            success: function (json) {
                var result = Webropol.Shared.Common.parseJSON(json);
                if (result.ErrorCode == 0) {
                    publish.EmailRecipients.reloadRecipientGrids(publish.EmailRecipients.ReloadedGrid.All, function () {
                        publish.EmailMessage.getEmailRecipientsCount(function () {
                            publish.EmailMessage.IsEmailRecipientsCountUploaded(true);
                        });
                    });
                    $('#addRecipientsPopup').modal('hide');
                }

                Webropol.Common.showSuccessMessage(result);

                cleanupChosenRecipientGroupsFile($fileInput);
            }
        });

        function cleanupChosenRecipientGroupsFile($fileInput) {
            $fileInput.replaceWith($fileInput.val('').clone(true)); //clearing value from file input
            _this.canUploadRecipientGroups(false);
        };
    };

    this.clearFilterRecipientGroupList = function () {
        _this.groupsListSearchText(null);
        _this.applyFilterRecipientGroupList();
        _this.searchClicked(false);
    };

    this.runSearch = function() {
        _this.searchClicked(true);
        _this.applyFilterRecipientGroupList();
    };

    this.cancelSearch = function() {
      
        _this.runSearch();
    };

    this.searchTextChanged = function(data, event) {
        if(!data.groupsListSearchText()) {
            _this.clearFilterRecipientGroupList();
        }
    };

    this.applyFilterRecipientGroupList = function () {

        var searchText = _this.groupsListSearchText();
        var sortBy = _this.groupsListSortBy();
        var groups = _this.RecipientGroupGridList();

        if (searchText) {
            searchText = searchText.toLowerCase();
            groups = $.grep(groups, function (group, index) {
                return (group.Name().toLowerCase().indexOf(searchText) != -1);
            });
        };

        if (sortBy == messages.recipientGroupsSortbyKeyTime) {
            groups.sort(function (a, b) {
                var aEdited = new Date(a.LastEditedOn());
                var bEdited = new Date(b.LastEditedOn());
                if (bEdited > aEdited) {
                    return 1;
                } else if (bEdited < aEdited) {
                    return -1;
                } else {
                    return new Date(b.CreatedOn()) - new Date(a.CreatedOn());
                }
            });
        } else if (sortBy == messages.recipientGroupsSortbyKeyNameAsc) {
            groups.sort(function (a, b) {
                return (a.Name().toLowerCase() > b.Name().toLowerCase()) ? 1 : ((b.Name().toLowerCase() > a.Name().toLowerCase()) ? -1 : 0);
            });
        } else if (sortBy == messages.recipientGroupsSortbyKeyNameDesc) {
            groups.sort(function (a, b) {
                return (a.Name().toLowerCase() < b.Name().toLowerCase()) ? 1 : ((b.Name().toLowerCase() < a.Name().toLowerCase()) ? -1 : 0);
            });
        }

        ko.mapping.fromJS(ko.mapping.toJS(groups), {}, _this.RecipientGroupGridListClone);
    };

    this.pushItemToRecipientGroupGridList = function (group) {
        var groupClone = ko.mapping.fromJS(ko.mapping.toJS(group));

        _this.RecipientGroupGridList.push(group);
        _this.RecipientGroupGridListClone.push(groupClone);
        _this.applyFilterRecipientGroupList();
    };

    this.removeItemFromRecipientGroupGridList = function (id) {

        var removePredicate = function (group) { return group.RecipientGroupId() == id; };

        _this.RecipientGroupGridList.remove(removePredicate);
        _this.RecipientGroupGridListClone.remove(removePredicate);
        _this.applyFilterRecipientGroupList();
        publish.EmailRecipients.initActiveTab();
    };

    this.removeRecipientFromRecipientGroup = function (group, recipientId) {
        var removePredicate = function (shortRecipient) { return shortRecipient.RecipientId() == recipientId; };
        group.ShortRecipients.remove(removePredicate);
    };

    this.addRecipientToRecipientGroup = function (group, shortRecipient) {
        if (group == null) {
            return;
        };

        group.ShortRecipients.push(shortRecipient);
        group.ShortRecipients.sort(function (a, b) { return (a.Email() > b.Email()) ? 1 : ((b.Email() > a.Email()) ? -1 : 0); });
    };

    this.updateRecipientInRecipientGroupGridList = function (recipientRow) {

        var recipientGroupList = _this.RecipientGroupGridList();
        var recipientGroupListClone = _this.RecipientGroupGridListClone();

        var recipientId = recipientRow.RowId();
        var email = recipientRow.Email();
        var recipientGroupId = recipientRow.RecipientGroupId();

        var shortRecipient = {
            RecipientId: ko.observable(recipientId),
            Email: ko.observable(email)
        };

        $.each(recipientGroupList, function (index, group) {
            _this.removeRecipientFromRecipientGroup(group, recipientId);
        });

        $.each(recipientGroupListClone, function (index, group) {
            _this.removeRecipientFromRecipientGroup(group, recipientId);
        });

        var group = findGroupById(recipientGroupList, recipientGroupId);

        _this.addRecipientToRecipientGroup(group, shortRecipient);

        group = findGroupById(recipientGroupListClone, recipientGroupId);

        _this.addRecipientToRecipientGroup(group, shortRecipient);

        function findGroupById(sourceList, recipientGroupId) {
            var grepResult = $.grep(sourceList, function(group) {
                return group.RecipientGroupId() == recipientGroupId;
            });

            if (grepResult.length > 0) {
                return grepResult[0];
            };

            return null;
        };
    };

    this.updateRecipientGroupGridList = function (groups) {
        ko.mapping.fromJS(groups, {}, _this.RecipientGroupGridList);
        ko.mapping.fromJS(groups, {}, _this.RecipientGroupGridListClone);
        _this.applyFilterRecipientGroupList();
    };

    this.refreshRecipientGroupList = function () {
        Webropol.Shared.Common.callAsync(
            {},
            urls.getRecipientGroupListUrl,
            function (result) {
                var groups = ko.mapping.fromJS(result);
                _this.updateRecipientGroupGridList(groups());
                publish.EmailRecipients.initActiveTab();
            });
    };

    this.exportRecipientGroups = function () {

        var groupIds = $.map(_this.RecipientGroupGridListClone(), function (group) {
            return group.RecipientGroupId();
        });

        var data = {
            recipientGroupsIds: groupIds
        };

        Webropol.Shared.Common.callSubmit(urls.exportRecipientGroupListUrl, data);
    };

    this.onDeleteRecipientGroup = function (recipientGroupGridItem) {
        ko.shared.showConfirmDialog(
            messages.deleteRecipientGroupBody,
            function () {
                _this.deleteRecipientGroup(recipientGroupGridItem.RecipientGroupId());
            },
            function () {
            },
            messages.deleteRecipientGroupHeader,
            messages.deleteRecipientGroupButton
        );
    };

    this.deleteRecipientGroup = function (id) {
        Webropol.Shared.Common.callAsync(
            { recipientGroupId: id },
            urls.deleteRecipientGroupUrl,
            function (result) {
                if (result.ErrorCode == Webropol.Constants.Common.ErrorCode.Ok) {

                    publish.EmailRecipients.refreshRecipientsGridExceptGroups();
                    _this.removeItemFromRecipientGroupGridList(id);

                    Webropol.Common.showSuccessMessage(result);
                }
            });
    };
};
;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};
Webropol.SurveyPublish.ManageRecipients = Webropol.SurveyPublish.ManageRecipients || {};

Webropol.SurveyPublish.ManageRecipients.EditRecipient = function (manageRecipients, recipient, recipientGroups, getTemplateLink) {
    var _this = this,
        _deffered = $.Deferred(),
        _email = '',
        _mobile = '';

    _this.recipient = recipient;
    _this.recipientGroups = recipientGroups;
    _this.headerText = _this.recipient.Email() || _this.recipient.Mobile();
    _this.canSelectRecipientGroup = !manageRecipients.getPublish().IsEvent();
    _this.isEmailValid = ko.observable(false);
    _this.canSaveRecipientRow = ko.observable(false);

    var init = function () {
        checkEmail(_this.recipient.Email());
        checkMobile(_this.recipient.Mobile());

        _this.initComputed();
        _this.initSubscribers();
    };

    this.initComputed = function() {
        _this.canEditEmail = ko.computed(function() {
            return !_this.recipient.MailSent();
        }, _this);
    };

    _this.initSubscribers = function() {
        _this.recipient.Email.subscribe(function(newValue) {
            checkEmail(newValue);
        });

        _this.recipient.Mobile.subscribe(function(newValue) {
            checkMobile(newValue);
        });
    };

    this.show = function() {
        init();

        function onCancel() {
            _deffered.reject();
        }

        var popupOptions = new ko.shared.PopupOptions();

        popupOptions.TemplateName = "edit-recipient-template";
        popupOptions.Model = _this;
        popupOptions.OnCancel = onCancel;
        popupOptions.GetTemplateUrl = getTemplateLink;

        ko.shared.showPopupFromTemplateWithOptions(popupOptions);

        return _deffered;
    };

    this.saveRecipient = function() {
        return _deffered.resolve(_this.recipient);
    };

    var checkEmail = function(newEmail) {
        _email = newEmail ? newEmail.trim() : '';

        if (isEmailEmpty()) {
            _this.isEmailValid(true);
            _this.canSaveRecipientRow(!isMobileEmpty());
        } else {
            var emailValdiationResult = Webropol.Common.validateEmail(_email);
            _this.isEmailValid(emailValdiationResult);
            _this.canSaveRecipientRow(emailValdiationResult);
        }
    };

    var checkMobile = function(newMobile) {
        _mobile = newMobile ? newMobile.trim() : '';

        if (isMobileEmpty()) {
            _this.canSaveRecipientRow(!isEmailEmpty());
        } else {
            _this.canSaveRecipientRow(_this.isEmailValid());
        }
    };

    var isEmailEmpty = function() {
        return _email.length === 0;
    };

    var isMobileEmpty = function() {
        return _mobile.length === 0;
    };
};;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.RecipientGroup = function (urls, messages, manageGroups, publish) {
    var _this = this;
    var _activeRecipientGroupGridItem;

    this.init = function (initialData) {
        ko.mapping.fromJS(initialData, {}, _this);
        _this.initComputed();
    };

    this.initComputed = function () {
        _this.invalidGroupLeaders = ko.computed(function () {
            return ko.utils.arrayFilter(_this.GroupLeaders(), function (item) {
                return !Webropol.Common.validateOptionalEmail(item.GroupLeaderEmail());
            });
        });

        _this.hasInvalidGroupLeaders = ko.computed(function () {
            return (_this.invalidGroupLeaders().length > 0);
        });

        _this.totalInvalidGroupLeaders = ko.computed(function () {
            return ko.utils.arrayFilter(_this.GroupLeaders(), function (item) {
                return !Webropol.Common.validateRequiredEmail(item.GroupLeaderEmail());
            });
        });

        _this.areAllGroupLeadersValid = ko.computed(function () {
            return (_this.GroupLeaders().length > 0) && (_this.totalInvalidGroupLeaders().length == 0);
        });

        _this.isModelValid = ko.computed(function () {
            return ($.trim(_this.RecipientGroupName()).length > 0) &&
                _this.areAllGroupLeadersValid() &&
                ($.trim(_this.RecipientsOfGroupString()).length > 0);
        });
    };

    this.reset = function () {
        _this.RecipientGroupName('');
        
        _this.GroupLeaders.removeAll();
        _this.addGroupLeader();

        _this.RecipientsOfGroupString('');
        _this.AddOnlyNewEmails(true);
    };

    this.addGroupLeader = function () {
        _this.GroupLeaders.push(ko.mapping.fromJS(ko.mapping.toJS(_this.NewGroupLeader)));
    };

    this.removeGroupLeader = function (groupLeader) {
        _this.GroupLeaders.remove(groupLeader);
    };

    this.callEditPopup = function (activeRecipientGroupGridItem) {
        _activeRecipientGroupGridItem = activeRecipientGroupGridItem;

        ko.shared.showPopupFromTemplate('edit-recipient-group-template',
            _this,
            null,
            urls.getEditRecipientGroupTemplateUrl);
    };

    this.getActiveRecipientGroupGridItem = function () {
        return _activeRecipientGroupGridItem;
    };

    this.updateRecipientGroup = function (group) {
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON({
                recipientGroupViewModel: ko.mapping.toJS(group),
                surveyId: publish.Id()
            }),
            urls.updateRecipientGroupUrl,
            function (result) {
                var groupIndex = ko.utils.arrayIndexOf(manageGroups.RecipientGroupGridListClone(), _this.getActiveRecipientGroupGridItem());

                if (result.ExtraData != null) {
                    manageGroups.RecipientGroupGridList.splice(groupIndex, 1, ko.mapping.fromJS(result.ExtraData));
                    manageGroups.RecipientGroupGridListClone.splice(groupIndex, 1, result.ExtraData);
                    manageGroups.applyFilterRecipientGroupList();
                }

                publish.EmailRecipients.reloadRecipientGrids(publish.EmailRecipients.ReloadedGrid.Recipients);

                Webropol.Common.showSuccessMessage(result);
                $('#editRecipientGroupPopup').modal('hide');
            });
    };
};
;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.EmailMessage = function(urls, messages, publish) {
    var _this = this;
    var _urls = urls;
    var _messages = messages;
    var _isSending = ko.observable(false);
    var _validatationTriggered = ko.observable(false);
    var _shouldSaveWithNotification = true;

    this.attachmentsSizeExceeded = ko.observable(false);
    this.isAttachedFiles = ko.observable(false);
    this.emailTemplateAttachments = ko.observableArray([]);
    this.ckeditorInstance = ko.observable(null);
    this.isGeneratingMessage = ko.observable(false);

    this.getPublish = function () {
        return publish;
    };

    this.getAutoSaveTimeout = function () {
        return 1;
    };

    this.getBodyAutoSaveTimeout = function () {
        return 5000;
    };

    this.getIsReadOnly = function() {
        return publish.IsReadOnly();
    };

    this.init = function (initialData) {
        var webropolEmail = initialData.WebropolEmail.Email;

        var mapping = {
            "EmptyReplyTo" : {
                create: function (option) {
                    var mappedFromOption = ko.mapping.fromJS(option.data);
                    mappedFromOption.TextComputed = ko.pureComputed(function () {
                        return mappedFromOption.Text();
                    });
                    return mappedFromOption;
                }
            }
        };

        ko.mapping.fromJS(initialData, mapping, _this);

        Webropol.Common.CustomizeEmail(_messages, _this);
        _this.extendFromOptions(_this.FromForManual(), webropolEmail);
        _this.extendReplyOptions(_this.ReplyToForManual());

        Webropol.Common.EmailTemplate(_messages, _this);
        _this.GetEmailTemplateGroups = function() {
            return _this.EmailTemplateGroups();
        };

        if (_this.SelectedFrom() === _this.WebropolEmail.Email()) {
            _this.ReplyToForManual.splice(0, 0, _this.EmptyReplyTo);

            if (!_this.SelectedReplyTo()) {
                _this.SelectedReplyTo(_this.EmptyReplyTo.Email());
            }
        }

        _this.customizedSenderNameImmediate(_this.CustomizedSenderName());

        _this.initializeComputed();
        _this.subscribeOnValuesChanged();

        _this.IsEmailRecipientsCountUploaded = ko.observable(true);
        _this.advancedSettingsIsOpen = ko.observable(_this.IncludeRecipientLoginAndPassword() || _this.SentInDays() || _this.SentCount());
    };

    this.initializeComputed = function () {
        function isCircularSurveyWithoutOngoingPeriod() {
            if (!_this.getPublish().IsCircularSurvey.peek()) {
                return false;
            }

            var respondingPeriod = _this.getPublish().RespondingPeriod;
            return respondingPeriod.IsEnabled && !respondingPeriod.HasOngoingPeriod;
        }

        //show grid when selected option 'select recipients from grid'
        _this.CanShowRecipientsGrid = ko.pureComputed(function () {
            return _this.SelectedTo() === Webropol.Constants.SurveyPublish.EmailSendingMode.SendToSelected && _this.SelectedRecipients().length > 0;
        });

        _this.CanShowRecipientsHierarchyGrid = ko.pureComputed(function () {
            return _this.SelectedTo() === Webropol.Constants.SurveyPublish.EmailSendingMode.SendToSelectedFromHierarchy && _this.SelectedRecipients().length > 0;
        });

        _this.CanSelectRecipientsFromGrid = ko.pureComputed(function () {
            return !_this.getPublish().EmailRecipients.AreRecipentsUploading();
        });

        _this.CanSaveTemplate = ko.pureComputed(function () {
            var currentTemplate = _this.getTemplateByName(_this.SavingTemplateName());
            return !_this.IsReadOnly() && _this.SavingTemplateName() && _this.SavingTemplateName().length != 0 && (currentTemplate == null || currentTemplate.CanOverride());
        });

        _this.CanOverwriteTemplate = ko.pureComputed(function () {
            return !_this.IsReadOnly() && _this.getTemplateByName(_this.SavingTemplateName()) != null;
        });

        _this.CanOpenSaveTemplateDialog = ko.pureComputed(function () {
            return !_this.IsReadOnly() && _this.EmailSubject() && _this.EmailBody() && !_this.attachmentsSizeExceeded();
        });

        _this.IsSentInDaysLimitInValid = ko.pureComputed(function () {
            return _this.SentInDays() && (!_this.SentInDaysLimit() || _this.SentInDaysLimit() == 0);
        });

        _this.IsSentCountAmountInValid = ko.pureComputed(function () {
            return _this.SentCount() && (!_this.SentCountAmount() || _this.SentCountAmount() == 0);
        });

        var getSelectedSentToChoice = function() {
            return ko.utils.arrayFirst(_this.To(), function (item) {
                return (item.EmailSendingMode() == _this.SelectedTo());
            }).Text();
        };

        _this.EmailMessageSentToText = ko.pureComputed(function () {
            if (_this.SelectedTo() === Webropol.Constants.SurveyPublish.EmailSendingMode.SendToSelected ||
                _this.SelectedTo() === Webropol.Constants.SurveyPublish.EmailSendingMode.SendToSelectedFromHierarchy) {
                return _this.SelectedRecipientsEmails().join(", ") || messages.noRespondentSelected;
            }

            return getSelectedSentToChoice();
        });

        this.isEmailBodyValid = function() {
            var emailBody = _this.EmailBody();
            return emailBody != null && emailBody.trim().length > 0;
        }

        this.getRecipientsIndication = function() {
            return Webropol.Shared.Common.stringFormat(_messages.recipientsNotSelected, getSelectedSentToChoice());
        }

        this.getEmailBodyIndication = function() {
            if(_this.isEmailBodyValid()) {
                return _messages.emailBodyFilled;
            }

            return '';
        }

        this.attachmentsSizeExceededIndication = function() {
            if(_this.attachmentsSizeExceeded()) {
                return _messages.attachmentsSizeExceeded;
            }

            return '';
        }

        this.attachmentsSizeExceededShortIndication = function() {
            if(_this.attachmentsSizeExceeded()) {
                return _messages.attachmentsSizeExceededShort;
            }

            return '';
        }

        _this.isEmailSubjectValid = function() {
            return _this.EmailSubject() != null && _this.EmailSubject().trim() != "";
        }

        _this.hasRecipientWithMissingName = function () {
            return _this.EmailRecipientsCount.CountWithMissingName() > 0;
        }

        _this.hasRecipientWithMissingMobileNumber = function () {
            return this.EmailRecipientsCount.CountWithMissingMobileNumber() > 0;
        }

        _this.hasRecipientWithInvalidMobileNumber = function () {
            return _this.EmailRecipientsCount.CountWithInvalidMobileNumber() > 0;
        }

        this.validationTriggeredAndFailed = function() {
            return _validatationTriggered() && !_this.CanSendSurvey();
        }

        _this.CanSendSurvey = ko.pureComputed(function () {
            if (_this.IsReadOnly() || _isSending()) {
                return false;
            }

            return _this.EmailRecipientsCount.TotalCount() > 0
                && _this.IsEmailRecipientsCountUploaded()
                && _this.isEmailBodyValid()
                && _this.SelectedTo() != Webropol.Constants.SurveyPublish.EmailSendingMode.Stub
                && _this.isEmailSubjectValid()
                && !_this.attachmentsSizeExceeded()
                && !_this.hasRecipientWithMissingName()
                && !_this.hasRecipientWithMissingMobileNumber()
                && !_this.hasRecipientWithInvalidMobileNumber()
                && !_this.IsSentCountAmountInValid()
                && !_this.IsSentInDaysLimitInValid();
        });

        _this.CanPreviewEmailMessage = ko.pureComputed(function () {
            return _this.isEmailBodyValid();
        });

        _this.IsReadOnly = ko.pureComputed(function() {
            return _this.getIsReadOnly() || isCircularSurveyWithoutOngoingPeriod();
        });

        _this.CanSelectRecipientsTo = ko.pureComputed(function () {
            return _this.getPublish().EmailRecipients.RecipientsInfo.RecipientsCount() > 0 && !_this.IsReadOnly();
        });

        _this.ShowAttachementsOfEmailTemplate = ko.pureComputed(function () {
            var selectedTemplateId = _this.SelectedEmailTemplateId();

            if (selectedTemplateId && selectedTemplateId !== Webropol.Constants.Common.Guid.Empty) {
                var downloadAttachedFiles = function() {
                    Webropol.Shared.Common.callAsync(
                        ko.toJSON({ selectedEmailTemplateId: selectedTemplateId }),
                        _urls.getEmailTemplateAttachments,
                        function(data) {
                            _this.emailTemplateAttachments(data.ExtraData.EmailTemplateAttachments);
                        });
                };
                downloadAttachedFiles();
            } else {
                _this.emailTemplateAttachments([]);
            }

        }).extend({ rateLimit: 1 });
    };

    this.subscribeOnValuesChanged = function () {
        _this.SelectedEmailTemplateId.subscribe(function (newValue) {
            _this.onEmailTemplateChanged(newValue);
        });

        _this.SelectedTo.subscribe(function (value) {
            if (value === Webropol.Constants.SurveyPublish.EmailSendingMode.SendToSelected) {
                _this.showRecipientsGridPopup();
            }
            if (value === Webropol.Constants.SurveyPublish.EmailSendingMode.SendToSelectedFromHierarchy) {
                _this.showRecipientsHierarchyGridPopup();
            }
            if (value === Webropol.Constants.SurveyPublish.EmailSendingMode.SendToWaitlist) {
                _this.EmailSubject("");
                _this.EmailBody(_messages.sendToWaitListTemplate);
            }

            _this.IsEmailRecipientsCountUploaded(false);
            _this.getEmailRecipientsCount(function () { _this.IsEmailRecipientsCountUploaded(true); });

            if(_this.getPublish().IsCircularSurvey()) {
                _this.updateCircularTargetsCount();
            }
        });

        _this.SelectedFrom.subscribe(function(value) {
            _this.restoreCustomizedSenderNameFromCache(value);

            if (value === _this.WebropolEmail.Email()) {
                _this.ReplyToForManual.splice(0, 0, _this.EmptyReplyTo);

                _this.SelectedReplyTo(_this.EmptyReplyTo.Email());

                if (_this.SelectedReplyTo.reset) {
                    _this.SelectedReplyTo.reset();
                }
            } else {
                _this.ReplyToForManual.remove(_this.EmptyReplyTo);

                _this.SelectedReplyTo(_this.SelectedFrom());

                // check for case when other user set email that is not available for current one
                if (_this.SelectedReplyTo.reset) {
                    _this.SelectedReplyTo.reset();
                }
            }
        });
    };

    this.onBindingComplete = function () {
        _this.forcePlaceholder();
        var autosavables = [
            _this.SelectedFrom,
            _this.CustomizedSenderName,
            _this.SelectedTo,
            _this.SelectedReplyTo,
            _this.SelectedEmailTemplateId,
            _this.EmailSubject,
            _this.SelectedSslLinkType,
            _this.UseUnsubscribeOption,
            _this.UnsubscribeCustomText,
            _this.UseUnsubscribeFromLibraryOption,
            _this.UnsubscribeFromLibraryCustomText,
            _this.IsAttachOutlookCompatibleCalendar,
            _this.IncludeRecipientLoginAndPassword,
            _this.SentInDays,
            _this.SentInDaysLimit,
            _this.SentCount,
            _this.SentCountAmount,
            _this.IncludeSurveyLink
        ];

        for (var i = 0; i < autosavables.length; i++) {
            ko.autoSaveObservable(autosavables[i], null, _this.getAutoSaveTimeout(), _this.autoSave);
        }

        ko.autoSaveObservable(_this.EmailBody, null, _this.getBodyAutoSaveTimeout(), _this.autoSave);
    };

    this.autoSaveInternal = function (onSuccess, isTimer, observable) {
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON(_this),
            _urls.saveEmailSettingsUrl,
            function (data) {
                if (_shouldSaveWithNotification) {
                    Webropol.Common.showSuccessMessage(data, observable);
                }
                _shouldSaveWithNotification = true;
                if (typeof onSuccess === 'function') {
                    onSuccess();
                }
            }
        );
    };

    this.autoSave = $.debounce(100, true, _this.autoSaveInternal);

    this.updateEmailRecipientsCountFromSelected = function (onComplete) {
        Webropol.Shared.Common.callAsync(JSON.stringify({ emailSendingMode: _this.SelectedTo(), selectedRecipientIds: _this.SelectedRecipients() }), _urls.getRecipientsCount,
            function (result) {
                _this.setEmailRecipientsCount(result.TotalCount, result.CountWithMissingName, result.CountWithMissingMobileNumber, result.CountWithInvalidMobileNumber, result.RecipientsDomainCount);
                onComplete();
            });
    };

    this.showRecipientsHierarchyGridPopup = function () {
        if (_this.getPublish().EmailRecipients.AreRecipentsUploading()) {
            return;
        }

        var recipientGridFetchData = {
            data: {},
            url: _urls.getRecipientHierarchyGridViewModel,
            loadDataUrl: _urls.getRecipientInvitationEmailHierarchyGrid,
            template: "add-email-recipients-from-hierarchy-popup-template"
        };
        var surveyId = _this.getPublish().Id();

        if (!_this.recipientsGridCommon) {
            _this.recipientsGridCommon = new Webropol.SurveyPublish.EmailMessage.RecipientsGridCommon(_urls, _messages, _this, surveyId);
        }

        var recipientsGrid = new Webropol.SurveyPublish.EmailMessage.RecipientsHierarchyGrid(_urls, _messages, recipientGridFetchData, _this.recipientsGridCommon.onRecipientsApply, _this.recipientsGridCommon.onRecipientsCancel, surveyId);
        recipientsGrid.showRecipientsGrid();
    };

    this.showRecipientsGridPopup = function () {
        if (_this.getPublish().EmailRecipients.AreRecipentsUploading()) {
            return;
        }

        var recipientGridFetchData = {
            data: {},
            url: _urls.getRecipientGridsViewModel,
            loadDataUrl: _urls.getRecipientInvitationEmailGrid,
            template: "recipient-email-grid-template"
        };
        var surveyId = _this.getPublish().Id();

        if (!_this.recipientsGridCommon) {
            _this.recipientsGridCommon = new Webropol.SurveyPublish.EmailMessage.RecipientsGridCommon(_urls, _messages, _this, surveyId);
        }

        var recipientsGrid = new Webropol.SurveyPublish.EmailMessage.RecipientsGrid(_urls, _messages, recipientGridFetchData, _this.recipientsGridCommon.onRecipientsApply, _this.recipientsGridCommon.onRecipientsCancel, surveyId);
        recipientsGrid.showRecipientsGrid();
    };

    this.onSendSurvey = function () {
        _validatationTriggered(true);

        if(!_this.CanSendSurvey()) {
            return;
        }

        _validatationTriggered(false);

        var publishModel = _this.getPublish();

        if (ko.unwrap(publishModel.EmailRecipients.HasUploadingDemData)) {
            var model = {
                isAgreed: ko.observable(false),
                submit: function() {
                    publishModel.handleSendSurvey(_this);
                }
            };

            ko.shared.showPopupFromTemplate("send-survey-has-uploading-dem-data-template", model, null, _urls.getSendSurveyHasUploadingDemDataTemplateUrl);
        } else {
            publishModel.handleSendSurvey(_this);
        }
    };

    this.onPreviewEmailMessage = function () {
        var model = {
            emailBody: _this.EmailBody(),
            settings: {
                IncludeSurveyLink: _this.IncludeSurveyLink(),
                UseUnsubscribeOption: _this.UseUnsubscribeOption(),
                UnsubscribeCustomText: _this.UnsubscribeCustomText(),
                UseUnsubscribeFromLibraryOption: _this.UseUnsubscribeFromLibraryOption(),
                UnsubscribeFromLibraryCustomText: _this.UnsubscribeFromLibraryCustomText(),
                IncludeRecipientLoginAndPassword: _this.IncludeRecipientLoginAndPassword(),
                IsHtml: true,
                IsPreview: true
            }

        };

        var templatePreview = new Webropol.MyWebropol.LibraryEmailTemplates.TemplatePreview(_urls.getEmailMessagePreviewUrl, model);
        templatePreview.show();
    };

    this.publishSurveyWithUnsubscribeAction = function () {
        _this.UseUnsubscribeOption(true),
        _this.publishSurveyAction();
    }

    this.publishSurveyAction = function () {
        if (_isSending()) {
            return;
        }

        var surveyPublishViewModel = _this.getPublish();
        if (surveyPublishViewModel.IsPublicOrBoth()) {
            surveyPublishViewModel.CollectingMethod.PublishTypeSelected(Webropol.Constants.SurveyPublish.SelectedPublishType.Both);
        } else {
            surveyPublishViewModel.CollectingMethod.PublishTypeSelected(Webropol.Constants.SurveyPublish.SelectedPublishType.Private);
        }

        _this.sendSurvey(function () {
            if (!surveyPublishViewModel.IsPrivateOrBoth()) {
                surveyPublishViewModel.IsSuspendedPrivate(false);
            }

            surveyPublishViewModel.Workflow.Reporting.Disabled(false);
            surveyPublishViewModel.Workflow.Followup.Disabled(false);
            surveyPublishViewModel.Workflow.ManageEventParticipants.Disabled(false);
            surveyPublishViewModel.Workflow.Analysis.Disabled(false);

            if (!surveyPublishViewModel.IsCircularSurvey()) {
                surveyPublishViewModel.EmailRecipients.refreshRecipientsGrid();
            }

            _this.resetEmailSendingModeToDefaultWithoutNotification();
        });
    };

    this.resetEmailSendingModeToDefaultWithoutNotification = function () {
        _shouldSaveWithNotification = false;
        _this.SelectedTo(Webropol.Constants.SurveyPublish.EmailSendingMode.Stub);
    };

    this.getSendAttachedFilesForm = function() {
        var form = $(".js-send-attached-files")[0];
        return form;
    };

    this.sendSurvey = function (onSuccess) {
        _this.TestEmails.removeAll();
        sendSurveyInternal(onSuccess, _this.sendSurveyData);
    };

    this.testSendSurvey = function () {
        sendSurveyInternal(null, _this.testSendSurveyData);
    };

    this.isTestEmailsValid = ko.computed(function () {
        if (!_this.TestEmails().length) {
            return false;
        }

        return ko.utils.arrayFirst(_this.TestEmails(), function (email) {
            return !Webropol.Common.validateEmail(email());
        }) === null;
    });

    var sendSurveyInternal = function (onSuccess, sendSurveyAction) {
        if (!_this.isAttachedFiles()) {
            _this.AttachedFileNames(null);
            sendSurveyAction(onSuccess, null, false);
        } else {
            var sendAttachmentsThenPublish = function (deferred) {
                var form = _this.getSendAttachedFilesForm();

                var onSuccessMultiple = function () {
                    if (typeof (onSuccess) == 'function') {
                        onSuccess();
                    }
                    deferred.resolve();
                }

                var onErrorMultiple = function () {
                    deferred.reject();
                }

                var onAttachesSent = function (result) {
                    var jsonResult = JSON.parse(result);
                    _this.AttachedFileNames(jsonResult.attachedFileNames);
                    sendSurveyAction(onSuccessMultiple, onErrorMultiple, true);
                }

                Webropol.Shared.Common.callAjaxSubmit($(form), {
                    url: form.action,
                    success: onAttachesSent,
                    error: onErrorMultiple
                }, true);
            }

            Webropol.Shared.Common.callMultipleAjax(sendAttachmentsThenPublish);
        }
    };

    this.sendSurveyData = function (onSuccess, onError, hideSpinner) {
        _isSending(true);

        var viewModel = _this.getSendingViewModel();

        Webropol.Shared.Common.callAsync(
            viewModel,
            _urls.sendSurveyUrl,
            function (result) {
                $(".workflow-tab.active a").focus(); //focusing will scroll the page up ultimately

                ko.shared.showPopupFromTemplate("send-survey-result-template", result.ExtraData, null, _urls.getSendSurveyResultTemplate);
                if (typeof (onSuccess) == 'function') {
                    onSuccess();
                }
            },
            onError,
            function () {
                _isSending(false);
            },
            hideSpinner);
    };

    this.testSendSurveyData = function (onSuccess, onError, hideSpinner) {
        var viewModel = _this.getSendingViewModel();
        Webropol.Shared.Common.callAsync(
            viewModel,
            _urls.testSendSurveyUrl,
            function (result) {
                ko.shared.notifySuccess(_this, result.Message);
                if (typeof (onSuccess) == 'function') {
                    onSuccess();
                }
            }, onError, null, hideSpinner);
    };

    this.getEmailRecipientsCount = function (onComplete) {
        switch (_this.SelectedTo()) {
            case Webropol.Constants.SurveyPublish.EmailSendingMode.Stub:
                _this.setEmailRecipientsCount(0, 0, 0, 0, 0);
                onComplete();
                break;
            case Webropol.Constants.SurveyPublish.EmailSendingMode.SendToSelectedFromHierarchy:
            case Webropol.Constants.SurveyPublish.EmailSendingMode.SendToSelected:
                _this.updateEmailRecipientsCountFromSelected(onComplete);
                break;
            default:
                Webropol.Shared.Common.callAsync(JSON.stringify({ emailSendingMode: _this.SelectedTo() }), _urls.getRecipientsCount,
                    function (result) {
                        _this.setEmailRecipientsCount(result.TotalCount, result.CountWithMissingName, result.CountWithMissingMobileNumber, result.CountWithInvalidMobileNumber, result.RecipientsDomainCount);
                        onComplete();
                    });
        }
    };

    this.setEmailRecipientsCount = function (totalCount, countWithMissingName, countWithMissingMobileNumber, countWithInvalidMobileNumber, countRecipientsDomains) {
        _this.EmailRecipientsCount.TotalCount(totalCount);
        _this.EmailRecipientsCount.CountWithMissingName(countWithMissingName);
        _this.EmailRecipientsCount.CountWithMissingMobileNumber(countWithMissingMobileNumber);
        _this.EmailRecipientsCount.CountWithInvalidMobileNumber(countWithInvalidMobileNumber);
        _this.EmailRecipientsCount.RecipientsDomainCount(countRecipientsDomains);
    }

    this.updateCircularTargetsCount = function () {
        var selectedTo = _this.SelectedTo();
        var emailSendingMode = Webropol.Constants.SurveyPublish.EmailSendingMode;

        var setTargetsCount = function(count) {
            _this.CircularTargetsCount(count);
        };

        if (selectedTo !== emailSendingMode.SendToAll
            && selectedTo !== emailSendingMode.SendToSelected
            && selectedTo !== emailSendingMode.SendToSelectedFromHierarchy) {
            setTargetsCount(0);
        } else {
            var obj = {
                emailSendingMode: selectedTo
            };

            Webropol.Shared.Common.callAsync(obj, _urls.getCircularTargetsCountForSummaryUrl, setTargetsCount);
        }
    };

    this.removeFromSelectedRecipientsOnClient = function (resipientsIds) {
        var emailsToDelete = [];
        resipientsIds.forEach(function (elem) {
            var idx = _this.SelectedRecipients().indexOf(elem);
            if (idx != -1) {
                emailsToDelete.push(_this.SelectedRecipientsEmails()[idx]);
            }
        });

        emailsToDelete.forEach(function (elem) {
            _this.SelectedRecipientsEmails.splice(_this.SelectedRecipientsEmails().indexOf(elem), 1);
        });

        _this.SelectedRecipients.removeAll(resipientsIds);
    };

    this.getSelectRecipientsToTitle = function() {
        if (_this.IsReadOnly() || _this.getPublish().EmailRecipients.RecipientsInfo.RecipientsCount() > 0)
            return '';

        var isEvent = _this.getPublish().IsEvent();
        return isEvent
            ? _messages.selectRecipientsToDisableTitleForEvent
            : _messages.selectRecipientsToDisableTitle;
    };

    this.showAddQuestionInEmailDialog = function() {
        Webropol.Shared.Common.callAsync(
            null,
            _urls.getShowQuestionInEmailDetails,
            function (result) {
                var modal = new Webropol.SurveyPublish.ShowQuestionInEmail(_urls, _this);
                modal.init(result);
                modal.showModal();
            }
        );
    };

    this.addAiGeneratedEmailMessage = function () {
        this.isGeneratingMessage(true);
        if (_this.EmailBody().length > 0) {
            ko.shared.showConfirmDialog(
                _messages.aiMessages.confirmationMessage,
                function () {
                    getEmailmessage();                    
                },
                function () { _this.isGeneratingMessage(false) },
                _messages.aiMessages.confirmationHeader,
                _messages.aiMessages.okButton,
                _messages.aiMessages.cancelButton,
                false,
                null,
                false
            );
        }
        else {
            getEmailmessage();
        }        

        function getEmailmessage() {
            Webropol.Shared.Common.callAsync(
            null,
            _urls.getAiAssistedEmail,
            function (result) {
                _this.EmailBody(result);
                _this.isGeneratingMessage(false);
                showHowToHandleAiGeneratedEmailMessages();
            }
            );
        };

        function showHowToHandleAiGeneratedEmailMessages() {
            ko.shared.showConfirmDialog(
                _messages.aiMessages.infoMessage,
                function () { },
                null,
                null,
                _messages.aiMessages.okButton
            );
        }
    }

    this.reloadSendToList = function()
    {
        Webropol.Shared.Common.callAsync(
            null,
            _urls.getEmailSendingModeViewModels, function (result) {
                ko.mapping.fromJS(result, {}, _this.To);
            }
        );
    }
};
;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.SmsMessage = function(urls, messages, publish) {
    var _this = this;
    var _urls = urls;
    var _messages = messages;
    var _isSending = ko.observable(false);
    var _shouldSaveWithNotification = true;

    this.getPublish = function() {
        return publish;
    };

    this.getAutoSaveTimeout = function () {
        return 1;
    };

    this.getBodyAutoSaveTimeout = function () {
        return 5000;
    };

    this.init = function (initialData) {
        ko.mapping.fromJS(initialData, {}, _this);

        if (!_this.SmsBody()) {
            _this.SmsBody("");
        }

        _this.IncludeSurveyLinkMessage = Webropol.Shared.Common.stringFormat(messages.includeSurveyLinkMessage, _this.SurveyLinkLength());

        _this.initializeComputed();
        _this.subscribeOnValuesChanged();
        _this.advancedSettingsIsOpen = ko.observable(_this.SentInDays() || _this.SentCount());
    };

    this.initializeComputed = function () {
        _this.FullSmsBody = ko.computed(function () {
            if (_this.IncludeSurveyLink()) {
                return _this.SmsBody() + " " + Array(_this.SurveyLinkLength()).join('x');
            }
            return _this.SmsBody();
        }).extend({ rateLimit: 1 });

        _this.NumberOfCharacters = ko.computed(function() {
            return _this.FullSmsBody().length;
        }).extend({ rateLimit: 1 });

        _this.CanSelectRecipientsTo = ko.computed(function () {            
            return _this.getPublish().SmsRecipients.RecipientsInfo.RecipientsCount() > 0 && !_this.getPublish().IsReadOnly();
        });

        _this.SmsCost = ko.computed(function () {
            var smsBody = _this.FullSmsBody();
            return Webropol.Common.SmsUtils.calculateInvitationLength(smsBody);
        });

        _this.MessageCostWarning = ko.computed(function () {
            var smsBody = _this.FullSmsBody();
            var countOfParts = Webropol.Common.SmsUtils.calculateInvitationLength(smsBody);
            var partLength = Webropol.Common.SmsUtils.messagePartLength(smsBody);

            return Webropol.Shared.Common.stringFormat(messages.numberOfCharactersPerCreditAndNumberOfRequiredCreditsPerMessage, partLength, 1, countOfParts);
        }).extend({ rateLimit: 1 });

        _this.IsSenderNameEmpty = ko.computed(function () {
            return _this.Sender().trim() === "";
        });

        _this.IsSenderNameTooLong = ko.computed(function () {
            //todo: get from server
            var senderNameLimit = 11;
            return _this.Sender().length > senderNameLimit;
        });

        _this.IsSenderNameContainsIncorrectCharacters = ko.computed(function () {
            var pattern = new RegExp("[^a-zA-Z0-9 ]");
            var result = pattern.test(_this.Sender());
            return result;
        });

        _this.GetSenderWarning = ko.computed(function () {
            if (_this.IsSenderNameEmpty())
                return _messages.senderNameEmptyWarning;
            if (_this.IsSenderNameTooLong())
                return _messages.senderNameTooLongWarning;
            if (_this.IsSenderNameContainsIncorrectCharacters())
                return _messages.senderNameContainsIncorrectCharactersWarning;
            return null;
        });

        _this.CanSendSurvey = ko.computed(function () {
            if (_this.getPublish().IsReadOnly() || _isSending()) {
                return false;
            }
            var fullSmsBody = _this.FullSmsBody();

            if (_this.UseNotSendingSmsPeriod()) {
                if (!_this.NotSendingSmsPeriodStartTime() || !_this.NotSendingSmsPeriodFinishTime()) {
                    return false;
                }
            }

            return fullSmsBody.length
                && fullSmsBody.trim() !== ""
                && _this.SelectedTo() !== Webropol.Constants.SurveyPublish.EmailSendingMode.Stub
                && !_this.NotEnoughCreditsWarningVisibility()
                && _this.SmsRecipientsCount() > 0
                && (_this.DirectSurveyLayoutSettingStatus() || !_this.getPublish().IsDirectSurvey())
                && !_this.IsSenderNameEmpty()
                && !_this.IsSenderNameTooLong()
                && !_this.IsSenderNameContainsIncorrectCharacters()
                && !_this.IsSentCountAmountInValid()
                && !_this.IsSentInDaysLimitInValid();
        });

        _this.AllSmsRecipients = ko.computed(function() {
            var publish = _this.getPublish();
            if (publish.SmsRecipients && publish.SmsRecipients.RecipientGrid) {
                var recipientsInfoRow = publish.SmsRecipients.RecipientGrid.Items();
                return ko.utils.arrayFilter(recipientsInfoRow, function (recipient) {
                    return recipient.Mobile();
                });
            }

            return [];
        }).extend({ rateLimit: 1 });

        _this.AllSmsRecipientsCount = ko.computed(function() {
            return _this.AllSmsRecipients().length;
        });

        _this.TotalNumberOfCredits = ko.computed(function() {
            return _this.SmsRecipientsCount() * _this.SmsCost();
        });

        _this.AvailableCredits = ko.computed(function() {
            return _this.AvailableSmsCount();
        });

        _this.NotEnoughCreditsWarningVisibility = ko.computed(function() {
            return _this.AvailableCredits() < _this.TotalNumberOfCredits();
        });

        _this.CreditBalanceAfterSending = ko.computed(function() {
            var result = _this.AvailableCredits() - _this.TotalNumberOfCredits();
            if (result < 0) {
                return "-";
            }
            return result;
        });

        _this.SendingNotifyMessage = ko.computed(function() {
            return Webropol.Shared.Common.stringFormat(messages.youAreAboutToSendSmsToRecipients, _this.SmsRecipientsCount(), _this.TotalNumberOfCredits());
        });

        _this.CanShowRecipientsGrid = ko.computed(function () {
            return _this.SelectedTo() === Webropol.Constants.SurveyPublish.EmailSendingMode.SendToSelected && _this.SelectedRecipients().length > 0;
        });

        _this.CanShowRecipientsHierarchyGrid = ko.pureComputed(function () {
            return false;
        });

        _this.IsSentInDaysLimitInValid = ko.pureComputed(function () {
            return _this.SentInDays() && (!_this.SentInDaysLimit() || _this.SentInDaysLimit() == 0);
        });

        _this.IsSentCountAmountInValid = ko.pureComputed(function () {
            return _this.SentCount() && (!_this.SentCountAmount() || _this.SentCountAmount() == 0);
        });

        _this.MaxSmsMessageLength = ko.pureComputed(function() {
                var smsBody = _this.FullSmsBody();
                var partLength = Webropol.Common.SmsUtils.messagePartLength(smsBody);
                return partLength * Webropol.Common.SmsUtils.maxCountOfPartsInSms;
            })
            .extend({ rateLimit: 1 });

        _this.ReachedMaximumSmsMessageLength = ko.computed(function() {
            return _this.NumberOfCharacters() >= _this.MaxSmsMessageLength();
        }).extend({ rateLimit: 1 });
    };

    this.subscribeOnValuesChanged = function () {
        _this.SelectedTo.subscribe(function (newValue) {
            _this.updateSmsRecipientsCount();

            var selectedTo = _this.SelectedTo();
            if (selectedTo === Webropol.Constants.SurveyPublish.EmailSendingMode.SendToSelected) {
                _this.showRecipientsGridPopup();
            }
        });
    };

    this.updateSmsRecipientsCount = function () {
        var selectedTo = _this.SelectedTo();
        switch (selectedTo) {
            case Webropol.Constants.SurveyPublish.EmailSendingMode.Stub:
                _this.SmsRecipientsCount(0);
                break;
            case Webropol.Constants.SurveyPublish.EmailSendingMode.SendToSelected:
                _this.SmsRecipientsCount(_this.SelectedRecipients().length);
                break;
            default:
                Webropol.Shared.Common.callAsync(
                    JSON.stringify({ smsSendingMode: selectedTo }),
                    _urls.getSmsRecipientsCount,
                    function (result) {
                        _this.SmsRecipientsCount(result);
                    });
        }
    };

    this.getSelectRecipientsToTitle = function () {
        if (_this.getPublish().IsReadOnly() || _this.getPublish().SmsRecipients.RecipientsInfo.RecipientsCount() > 0)
            return '';

        var isEvent = _this.getPublish().IsEvent();
        return isEvent
            ? _messages.selectRecipientsToDisableTitleForEvent
            : _messages.selectRecipientsToDisableTitle;
    };

    this.showRecipientsGridPopup = function () {
        if (_this.getPublish().SmsRecipients.AreRecipentsUploading()) {
            return;
        }

        var recipientGridFetchData = {
            data: {},
            url: _urls.getRecipientGridsViewModelForSmsInvitation,
            loadDataUrl: _urls.getRecipientInvitationSmsGrid,
            template: "recipient-sms-grid-template"
        };
        var surveyId = _this.getPublish().Id();

        var recipientsGrid = new Webropol.SurveyPublish.EmailMessage.RecipientsGrid(_urls, _messages, recipientGridFetchData, _this.onRecipientsApply, _this.onRecipientsCancel, surveyId);
        recipientsGrid.showRecipientsGrid();
    };

    var resetSelectedTo = function () {
        _this.SelectedTo(Webropol.Constants.SurveyPublish.EmailSendingMode.Stub);
    };

    var resetSelectedToWithoutNotification = function () {
        _shouldSaveWithNotification = false;
        _this.SelectedTo(Webropol.Constants.SurveyPublish.EmailSendingMode.Stub);
    };

    this.onRecipientsApply = function (recipientIds, recipientGroupIds) {
        var surveyId = _this.getPublish().Id();

        var obj = {
            recipientIds: recipientIds,
            recipientGroupIds: recipientGroupIds,
            surveyId: surveyId
        };
        var viewModel = ko.mapping.toJSON(obj);
        Webropol.Shared.Common.callAsync(
            viewModel,
            _urls.applySelectedSmsRecipients,
            function (result) {
                _this.SelectedRecipients.removeAll();

                if (recipientIds.length === 0 && recipientGroupIds.length === 0) {
                    resetSelectedTo();
                } else {
                    result.ExtraData.ResultList.forEach(function (elem) {
                        if (_this.SelectedRecipients().indexOf(elem.RecipientId) === -1) {
                            _this.SelectedRecipients.push(elem.RecipientId);
                        }
                    });
                    _this.updateSmsRecipientsCount();
                }

                Webropol.Common.showSuccessMessage(result);
            }
        );
    };

    this.onRecipientsCancel = function () {
        if (_this.SelectedRecipients().length === 0) {
            resetSelectedTo();
        }
    };

    this.onSendSurvey = function () {
        _this.getPublish().handleSendSurvey(_this);
    };

    this.publishSurveyAction = function () {
        if (_isSending()) {
            return;
        }
        
        var surveyPublishViewModel = _this.getPublish();
        if (surveyPublishViewModel.IsPublicOrBoth()) {
            surveyPublishViewModel.CollectingMethod.PublishTypeSelected(Webropol.Constants.SurveyPublish.SelectedPublishType.Both);
        } else {
            surveyPublishViewModel.CollectingMethod.PublishTypeSelected(Webropol.Constants.SurveyPublish.SelectedPublishType.Private);
        }

        _this.sendSurvey(function () {
            if (!surveyPublishViewModel.IsPrivateOrBoth()) {
                surveyPublishViewModel.IsSuspendedPrivate(false);
            }

            surveyPublishViewModel.Workflow.Reporting.Disabled(false);
            surveyPublishViewModel.Workflow.Followup.Disabled(false);
            surveyPublishViewModel.Workflow.ManageEventParticipants.Disabled(false);
            surveyPublishViewModel.Workflow.Analysis.Disabled(false);

            if (!surveyPublishViewModel.IsCircularSurvey()) {
                surveyPublishViewModel.SmsRecipients.refreshRecipientsGrid();
            }

            resetSelectedToWithoutNotification();
        });
    };

    var sendSurveyInternal = function (onSuccess, sendSurveyAction) {
        sendSurveyAction(onSuccess, null, false);
    };

    var getSendingViewModel = function() {
        var mapping = {
            ignore: ["BuyMoreCreditsLink", "To", "AvailableSmsCount"]
        };
        
        return ko.mapping.toJS(_this, mapping);
    };

    this.sendSurvey = function (onSuccess) {
        sendSurveyInternal(onSuccess, _this.sendSurveyData);
    };

    this.sendSurveyData = function (onSuccess, onError, hideSpinner) {
        _isSending(true);
        
        var viewModel = getSendingViewModel();
        
        Webropol.Shared.Common.callAsync(
            viewModel,
            _urls.sendSmsSurveyUrl,
            function (result) {
                ko.shared.showPopupFromTemplate("send-survey-result-template", result.ExtraData, null, _urls.getSendSurveyResultTemplate);
                if (typeof (onSuccess) == 'function') {
                    onSuccess();
                }
            }, 
            onError, 
            function () {
                _isSending(false);
            }, 
            hideSpinner);
    };

    this.onBindingComplete = function() {
        var autosavables = [
            _this.SelectedTo,
            _this.IncludeSurveyLink,
            _this.SentInDays,
            _this.SentInDaysLimit,
            _this.SentCount,
            _this.SentCountAmount,
            _this.UseNotSendingSmsPeriod,
            _this.NotSendingSmsPeriodStartTime,
            _this.NotSendingSmsPeriodFinishTime
        ];
        
        for (var i = 0; i < autosavables.length; i++) {
            ko.autoSaveObservable(autosavables[i], null, _this.getAutoSaveTimeout(), _this.autoSave);
        }

        ko.autoSaveObservable(_this.SmsBody, null, _this.getBodyAutoSaveTimeout(), _this.autoSave);

        if (_this.Sender().length > 0) {
            ko.autoSaveObservable(_this.Sender, null, _this.getBodyAutoSaveTimeout(), _this.autoSave);
        }
    };

    this.autoSaveInternal = function (onSuccess, isTimer, observable) {
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON(_this),
            _urls.saveSmsSettingsUrl,
            function (data) {
                if (_shouldSaveWithNotification) {
                    Webropol.Common.showSuccessMessage(data, observable);
                }
                _shouldSaveWithNotification = true;
                _this.updateSmsRecipientsCount();
                if (typeof onSuccess === 'function') {
                    onSuccess();
                }
            }
        );
    };

    this.autoSave = $.debounce(100, true, _this.autoSaveInternal);
};;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.SmsSurveyPublish = function (urls, messages, publish) {
    var _this = this;
    var _urls = urls;

    this.getPublish = function () {
        return publish;
    };

    this.init = function (initialData) {
        ko.mapping.fromJS(initialData, {}, _this);
    };

    this.publishSmsSurvey = function (i) {
        var data = {
            PublishTypeSelected: Webropol.Constants.SurveyPublish.SelectedPublishType.Private,
            SurveyId: _this.getPublish().Id(),
            SmsSettingId: i.id()
        };
        

        Webropol.Shared.Common.callAsync(
            JSON.stringify(data),
            _urls.surveyPublishUrl,
            function () {
                location.reload();
            });
    }

    this.closeSmsSurvey = function () {

        var data = {
            SelectedPublishType: Webropol.Constants.SurveyPublish.SelectedPublishType.Private,
            SurveyId: _this.getPublish().Id()
        };

        Webropol.Shared.Common.callAsync(
            JSON.stringify(data),
            _urls.closeSurveyUrl,
            function () {
                location.reload();
            });
    }
};;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.Approval = function (urls, messages, parent) {
    var _this = this;
    var _urls = urls;
    var _messages = messages;

    this.getParent = function () {
        return parent;
    };

    this.init = function (initialData) {
        var mapping = {
        };

        ko.mapping.fromJS(initialData, mapping, _this);
        _this.initializeComputed();
    };

    this.initializeComputed = function () {
        _this.canSendRequest = ko.pureComputed({
            read: function () {
                return _this.RequestEmailMessage().length > 0;
            },
            deferEvaluation: true
        });
    };

    this.onSendApprovalRequestClick = function () {
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON(_this),
            _urls.publisApproval.sendApprovalRequestUrl,
        function (data) {

            _this.SendRequestBtn(_messages.publisApproval.resendRequest);

            ko.shared.notifySuccess(_this, data.Message);
        });
    };

    this.approveOrRejectSurveyPublishRequestClick = function() {
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON(_this),
            _urls.approveOrRejectSurveyPublishRequestUrl,
            function(data) {

                _this.getParent().IsNeedToBeApproveBeforePublish(false);
                ko.shared.notifySuccess(_this, data.Message);
            });
    };
};;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.CollectAnswers.OwnPublicLink = function (urls) {
    var _this = this;
    var _urls = urls.ownPublicLink;

    _this.Mode = ko.observable(null);
    _this.PreviousMode = ko.observable(null);
    _this.LinkParamEdit = ko.observable(null);
    _this.IsLinkParamInUse = ko.observable(false);
    _this.DeleteOwnLinkConfirmed = ko.observable(false);
    _this.EditOwnLinkConfirmed = ko.observable(false);

    var modes = {
        View: 0,
        Create: 1,
        Edit: 2
    };

    this.init = function (initialData) {
        ko.mapping.fromJS(initialData, {}, _this);

        var currentMode = initialData.LinkParam ? modes.View : modes.Create;

        _this.Mode(currentMode);

        _this.initializeComputed();
        _this.initializeSubscribe();
    };

    this.initializeComputed = function () {
        _this.OwnWebLink = ko.pureComputed(function () {
            return _this.LinkRoot() + _this.LinkParam();
        });

        _this.IsCreateMode = ko.pureComputed(function () {
            return _this.Mode() === modes.Create;
        });

        _this.IsEditMode = ko.pureComputed(function () {
            return _this.Mode() === modes.Edit;
        });

        _this.IsViewMode = ko.pureComputed(function () {
            return _this.Mode() === modes.View;
        });

        _this.IsValidFormat = ko.pureComputed(function () {
            var alphaNumericFormat = /[^a-z0-9-]/gi;

            return !alphaNumericFormat.test(_this.LinkParamEdit());
        });

        _this.canSave = ko.pureComputed(function () {
            return _this.LinkParamEdit() &&
                _this.IsValidFormat() &&
                _this.LinkParamEdit() !== _this.LinkParam() &&
                !_this.IsLinkParamInUse();
        });
    };

    this.initializeSubscribe = function () {
        _this.LinkParamEdit.subscribe(function (newValue) {
            if (_this.IsEditMode() && _this.IsValidFormat()) {
                _this.checkIfOwnPublicLinkIsInUse();
            } else {
                _this.IsLinkParamInUse(false);
            }
        });
    };

    this.onCreateClick = function () {
        _this.startEdit();
    };

    this.onEditClick = function () {
        _this.LinkParamEdit(_this.LinkParam());

        _this.startEdit();
    };

    this.onDeleteClick = function () {
        _this.DeleteOwnLinkConfirmed(false);

        ko.shared.showPopupFromTemplate("delete-own-weblink-template", _this);
    };

    this.onSaveClick = function () {
        if (_this.LinkParam()) {
            _this.EditOwnLinkConfirmed(false);

            ko.shared.showPopupFromTemplate("edit-own-weblink-template", _this);
        } else {
            _this.editLink();
        }
    };

    this.onCancelClick = function () {
        _this.Mode(_this.PreviousMode());
    };

    this.startEdit = function () {
        _this.PreviousMode(_this.Mode());
        _this.Mode(modes.Edit);
    };

    this.editLink = function () {
        var params = { linkParam: _this.LinkParamEdit() };

        Webropol.Shared.Common.callAsync(
            JSON.stringify(params),
            _urls.save,
            function (data) {
                ko.shared.notifySuccess(_this, data.Message);
                _this.Mode(modes.View);
                _this.LinkParam(_this.LinkParamEdit());
            });
    };

    this.deleteLink = function () {
        Webropol.Shared.Common.callAsync(
            null,
            _urls.delete,
            function (data) {
                ko.shared.notifySuccess(_this, data.Message);
                _this.LinkParam(null);
                _this.Mode(modes.Create);
            });
    };

    _this.checkIfOwnPublicLinkIsInUse = function () {
        var params = { linkParam: _this.LinkParamEdit() };

        if (!params.linkParam) {
            return false;
        }

        Webropol.Shared.Common.callAsync (
            JSON.stringify(params),
            _urls.isInUse,
            function (data) {
                _this.IsLinkParamInUse(data);
            });
    };
};;
var Webropol = Webropol || {};
Webropol.Shared = Webropol.Shared || {};

Webropol.Shared.Schedule = function () {
    var _this = this;
    var _userTimeZoneOffset = 0;

    this.init = function (initialData) {
        _userTimeZoneOffset = initialData.UserTimeZoneOffset;

        _this.updateModel(initialData);

        _this.initComputed();
        _this.initSubscribers();

        initValidSettings();
        recalculateValidSettings();
    };

    this.updateModel = function (initialData) {
        ko.mapping.fromJS(initialData, {}, _this);
    };

    this.initComputed = function () {
        _this.DisableEndDate = ko.computed(function () {
            return (_this.StartDate() == null);
        });
    };

    this.initSubscribers = function () {
        _this.Frequency.subscribe(function (value) {
            recalculateValidSettings();
        });

        _this.StartDate.subscribe(function (value) {
            recalculateValidSettings();
        });

        _this.Weekday.subscribe(function (value) {
            recalculateValidSettings();
        });

        _this.DayOfMonth.subscribe(function (value) {
            if (value != null) {
                if (value == 0) {
                    _this.DayOfMonth(1);
                } else if (value > 31) {
                    _this.DayOfMonth(31);
                }
                recalculateValidSettings();
            }
        });

        _this.SendLastDayOfMonth.subscribe(function (newValue) {
            if (newValue) {
                _this.DayOfMonth(null);
            }
            recalculateValidSettings();
        });
    };

    this.addDate = function () {
        var newItem = ko.shared.copy(_this.DateTimeItems()[_this.DateTimeItems().length - 1]);
        newItem.Id(Webropol.Shared.Common.guidEmpty);
        _this.DateTimeItems.push(newItem);
    };

    this.removeDate = function (item) {
        _this.DateTimeItems.remove(item);
    };

    this.IsValid = ko.computed(function () {
        switch (_this.Frequency()) {
            case Webropol.Constants.Schedule.FrequencyType.Once:
            case Webropol.Constants.Schedule.FrequencyType.SpecifiedDates:
                var isValid = true;
                ko.utils.arrayForEach(_this.DateTimeItems(), function (dateTimeItem) {
                    isValid = isValid && (dateTimeItem.Date() != null) && (dateTimeItem.Time() != null);
                });
                return isValid;

            case Webropol.Constants.Schedule.FrequencyType.Daily:
            case Webropol.Constants.Schedule.FrequencyType.Weekly:
                return (_this.StartDate() != null) && (_this.EndDate() != null) && (_this.EndDate() >= _this.StartDate());

            case Webropol.Constants.Schedule.FrequencyType.Monthly:
                if ((_this.StartDate() == null) || (_this.EndDate() == null) || (_this.EndDate() < _this.StartDate())) {
                    return false;
                }
                if (!_this.SendLastDayOfMonth() && _this.DayOfMonth() == null) {
                    return false;
                }
                return true;

            default:
                return false;
        }
    });

    function initValidSettings () {
        _this.ValidSettings = {
            StartDateSettings: {
                ValidStartDate: ko.observable(null),
                ValidEndDate: null
            },
            EndDateSettings: {
                ValidStartDate: ko.observable(null),
                ValidEndDate: null
            }
        };
    }

    function recalculateValidSettings () {
        if ((_this.Frequency() == Webropol.Constants.Schedule.FrequencyType.Once) ||
            (_this.Frequency() == Webropol.Constants.Schedule.FrequencyType.SpecifiedDates)) {
            setOnceValidSettings();
        } else {
            setReoccurenceValidSettings();
        }
    }

    function setOnceValidSettings () {
        var validStartDate = getValidStartDate();
        _this.ValidSettings.StartDateSettings.ValidStartDate(validStartDate);
    }

    function setReoccurenceValidSettings () {
        var validStartDateForFirstPicker = getValidStartDateForFirstPicker();
        var validStartDateForSecondPicker = getValidStartDateForSecondPicker();

        if (_this.StartDate() != null) {
            var startDate = new Date(_this.StartDate());

            switch (_this.Frequency()) {
                case Webropol.Constants.Schedule.FrequencyType.Weekly:
                    var startDateWeekday = startDate.getDay();
                    var inc = (7 - startDateWeekday + _this.Weekday()) % 7;
                    validStartDateForSecondPicker.setDate(startDate.getDate() + inc);
                    break;

                case Webropol.Constants.Schedule.FrequencyType.Monthly:
                    if (_this.SendLastDayOfMonth()) {
                        validStartDateForSecondPicker.setMonth(startDate.getMonth() + 1, 0);
                    } else {
                        var dayOfMonth = parseInt(_this.DayOfMonth(), 10);
                        if (dayOfMonth) {
                            validStartDateForSecondPicker = startDate;
                            while (true) {
                                var currentMonth = validStartDateForSecondPicker.getMonth();
                                validStartDateForSecondPicker.setDate(dayOfMonth);
                                var updatedMonth = validStartDateForSecondPicker.getMonth();
                                if (updatedMonth == currentMonth) {
                                    break;
                                }
                            }
                        }
                        break;
                    }
            }
        }

        _this.ValidSettings.StartDateSettings.ValidStartDate(validStartDateForFirstPicker);
        _this.ValidSettings.EndDateSettings.ValidStartDate(validStartDateForSecondPicker);
    }

    function getValidStartDate () {
        var minAllowedDate = getMinAllowedDate();
        return new Date(minAllowedDate.getTime() + 1 * 60 * 1000); //+1 min fix
    }

    function getValidStartDateForFirstPicker() {
        var minAllowedDate = getMinAllowedDate();
        return new Date(minAllowedDate.toDateString());
    }

    function getValidStartDateForSecondPicker() {
        var minAllowedDate = Webropol.Shared.Common.getDateTimeNow(_userTimeZoneOffset);
        var resultDate = new Date(minAllowedDate.toDateString());
        if (_this.StartDate() > resultDate) {
            resultDate = new Date(_this.StartDate());
        }
        return resultDate;
    }

    function getMinAllowedDate() {
        var dtNowWithClientOffset = Webropol.Shared.Common.getDateTimeNow(_userTimeZoneOffset);
        dtNowWithClientOffset.setSeconds(0);
        dtNowWithClientOffset.setMilliseconds(0);
        return dtNowWithClientOffset;
    }
}

;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.Scheduling = function(urls, messages, publish) {
    var _this = this;
    var _urls = urls;
    var _messages = messages;
    var _publish = publish;    

    var createSchedulingReminder = function(reminderData)
    {
        var newReminder = new Webropol.SurveyPublish.SchedulingReminder(_urls, _messages, _this, publish);
        newReminder.init(reminderData);
        return newReminder;
    }

    this.IsReadOnly = function() {
        return _publish.IsReadOnly();
    };

    this.getPublish = function () {
        return publish;
    };

    this.init = function(initialData) {
        var mapping = {
            'ActiveReminders': {
                create: function(ctx) {
                    var s = createSchedulingReminder(ctx.data);
                    return s;
                }
            },
            'PastReminders': {
                create: function (ctx) {
                    var s = createSchedulingReminder(ctx.data);
                    return s;
                }
            },
            'TemplateReminders': {
                create: function (ctx) {
                    var s = createSchedulingReminder(ctx.data);
                    return s;
                }
            }
        };

        ko.mapping.fromJS(initialData, mapping, _this);
        _this.initializeComputed();
    };

    this.initializeComputed = function () {
        _this.IsSetAnyReminder = ko.pureComputed({
            read: function () {
                const reminders = ko.utils.arrayFilter(_this.ActiveReminders(), function (rm) {
                    return rm.IsSMS() == false;
                });
                var firstSettedTask = ko.utils.arrayFirst(reminders, function (rem) {
                    return rem.IsSet();
                });

                return firstSettedTask != null;
            },
            deferEvaluation: true
        });

        _this.IsSetAnyReminderPast = ko.pureComputed({
            read: function () {
                const reminders = ko.utils.arrayFilter(_this.PastReminders(), function (rm) {
                    return rm.IsSMS() == false;
                });
                var firstSettedTask = ko.utils.arrayFirst(reminders, function (rem) {
                    return rem.IsSet();
                });

                return firstSettedTask != null;
            },
            deferEvaluation: true
        });

        _this.IsSetAnyPrivateReminderText = ko.pureComputed({
            read: function () {
                return _this.IsSetAnyReminder()
                    ? _messages.yes
                    : _messages.no;
            },
            deferEvaluation: true
        });
    };

    this.onBindingComplete = function () {
        if (ko.isObservable(_this.ActiveReminders)) {
            ko.utils.arrayForEach(_this.ActiveReminders(), function (item) {
                item.onBindingComplete();
            });
        }

        if (ko.isObservable(_this.ActiveReminders)) {
            ko.utils.arrayForEach(_this.TemplateReminders(), function (item) {
                item.onBindingComplete();
            });
        }        
    };    

    this.onDeleteReminder = function (reminder) {
        ko.shared.showPopupFromTemplate("scheduling-delete-reminder-template", reminder);
    };

    this.showSchedulingPopup = function (reminderType) {
        var reminders = _this.TemplateReminders();        
        var reminder = ko.utils.arrayFirst(reminders, function (reminder) {
            return reminder.RegionType() === reminderType;
        });

        reminder.onSchedulingOverviewClick(true);
    };

    this.hideModal = function () {
        Webropol.Shared.Common.closeAllPopups();
    }

    this.IsEvent = function() {
        return _this.getPublish().IsEvent();
    }

    this.appendNewReminder = function (newReminderData) {
        var newReminder = createSchedulingReminder(newReminderData);
        this.ActiveReminders.push(newReminder);
    }

    this.removeReminderFromList = function(reminder) {
        this.ActiveReminders.remove(reminder);
    }    
};;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.SchedulingReminder = function(urls, messages, scheduling, publish) {
    var _this = this;
    var _urls = urls;
    var _messages = messages;
    var _publish = publish;
    var _reminderPopupLastState = null;

    this.getScheduling = function () {
        return scheduling;
    };

    this.EmailMessage = _publish.EmailMessage;

    this.init = function (initialData) {
        var mapping = {
            'ScheduleSettings': {
                create: function (ctx) {
                    var scheduling = new Webropol.Shared.Schedule();
                    scheduling.init(ctx.data);
                    return scheduling;
                }
            },
            'ReminderMessage': {
                create: function (options) {                    
                    var t = new Webropol.SurveyPublish.SchedulingRemindMessage(_urls, _messages, _this);
                    Webropol.Common.EmailTemplateSaver.call(t, _urls);
                    t.init(options.data);
                    return t;
                }
            }
        };

        ko.mapping.fromJS(initialData, mapping, _this);

        _this.templateIsOpened = ko.observable(false);

        _this.initComputed();
        _this.initSubscribers();

        _this.lastUnsavedTask = null;
    };

    this.initComputed = function() {
        _this.IsReadOnly = ko.computed(function () {
            return scheduling.IsReadOnly();
        });

        _this.IsPublicReminder = ko.computed(function() {
            var regionType = _this.RegionType();
            
            return (regionType == Webropol.Constants.SurveyPublish.ScheduledTaskType.MakeSurveyPublic) ||
                (regionType == Webropol.Constants.SurveyPublish.ScheduledTaskType.PauseSurveyPublic);
        });

        _this.IsPrivateReminder = ko.computed(function () {
            var regionType = _this.RegionType();
            
            return (regionType == Webropol.Constants.SurveyPublish.ScheduledTaskType.MakeSurveyPrivate) ||
                (regionType == Webropol.Constants.SurveyPublish.ScheduledTaskType.PauseSurveyPrivate) ||
                (regionType == Webropol.Constants.SurveyPublish.ScheduledTaskType.SendInvitation) ||
                (regionType == Webropol.Constants.SurveyPublish.ScheduledTaskType.SendReminder) ||
                (regionType == Webropol.Constants.SurveyPublish.ScheduledTaskType.SendThankYouPrivate);
        });

        _this.CanSave = ko.computed(function () {
            if (!_this.ScheduleSettings.IsValid()) {
                return false;
            }

            return _this.ReminderMessage.CanSave();
        });
        
        _this.CanPreviewEmailMessage = ko.pureComputed(function () {
            return _this.ReminderMessage.IsValidEmailBody();
        });

        _this.IsSet = ko.computed(function () {
            return _this.NextOccurenceDateTimeString() != null;
        });

        _this.NextRunDate = ko.computed(function () {
            return _this.NextOccurenceDateTimeString() || _messages.noSchedule;
        });

        _this.NextDateDescription = ko.computed(function () {
            var frequencyType = Webropol.Constants.Schedule.FrequencyType;
            return _this.ScheduleSettings.Frequency() == frequencyType.Once || _this.ScheduleSettings.Frequency() == frequencyType.SpecifiedDates
                ? _this.NextRunDate()
                : _this.NextOccurenceMainDescription();
        });

        _this.NextOccurenceMainDescriptionForSummary = ko.computed(function () {
            return _this.NextOccurenceMainDescription()
                ? _this.NextOccurenceMainDescription()
                    .replace(/col-md-4/g, 'col-md-6')
                    .replace(/col-md-8/g, 'col-md-6')
                : '';
        });

    };

    this.initSubscribers = function () {
    };

    this.onBindingComplete = function () {
        _this.ReminderMessage.onBindingComplete();
    };

    this.saveLastState = function() {
        _reminderPopupLastState = ko.mapping.toJS(_this);
        if (_this.ReminderMessage) {
            _this.ReminderMessage.saveLastState();
        }
    };

    this.restoreLastState = function () {
        ko.mapping.fromJS(_reminderPopupLastState, {}, _this);
        if (_this.ReminderMessage) {
            _this.ReminderMessage.restoreLastState(_reminderPopupLastState.ReminderMessage);
        }
    };

    var saveChanges = function (onSuccess, onError, hideSpinner) {
        var option = {
            'ignore': ["RecipientGroupsGrid"]
        };

        var reminderToSend = ko.mapping.toJS(_this, option);

        var existingAttachmentFileNames = ko.utils.arrayMap(_this.ReminderMessage.EmailTemplateAttachments(), function (existingAttachment) {
            return existingAttachment.FileName;
        });

        reminderToSend.ReminderMessage.AttachedFileNames = existingAttachmentFileNames.concat(_this.ReminderMessage.AttachedFileNames() || []);


        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON(reminderToSend),
            _urls.saveSchedulingReminder,            
            function (data) {
                if (typeof (onSuccess) == 'function') {
                    onSuccess();
                }

                if (data.ErrorCode === Webropol.Constants.Common.ErrorCode.Ok) {
                    scheduling.hideModal();

                    if (_this.templateIsOpened()) {
                        _this.getScheduling().appendNewReminder(data.ExtraData);
                        _this.restoreLastState();
                    } else {
                        ko.mapping.fromJS(data.ExtraData, {}, _this);
                        _this.saveLastState();
                    }

                    _this.templateIsOpened(false);

                    _publish.Workflow.Reporting.Disabled(false);
                    _publish.Workflow.Followup.Disabled(false);
                    _publish.Workflow.ManageEventParticipants.Disabled(false);

                    ko.shared.notifySuccess(_this, data.Message);
                }
                else if (data.ErrorCode === Webropol.Constants.Common.ErrorCode.Error) {
                    ko.shared.notifyError(_this, data.Message);
                }
            },
            onError,
            null,
            hideSpinner
        );
    };

    var showSchedulingPopup = function (isTemplate) {
        _this.templateIsOpened(isTemplate);
        _this.saveLastState();
        ko.shared.showPopupFromTemplate("scheduling-reminder-template", _this, null, null, {}, _this.onCancelChanges);
    };

    this.onSchedulingOverviewClick = function (isTemplate) {        
        showSchedulingPopup(isTemplate);
    };

    this.onCancelChanges = function () {
        //revert state to the last one 
        _this.restoreLastState();
    };

    this.onSaveChangesClick = function () {
        //Commented according to ARC-1322
        //if (_this.RegionType() === Webropol.Constants.SurveyPublish.ScheduledTaskType.SendInvitation &&
        //    _this.getScheduling().getPublish().IsCircularSurvey()) {
        //    _this.showAssessmentAggrement();
        //} else {
        //    _this.onSaveChangesClickInternal();
        //}

        if (_this.RegionType() === Webropol.Constants.SurveyPublish.ScheduledTaskType.SendInvitation &&
            _this.getScheduling().getPublish().IsCircularSurvey()) {
            _this.onSaveChangesClickWithAcceptAgreement();
        } else {
            _this.onSaveChangesClickInternal();
        }
    };

    var saveScheduleTaskInternal = function (onSuccess, saveScheduleTaskAction) {

        if (!_this.ReminderMessage.isAttachedFiles()) {
            _this.ReminderMessage.AttachedFileNames(null);
            saveScheduleTaskAction(onSuccess, null, false);
        }
        else {
            var sendAttachmentsThenPublish = function(deferred) {
                var form = _this.getSendAttachedFilesForm();

                var onSuccessMultiple = function() {
                    if (typeof (onSuccess) == 'function') { 
                        onSuccess();
                    }
                    deferred.resolve();
                };

                var onErrorMultiple = function() {
                    deferred.reject();
                };

                var onAttachesSent = function(result) {
                    var jsonResult = JSON.parse(result);
                    _this.ReminderMessage.AttachedFileNames(jsonResult.attachedFileNames);
                    saveScheduleTaskAction(onSuccessMultiple, onErrorMultiple, true);
                };

                Webropol.Shared.Common.callAjaxSubmit($(form),{
                    url: form.action,
                    success: onAttachesSent,
                    error: onErrorMultiple
                }, true);
            };

            var hideSpinner = !_publish.IsPublished();
            Webropol.Shared.Common.callMultipleAjax(sendAttachmentsThenPublish, hideSpinner);
        }
    };

    this.onSaveChangesClickInternal = function() {
        saveScheduleTaskInternal(null, _this.onSaveChangesIntenal);
    };

    this.onSaveChangesIntenal = function(onSuccess, onError, hideSpinner) {
        _this.IsActive(true);

        var regionType = _this.RegionType();
        if (regionType == Webropol.Constants.SurveyPublish.ScheduledTaskType.MakeSurveyPublic
            || regionType == Webropol.Constants.SurveyPublish.ScheduledTaskType.PauseSurveyPublic) {

            function onSubmitPublic() {
                saveChanges(onSuccess, onError, hideSpinner);

                var isWasSuspended = (publish.IsPublished() && !publish.IsPrivate()) ||
                    (publish.IsPublished() && publish.IsBoth());

                publish.IsPublicOrBoth.pause();

                //Check, if already have private publish
                if (publish.IsPublished() && publish.IsPrivate()) {
                    publish.IsBoth(true);
                    publish.IsPrivate(false);
                }

                publish.IsPublished(true);
                if (!publish.IsSuspended()) {
                    publish.IsSuspended(!isWasSuspended);
                }

                publish.IsPublicOrBoth.resume();
            }
            if (!publish.IsPublished()) {
                var firstPublicPublishInitialData = {
                    SelectedPublishType: Webropol.Constants.SurveyPublish.SelectedPublishType.Public,
                    header: _messages.firstPublishHeaderForScheduling,
                    mainNotification: _messages.firstPublishPublicLinkNoteForScheduling,
                    submitButtonText: _messages.firstPublishSubmitButtonForScheduling,
                    submitAction: onSubmitPublic,
                    showSpamWarning: ko.observable(false)
                };
                new Webropol.SurveyPublish.CollectAnswers.FirstPublish(urls, messages, publish).init(firstPublicPublishInitialData).showModal();
            }
            else {
                onSubmitPublic();
            }
        }
        else if (regionType == Webropol.Constants.SurveyPublish.ScheduledTaskType.MakeSurveyPrivate
            || regionType == Webropol.Constants.SurveyPublish.ScheduledTaskType.PauseSurveyPrivate
            || regionType == Webropol.Constants.SurveyPublish.ScheduledTaskType.SendInvitation) {

            function onSubmit() {
                saveChanges(onSuccess, onError, hideSpinner);

                var isWasSuspended = (publish.IsPublished() && publish.IsPrivate()) ||
                    (publish.IsPublished() && publish.IsBoth() && !publish.IsPrivate());

                publish.IsPublicOrBoth.pause();

                //Check, if already have public publish
                if (publish.IsPublished() && publish.IsBoth()) {
                    publish.IsBoth(true);
                    publish.IsPrivate(false);
                } else {
                    publish.IsPublished(true);
                    publish.IsPrivate(true);
                    publish.IsBoth(false);
                }

                publish.IsPublished(true);
                if (!publish.IsSuspendedPrivate()) {
                    publish.IsSuspendedPrivate(!isWasSuspended);
                }

                publish.IsPublicOrBoth.resume();
            }

            if (!publish.IsPublished()) {
                var firstPublishInitialData = {
                    SelectedPublishType: Webropol.Constants.SurveyPublish.SelectedPublishType.Private,
                    header: _messages.firstPublishHeaderForScheduling,
                    mainNotification: _messages.firstPublishPublicLinkNoteForScheduling,
                    submitButtonText: _messages.firstPublishSubmitButtonForScheduling,
                    submitAction: onSubmit,
                    showSpamWarning: _this.showSpamWarning
                };
                new Webropol.SurveyPublish.CollectAnswers.FirstPublish(urls, messages, publish).init(firstPublishInitialData).showModal();
            } else {
                onSubmit();
            }
        } else {
            saveChanges(onSuccess, onError, hideSpinner);
        }
    };
    
    this.onPreviewEmailMessage = function () {
        var message = _this.ReminderMessage;
        
        var model = {
            emailBody: message.EmailBody(),
            settings: {
                IncludeSurveyLink: _this.IncludeSurveyLink(),
                UseUnsubscribeOption: _this.UseUnsubscribeOption(),
                UnsubscribeCustomText: _this.UnsubscribeCustomText(),
                UseUnsubscribeFromLibraryOption: _this.UseUnsubscribeFromLibraryOption(),
                UnsubscribeFromLibraryCustomText: _this.UnsubscribeFromLibraryCustomText(),
                IncludeRecipientLoginAndPassword: _this.IncludeRecipientLoginAndPassword(),
                IsHtml: true,
                IsPreview: true
            }

        };

        var templatePreview = new Webropol.MyWebropol.LibraryEmailTemplates.TemplatePreview(_urls.getEmailMessagePreviewUrl, model);
        templatePreview.show();
    };

    this.showAssessmentAggrement = function () {
        var obj =
        {
            surveyId: _this.getScheduling().getPublish().Id(),
            selectedRecipients: _this.ReminderMessage.SelectedRecipients()
        }

        Webropol.Shared.Common.callAsync(
            ko.toJSON(obj),
            _urls.getCircularAssessmentAgreementViewModelForScheduleUrl,
            function (data) {
                var option =
                {
                    acceptAgreemntCallback: function () { _this.onSaveChangesClickWithAcceptAgreement();},
                    template: "circular-assessment-agreement-template",
                    templateUrl: _urls.getCircularAssessmentAgreementTemplateUrl
                };

                var circularAssessmentAgreement = new Webropol.Survey.SurveyCircularModuleAgreement(_urls, _messages, _this, option);
                circularAssessmentAgreement.init(data);
                circularAssessmentAgreement.showModal();
            }
        );
    };

    this.getUserTimezoneOffset = function () {
        return scheduling.UserTimeZoneOffset;
    };

    var getTaskIds = function () {
        var settings = _this.ScheduleSettings;
        var frequency = settings.Frequency();
        
        if (frequency === Webropol.Constants.Schedule.FrequencyType.Once || frequency === Webropol.Constants.Schedule.FrequencyType.SpecifiedDates) {
            return ko.utils.arrayMap(settings.DateTimeItems(), function (dateTimeItem) {
                return dateTimeItem.Id();
            });
        }
        
        return [settings.Id()];
    };
    
    this.deleteReminder = function () {
        var data = {
            taskIds: getTaskIds()
        };

        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON(data),
            _urls.deleteScheduledTypeTasks,
            function (result) {
                if (result.ErrorCode === Webropol.Constants.Common.ErrorCode.Ok) {
                    _this.getScheduling().removeReminderFromList(_this);
                }
                
                ko.shared.notifySuccess(_this, result.Message);
            });
    };

    this.onSaveChangesClickWithAcceptAgreement = function () {
        _this.ReminderMessage.IsAcceptAssessment(true);
        _this.onSaveChangesClickInternal();
    };

    this.getSendAttachedFilesForm = function () {
        var form = $(".js-schedule-task-attached-files")[0];
        return form;
    };

    this.onIncludeRecipientLoginAndPassword = function () {
        return _this.ReminderMessage.onIncludeRecipientLoginAndPassword();
    };
};;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.SchedulingRemindMessage = function(urls, messages, reminder) {
    var _this = this;
    var _urls = urls;
    var _messages = messages;

    this.cloneRecipientSelectedGroups = ko.observableArray([]);
    this.FromForManual = ko.observableArray([]);
    this.ReplyToForManual = ko.observableArray([]);
    this.attachmentsSizeExceeded = ko.observable(false);
    this.isAttachedFiles = ko.observable(false);
    this.ckeditorInstance = ko.observable(null);

    this.RecipientEmailGrid = null;

    this.getReminder = function() {
        return reminder;
    };

    this.getAvailableTags = ko.pureComputed(function () {
        var availableTags = reminder.getScheduling().getPublish().AvailableTags;

        if (reminder.RegionType() === Webropol.Constants.SurveyPublish.ScheduledTaskType.SendThankYouPrivate) {
            var tags = ko.observableArray(
                ko.utils.arrayMap(ko.utils.arrayFilter(availableTags.Tags(), function (tag) {
                    return tag.Tag() !== Webropol.Constants.Common.Tag.USER_NAME &&
                        tag.Tag() !== Webropol.Constants.Common.Tag.USER_PASSWORD;
                }), function (tag) { return tag; })
            );
            availableTags = { HelpText: availableTags.HelpText, Tags: tags };
        }
        return availableTags;
    });


    this.IncludeRecipientLoginAndPassword = function (include) {
        if (include !== undefined) {
            reminder.IncludeRecipientLoginAndPassword(include);
        }
        return reminder.IncludeRecipientLoginAndPassword();
    }

    this.showImageGallery = function (callback) {
        return _this.getReminder().getScheduling().getPublish().showImageGallery(callback);
    };

    var rootEmailMessage = function() {
        return _this.getReminder().EmailMessage;
    };

    this.saveLastState = function () {
    };

    this.restoreLastState = function (lastValue) {
        if (lastValue.SelectedEmailTemplateId == Webropol.Shared.Common.guidEmpty) {
            _this.SelectedEmailTemplateId("");
        }
        if (lastValue.SelectedFrom == null) {
            _this.SelectedFrom = null;
        }
        if (lastValue.SelectedReplyTo == null) {
            _this.SelectedReplyTo = null;
        }

        if (_this.RecipientEmailGrid) {
            _this.RecipientEmailGrid = null;
        }
    };

    this.init = function (initialData) {
        ko.mapping.fromJS(initialData, {}, _this);

        var rawFrom = ko.mapping.toJS(rootEmailMessage().FromForManual);
        ko.mapping.fromJS(rawFrom, {}, _this.FromForManual);

        var rawReplyTo = ko.mapping.toJS(rootEmailMessage().ReplyToForManual);
        ko.mapping.fromJS(rawReplyTo, {}, _this.ReplyToForManual);

        Webropol.Common.CustomizeEmail(_messages, _this);
        _this.extendFromOptions(_this.FromForManual(), rootEmailMessage().WebropolEmail.Email());
        _this.extendReplyOptions(_this.ReplyToForManual());
        _this.customizedSenderNameImmediate(_this.CustomizedSenderName());

        Webropol.Common.EmailTemplate(_messages, _this);
        _this.GetEmailTemplateGroups = function () {
            return rootEmailMessage().EmailTemplateGroups();
        };

        _this.initializeComputed();
    };

    this.initializeComputed = function() {
        _this.CanShowRecipientsGrid = ko.computed(function () {
            return _this.SelectedTo() === Webropol.Constants.SurveyPublish.EmailSendingMode.SendToSelected && _this.SelectedRecipients().length > 0;
        });

        _this.CanShowRecipientsHierarchyGrid = ko.pureComputed(function () {
            return false;
        });

        _this.canShowRecipientGroupsGrid = ko.pureComputed({
            read: function () {
                return _this.SelectedTo() === Webropol.Constants.SurveyPublish.EmailSendingMode.SendGroupReminders;
            },
            deferEvaluation: true
        });

        _this.CanOverwriteTemplate = ko.computed(function () {
            return _this.getTemplateByName(_this.SavingTemplateName()) != null;
        });

        _this.CanSaveTemplate = ko.computed(function () {
            var currentTemplate = _this.getTemplateByName(_this.SavingTemplateName());
            return _this.SavingTemplateName() && _this.SavingTemplateName().length != 0 && (currentTemplate == null || currentTemplate.CanOverride());
        });

        _this.CanSave = ko.pureComputed(function () {
            var selectedTo = _this.SelectedTo();
            var type = _this.getReminder().RegionType();

            if (type === Webropol.Constants.SurveyPublish.ScheduledTaskType.SendInvitation &&
                selectedTo === Webropol.Constants.SurveyPublish.EmailSendingMode.Stub) {
                return false;
            }

            if (_this.CanShowRecipientsGrid() && _this.SelectedRecipients().length === 0) {
                return false;
            }

            if (!_this.IsValidMessageOptions()) {
                return false;
            }

            if (selectedTo === Webropol.Constants.SurveyPublish.EmailSendingMode.SendGroupReminders && _this.SelectedRecipientGroups().length === 0) {
                return false;
            }

            if (_this.attachmentsSizeExceeded()) {
                return false;
            }
            return true;
        });

        _this.IsValidMessageOptions = ko.pureComputed(function () {
            if (!_this.getReminder().ShowSendToMessageOptions()) {
                return true;
            }

            if (_this.SelectedTo() === Webropol.Constants.SurveyPublish.EmailSendingMode.Stub) {
                return false;
            }

            if (!_this.IsValidEmailTexts()) {
                return false;
            }

            return true;
        });

        function isValidText(text) {
            return text && text.trim().length > 0;
        }

        _this.IsValidEmailBody = ko.pureComputed(function () {
            return isValidText(_this.EmailBody());
        });

        _this.IsValidEmailTexts = ko.pureComputed(function() {
            if (!_this.IsValidEmailBody()) {
                return false;
            }

            return isValidText(_this.EmailSubject());
        });

        _this.CanOpenSaveTemplateDialog = ko.computed(function () {
            return _this.IsValidEmailTexts() && !_this.attachmentsSizeExceeded();
        });

        _this.CanSendLinkToSurvey = ko.computed(function () {
            var type = _this.getReminder().RegionType();

            return type === Webropol.Constants.SurveyPublish.ScheduledTaskType.SendInvitation ||
                type === Webropol.Constants.SurveyPublish.ScheduledTaskType.SendReminder;
        });

        _this.canApplyRecipientGroups = ko.pureComputed(function () {
            return _this.cloneRecipientSelectedGroups().length > 0;
        });

        _this.onSelectedEmailTemplateIdChanged = function() {

            var selectedTemplateId = _this.SelectedEmailTemplateId();

            if (selectedTemplateId && selectedTemplateId !== Webropol.Constants.Common.Guid.Empty) {
                var downloadAttachedFiles = function () {
                    Webropol.Shared.Common.callAsync(
                        ko.toJSON({ selectedEmailTemplateId: selectedTemplateId }),
                        _urls.getEmailTemplateAttachments,
                        function (data) {
                            _this.EmailTemplateAttachments(data.ExtraData.EmailTemplateAttachments);
                        });
                };
                downloadAttachedFiles();
            }
            else {
                _this.EmailTemplateAttachments([]);
            }
        };
    };

    this.onBindingComplete = function () {
        _this.setSubscribersOnValueChanged();
    };

    this.setDirty = function () {
        _this.getReminder().IsDirty(true);
    };

    this.setSubscribersOnValueChanged = function () {

        _this.EmailSubject.subscribeExtended(resetEmailTemplate);

        _this.EmailBody.subscribeExtended(resetEmailTemplate);

        _this.EmailTemplateAttachments.subscribeExtended(resetEmailTemplate);

        _this.SelectedEmailTemplateId.subscribeExtended(function (newValue, oldValue) {

            if (((!oldValue || oldValue == Webropol.Constants.Common.Guid.Empty) &&
                (!newValue || newValue == Webropol.Constants.Common.Guid.Empty))
                    || _this.ressetingEmailTemplate) {
                return; // do nothing
            }

            _this.onSelectedEmailTemplateIdChanged();

            _this.setDirty();

            _this.EmailSubject.pause();
            _this.EmailBody.pause();
            _this.EmailTemplateAttachments.pause();

            _this.onEmailTemplateChanged(newValue);

            // unfortunately, I have to use a timer
            // because after changing the template, ckeditor generates a change event
            setTimeout(function () {
                _this.EmailSubject.resume();
                _this.EmailBody.resume();
                _this.EmailTemplateAttachments.resume();
            }, 1000);
        });

        _this.SelectedFrom.subscribe(function (newValue) {
            _this.setDirty();
        });

        _this.SelectedReplyTo.subscribe(function (newValue) {
            _this.setDirty();
        });

        _this.SelectedTo.subscribe(function (newValue) {
            if (newValue === Webropol.Constants.SurveyPublish.EmailSendingMode.SendToSelected) {
                _this.showRecipientsGridPopup();
            }

            if (newValue === Webropol.Constants.SurveyPublish.EmailSendingMode.SendGroupReminders){
                _this.showRecipientGroupsGridPopup();
            }

            _this.setDirty();
        });
    };

    var resetEmailTemplate = function () {
        _this.ressetingEmailTemplate = true;
        _this.SelectedEmailTemplateId(null);
        _this.ressetingEmailTemplate = undefined;
    };

    var onCancelRecipientGroups = function () {
        if (_this.RecipientGroupsGrid.isDirty()) {
            ko.shared.showThreeStateConfirmDialog(
                _messages.selectRecipientsUnsavedChangesMessage,
                function () {
                    _this.onApplyRecipientGroups();
                },
                function () {
                },
                function () {
                },
                _messages.selectRecipientsUnsavedChangesTitle,
                _messages.save
            );
        }
    };

    var resetSelectedTo = function () {
        _this.SelectedTo(Webropol.Constants.SurveyPublish.EmailSendingMode.Stub);
    };

    var onRecipientsApply = function (recipientIds) {
        _this.SelectedRecipients.removeAll();

        recipientIds.forEach(function (elem) {
            _this.SelectedRecipients.push(elem);
        });

        if (_this.SelectedRecipients().length === 0) {
            resetSelectedTo();
        }
    };

    var onRecipientsCancel = function () {
        if (_this.SelectedRecipients().length === 0) {
            resetSelectedTo();
        }
    };

    this.showRecipientsGridPopup = function () {
        if (!_this.RecipientEmailGrid) {
            var recipientGridFetchData = {
                data: { taskId: _this.ScheduleTaskId() },
                url: _urls.getRecipientEmailScheduleGridViewModel,
                template: "scheduling-recipient-email-grid-template",
                loadDataUrl: _urls.getRecipientEmailScheduleGrid
            };

            var surveyId = reminder.getScheduling().getPublish().Id();
            _this.RecipientEmailGrid = new Webropol.SurveyPublish.EmailMessage.RecipientsGrid(_urls, _messages, recipientGridFetchData, onRecipientsApply, onRecipientsCancel, surveyId);
        } else {
            _this.RecipientEmailGrid.RecipientEmailGrid.needToRefresh = true;
        }

        _this.RecipientEmailGrid.showRecipientsGrid();
    };

    this.showRecipientGroupsGridPopup = function() {
        var viewModel = { taskId: _this.ScheduleTaskId() };

        Webropol.Shared.Common.callAsync(
                ko.mapping.toJSON(viewModel),
                _urls.getRecipientGroupsScheduleGrid,
                function (data) {

                    var gridOptions = {
                        items: {
                            IsSelected: {
                                click: function (row, columnId) {
                                    var isChecked = row[columnId]();
                                    var recipientGroupId = row.RecipientGroupId();
                                    if (isChecked) {
                                        addToSelectedRecipientGroupsRange([recipientGroupId]);
                                    }
                                    else {
                                        removeFromSelectedRecipientGroupsRange([recipientGroupId]);
                                    }
                                }
                            }
                            },
                        columns: {
                            IsSelected: {
                                click: function (updatedRows, isChecked) {
                                    var recipientGroupsIds = ko.utils.arrayMap(updatedRows, function (item) {
                                        return item.RecipientGroupId();
                                    });

                                    if (isChecked) {
                                        addToSelectedRecipientGroupsRange(recipientGroupsIds);
                                    }
                                    else {
                                        removeFromSelectedRecipientGroupsRange(recipientGroupsIds);
                                    }
                                }
                            }
                        },
                        requestData: viewModel
                    };

                    var urls = {
                        loadDataUrl: _urls.getRecipientGroupsScheduleGrid
                    };

                    _this.RecipientGroupsGrid = new Webropol.BossTools.GenericGrid(urls, _messages, _this, gridOptions);
                    _this.RecipientGroupsGrid.init(data);

                    _this.cloneRecipientSelectedGroups.removeAll();
                    ko.shared.showPopupFromTemplate("scheduling-recipient-groups-grid-template", _this, null, _urls.getRecipientGroupsScheduleGridTemplate, null, onCancelRecipientGroups);
                }
            );
    };

    var addToSelectedRecipientGroupsRange = function (data) {
        data.forEach(function (elem) {
            if (_this.cloneRecipientSelectedGroups().indexOf(elem) == -1) {
                _this.cloneRecipientSelectedGroups.push(elem);
            }
        });
    };

    var removeFromSelectedRecipientGroupsRange = function (data) {
        _this.cloneRecipientSelectedGroups.removeAll(data);
    };

    this.onApplyRecipientGroups = function() {
        _this.SelectedRecipientGroups.removeAll();

        _this.cloneRecipientSelectedGroups().forEach(function (elem) {
            _this.SelectedRecipientGroups.push(elem);
        });
    };

    this.setSendToOptionDisable = function (option, item) {
        var isDisable = item.IsDisable;

        var reminder = _this.getReminder();
        // If no email has been sent before and it is the first time user is collecting answers
        // and wants to schedule then only the first two items in dropdown are active to select.
        if (reminder.RegionType() === Webropol.Constants.SurveyPublish.ScheduledTaskType.SendInvitation) {
            if (item.EmailSendingMode() === Webropol.Constants.SurveyPublish.EmailSendingMode.SendToNew) {
                isDisable = !reminder.getScheduling().getPublish().IsPrivateOrBoth();
            }
        }

        ko.applyBindingsToNode(option, {
            disable: isDisable
        }, item);
    };
}
;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.InstantFeedback = function (urls, messages) {
    var _this = this;
    var _urls = urls;
    var _messages = messages;

    this.updateAndApplyBindings = function (initialData) {

        var mapping = {

        };

        ko.mapping.fromJS(Webropol.Shared.Common.parseJSON(initialData), mapping, _this);

        _this.initializeComputed();

        ko.applyBindings(_this);
    };

    this.ResetSurveyConfirmed = ko.observable(false);

    this.initializeComputed = function () {
        _this.hasLocations = ko.computed(function() {
            return _this.Locations().length > 0;
        });
    };

    this.showEditLocation = function (location) {
        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON({ locationId: location.UserId() }),
            _urls.getInstantFeedbackLocationUrl,
            function (result) {
                var locationModel = new Webropol.SurveyPublish.InstantFeedback.Location(_urls, _messages, _this, false);
                locationModel.updateAndApplyBindings(result);

                locationModel.showModal();
            }
        );
    };

    this.openSurvey = function() {
        if (_this.needsToShowFirstPublishNotification()) {
            var firstPublishInitialData = {
                header: _messages.firstPublishHeader,
                mainNotification: _messages.firstPublishNote,
                submitButtonText: _messages.firstPublishSubmitButton,
                submitAction: _this.publishSurveyAction,
                showSpamWarning: _this.showSpamWarning
            };
            new Webropol.SurveyPublish.CollectAnswers.FirstPublish(urls, messages, _this).init(firstPublishInitialData).showModal();
        } else {
            _this.publishSurveyAction();
        }
    };

    this.publishSurveyAction = function () {
        _this.CollectingMethod.PublishTypeSelected(Webropol.Constants.SurveyPublish.SelectedPublishType.Private);
        _this.IsPublished(true);
        _this.IsPrivate(true);

        Webropol.Shared.Common.callAsync(
            ko.mapping.toJSON(_this.CollectingMethod),
            _urls.surveyPublishUrl,
            function (data) {
                _this.IsSuspended(false);
                _this.Workflow.Reporting.Disabled(false);
                _this.Workflow.Followup.Disabled(false);
                _this.Workflow.ManageEventParticipants.Disabled(false);

                ko.shared.notifySuccess(_this, _messages.openSuccessMessage);
            });
    };

    this.onBeforeResetSurvey = function () {
        ko.shared.showPopupFromTemplate("reset-survey-notification-template", _this);
    };

    this.publishWottLocation = function (location, e) {
        var locationCopy = ko.mapping.toJS(location);
        locationCopy.IsPublished = !location.IsPublished();

        Webropol.Shared.Common.callAsync(
            JSON.stringify(locationCopy),
            _urls.publishIstantFeedbackLocationUrl,
            function (data) {
                ko.shared.notifySuccess(location, _messages.publishLocationSuccessMessage);
            });

        return true;
    };

    this.resetSurvey = function () {
        Webropol.Shared.Common.callAsync(
            {},
            _urls.resetWottSurveyUrl,
            function (data) {
                window.location.reload();
            });
    };

    this.needsToShowFirstPublishNotification = function (isSendOperation) {
        return (!_this.IsPublished() || _this.IsSuspended() || (!_this.IsBoth() && !_this.IsPublic()));
    };

    this.createLocation = function () {
        Webropol.Shared.Common.callAsync(
            {},
            _urls.getEmptyInstantFeedbackLocationUrl,
            function (result) {
                var locationModel = new Webropol.SurveyPublish.InstantFeedback.Location(_urls, _messages, _this, true);
                locationModel.updateAndApplyBindings(result);

                locationModel.showModal();
            }
       );
    };
};
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};
Webropol.SurveyPublish.ManageRecipients = Webropol.SurveyPublish.ManageRecipients || {};

Webropol.SurveyPublish.ManageRecipients.DemDataExport = function(exportUrl) {
    var _this = this;

    var demDataExportTypes = {
        Both: 0,
        OnlyReporting: 1
    };

    var createExportOptions = function() {
        return {
            LinkToSurvey: false,
            LinkToResponses: false,
            UsernameAndPassword: false
        };
    };

    this.ExportType = ko.observable(0);
    this.BothExportOptions = createExportOptions();
    this.OnlyReportingExportOptions = createExportOptions();

    this.exportDemData = function () {
        var options = _this.ExportType() === demDataExportTypes.Both
            ? _this.BothExportOptions
            : _this.OnlyReportingExportOptions;

        var model = {
            ExportType: _this.ExportType(),
            ExportOptions: options
        }

        Webropol.Shared.Common.callSubmit(exportUrl, model);
    };
};;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.ShowQuestionInEmail = function(urls, emailMessage) {
    var _this = this;
    var _urls = urls;
    var _emailMessage = emailMessage;
    var _modal;

    this.init = function(initialData) {
        ko.mapping.fromJS(initialData, {}, _this);

        _this.selectedQuestionId = ko.observable(null);
        _this.selectedColorSchema = ko.observable(null);
        _this.selectedShowingOption = ko.observable(null);

        _this.validationTriggered = ko.observable(false);

        _this.emailBody = _emailMessage.EmailBody;
        _this.ckeditorInstance = _emailMessage.ckeditorInstance;

        _this.initComputed();
    };

    this.initComputed = function() {
        _this.selectedQuestionIdIsInvalid = ko.computed({
            read: function () {
                return _this.validationTriggered() && _this.selectedQuestionId() === null;
            },
            deferEvaluation: true
        });

        _this.selectedColorSchemaIsInvalid = ko.computed({
            read: function () {
                return _this.validationTriggered() && _this.selectedColorSchema() === null;
            },
            deferEvaluation: true
        });

        _this.selectedShowingOptionIsInvalid = ko.computed({
            read: function () {
                return _this.validationTriggered() && _this.selectedShowingOption() === null;
            },
            deferEvaluation: true
        });

        _this.isInvalid = ko.computed({
            read: function () {
                return _this.selectedQuestionIdIsInvalid()
                    || _this.selectedColorSchemaIsInvalid()
                    || _this.selectedShowingOptionIsInvalid();
            },
            deferEvaluation: true
        });
    };

    this.showModal = function () {
        _modal = ko.shared.showPopupFromTemplate(
            "send-survey-show-question-in-email-template",
            _this, function(modal) {
                _modal = $(modal);
            },
            _urls.getShowQuestionInEmailDetailsTemplateUrl);
    };

    this.addQuestion = function () {
        _this.validationTriggered(true);

        if(_this.isInvalid()) {
            return;
        }

        var surveyId = _emailMessage.getPublish().Id();

        var viewModel = {
            SurveyId: surveyId,
            SelectedQuestionId: _this.selectedQuestionId(),
            SelectedColorSchema: _this.selectedColorSchema(),
            SelectedShowingOption: _this.selectedShowingOption()
        }

        Webropol.Shared.Common.callAsync(
            viewModel,
            _urls.createCodeToShowQuestionInEmail,
            function (result) {
                var tableHtml = result.ExtraData;

                if(!Webropol.Shared.Common.insertTextToEditor(_this.ckeditorInstance(), tableHtml)) {
                    // insert table at the end
                    var prevValue = _this.emailBody() || "";
                    _this.emailBody(prevValue + tableHtml);
                }

                _modal.modal("hide");

                if (viewModel.SelectedShowingOption === Webropol.Constants.Publish.ShowQuestionInEmail.ShowingOptions.FinishParticipation) {
                    ko.shared.showPopupFromTemplate(
                        "send-survey-show-question-in-email-result-template",
                        _this, function(modal) {
                            _modal = $(modal);
                        },
                        _urls.getShowQuestionInEmailResultTemplateUrl);
                }
            }
        );
    };
}
;
var Webropol = Webropol || {};
Webropol.Survey = Webropol.Survey || {};

Webropol.Survey.KeywordsContainer = function (urls, messages, parent) {
    var _this = this;
    var _urls = urls;
    var _messages = messages;
    
    this.selectedQuestionsForExcelTemplate = ko.observableArray();
    this.canImportKeywords = ko.observable(false);

    this.getParent = function () {
        return parent;
    };
    
    this.init = function(initialData) {

        var mapping = {
            Labels: {
                create: function (options) {
                    var t = new Webropol.Survey.SurveyInfoManager.SurveyInfo.SurveyLabel(_urls, _messages, _this);
                    t.init(options.data);
                    return t;
                }
            }
        };

        ko.mapping.fromJS(initialData, mapping, _this);

        _this.initializeComputed();
        _this.applyExtenders();

        _this.Labels.sort(labelComparer);
        _this.selectedQuestionsForExcelTemplate([]);
    };

    this.applyExtenders = function () {
        _this.Labels.extend({ trackChange: true });
    };

    this.initializeComputed = function () {
        this.SelectedLabelId = ko.observable(Webropol.Shared.Common.guidEmpty);

        this.canAddLabel = ko.computed({
            read: function () {
                return (_this.SelectedLabelId() != undefined) && (_this.SelectedLabelId() != Webropol.Shared.Common.guidEmpty);
            }
        });

        this.Labels.isDirty = ko.observable(false);

        this.keywordsHeader =  function(text) {
            return ko.computed(function () {
                if (_this.AreLabelsLimited()) 
                {
                    return text + ' (' + (_this.getLabelsLength()+1) + ')';
                }
                return text + ' (' + (_this.getLabelsLength()) + ')';
            });
        };

        _this.IsValidLabels = ko.pureComputed({
            read: function () {
                var firstEmptyLabel = ko.utils.arrayFirst(_this.Labels(), function (label) {
                    return !label.IsDeleted() && label.LabelName().length === 0 && !label.IsPlaceholder();
                });

                return firstEmptyLabel == null;
            },
            deferEvaluation: true
        });
    };

    var labelComparer = function (left, right) {
        //move placeholder to the end
        if (left.IsPlaceholder()) {
            return 1;
        }

        if (right.IsPlaceholder()) {
            return -1;
        }

        return left.LabelName().localeCompare(right.LabelName());
    };

    this.getLabelsLength = function () {
        return ko.utils.arrayFilter(_this.Labels(), function (label) {
            return !label.IsDeleted();
        }).length - 1;
    };

    this.addPlaceholder = function () {
        var newLabel = new Webropol.Survey.SurveyInfoManager.SurveyInfo.SurveyLabel(_urls, _messages, _this);
        newLabel.init(ko.mapping.toJS(_this.LabelPlaceholder));
        _this.Labels.push(newLabel);
    };

    this.removeLabel = function (label) {
        _this.Labels.remove(label);
    };

    this.isReadOnlyKeywords = function() {
        return _this.getParent().isReadOnlyKeywords();
    }

    this.onUploadImportFileChange = function (element, event) {
        var $fileInput = $(event.target);

        if (Webropol.Shared.Common.validateFileFormat($fileInput, ["xlsx"]) || Webropol.Shared.Common.validateFileFormat($fileInput, ["xls"])) {
            _this.canImportKeywords(true);
        } else {
            _this.canImportKeywords(false);
        }
    };

    this.onImportKeywords = function () {
        var fileInput = $('.keywords-import').find('input:file');
        var fileName = fileInput.val().split('\\').pop();

        if (fileName == null || fileName.length < 1) return;

        // this uses jquery.form.js plugin
        var $form = $(fileInput).parents('form').first();
        Webropol.Shared.Common.callAjaxSubmit($form, {
            url: _urls.getKeywordsImportFromFileUrl,
            beforeSubmit: function () {
                $(".progress").show();
                $(".progressError").hide();
                $(".bar").width("0%");
                $(".percent").html("0%");
            },
            uploadProgress: function (event, position, total, percentComplete) {
                var percentVal = percentComplete + "%";
                $(".bar").width(percentVal);
                $(".percent").html(percentVal);
            },
            success: function (data) {
                $(".progress").hide();
                $(".progressError").hide();
                // Handle IE8 case
                if (Webropol.Common.isJson(data)) {
                    var result = Webropol.Shared.Common.parseJSON(data);
                    if (result.ErrorCode == 0) {
                        fileInput.replaceWith(fileInput.val('').clone(true)); //clearing value from file input
                        _this.canImportKeywords(false);
                        _this.getParent().UploadedKeywords(result.ExtraData.keywords);

                        for (var i = 0; i < _this.Labels().length; i++) {
                            _this.Labels()[i].IsDeleted(true);
                        }
                        
                        var surveyLabels = result.ExtraData.surveyLabels;
                        for (var i = 0; i < surveyLabels.length; i++) {
                            var newLabel = new Webropol.Survey.SurveyInfoManager.SurveyInfo.SurveyLabel(_urls, _messages, _this);
                            newLabel.init(surveyLabels[i]);
                            _this.Labels.push(newLabel);
                        }

                        ko.shared.notifySuccess(_this, result.Message);
                    }
                }
            },
            error: function (jqXHR, textStatus, errorThrown) {
                $(".progress").hide();
                $("div.progressError").html(jqXHR.responseText);
            }
        });
    };

    // Labels are limited by UE settings region

    this.onAddLabel = function () {
        var selectedLabelId = $('#ddlKeywords').val();
        if (_this.SelectedLabelId() != Webropol.Shared.Common.guidEmpty) {
            var selectedLabel = _this.getLabelById(selectedLabelId);
            if (selectedLabel != null) {
                _this.SelectedLabelId(Webropol.Shared.Common.guidEmpty);
                _this.AvailableLabels.remove(selectedLabel);
                _this.Labels.push(selectedLabel);
            }

        }
    };

    this.getLabelById = function (id) {
        return ko.utils.arrayFirst(_this.AvailableLabels(),
            function (item) {
                return item.Id() == id;
            });
    };

    this.onRemoveLabel = function (item, event) {
        _this.SelectedLabelId(Webropol.Shared.Common.guidEmpty);
        _this.Labels.remove(item);
        _this.AvailableLabels.push(item);
        _this.AvailableLabels.sort(_this.compareByProperty("LabelName"));
       
    }
    this.compareByProperty = function (propertyName) {
        return function (left, right) {
            return left[propertyName]() == right[propertyName]() ? 0 : (left[propertyName]() < right[propertyName]() ? -1 : 1);
        };
    };
};;
var Webropol = Webropol || {};
Webropol.Shared = Webropol.Shared || {};

Webropol.Shared.AutoReportFilterSettings = function (urls, messages, publish, onPersonnelResponsibilityGridReload) {
    var _this = this;
    var _urls = urls;
    var _messages = messages;

    this.isExpandedCreateFilterState = ko.observable(true);
    this.isExpandedExistingFiltersState = ko.observable(false);
    this.getQestionsForFilterTemplate = ko.observableArray();
    this.hideSelectedQuestionsFromRespondentView = ko.observable(false);
    this.canImportExcelWithFilter = ko.observable(false);
    this.deletingPersonnelsActivated = ko.observable(false);
    this.hasFirstClick = ko.observable(false);
    this.isResponsibilityGridLoad = ko.observable(true);
    this.generatedPasswordCount = ko.observable(10);
    this.selectedQuestionsForGridFiltering = ko.observableArray();
    this.exportTemplateType = ko.observable("");

    this.getPublish = function () {
        return publish;
    };

    this.init = function (initialData) {
        var mapping = {
            'PersonnelResponsibilityGrid': {
                create: function(options) {
                    var s = createPersonnelFilterGrid(options.data, initialData.IsUseForMultiPassword);
                    return s;
                }
            },
        };
        ko.mapping.fromJS(initialData, mapping, _this);

        _this.initializeComputed();
        _this.subscribeOnValuesChanged();

        _this.getQestionsForFilterTemplate([]);
    };

    this.initializeComputed = function () {
        _this.canGetExcelTemplate = ko.pureComputed({
            read: function () {
                if (_this.IsUseForMultiPassword()) {
                    return  _this.SelectedTargetQuestionId() !== Webropol.Shared.Common.guidEmpty &&
                            _this.generatedPasswordCount() > 0;
                } else {
                    return _this.SelectedTargetQuestionId() !== Webropol.Shared.Common.guidEmpty
                        || _this.exportTemplateType() == 'location';
                }
            },
            deferEvaluation: true
        });

        _this.canDeletePersonnels = ko.computed(function () {
            var firstChecked = ko.utils.arrayFirst(_this.PersonnelResponsibilityGrid.Items(), function (item) {
                return item.IsSelected() == true;
            });
            return firstChecked != null;
        }, _this);

        _this.canGeneratePasswords = ko.pureComputed({
            read: function () {
                if (_this.IsUseForMultiPassword()) {
                    return _this.generatedPasswordCount() > 0;
                }

                return false;
            },
            deferEvaluation: true
        });
    }

    this.subscribeOnValuesChanged = function () {
    };

    this.toggleExpandedCreateFilterState = function () {
        _this.isExpandedCreateFilterState(!_this.isExpandedCreateFilterState());
    };

    this.toggleExpandedExistingFiltersState = function () {
        _this.isExpandedExistingFiltersState(!_this.isExpandedExistingFiltersState());
    };

    this.onUploadImportExcelFileChange = function (element, event) {
        var $fileInput = $(event.target);

        if (Webropol.Shared.Common.validateFileFormat($fileInput, ["xlsx"]) || Webropol.Shared.Common.validateFileFormat($fileInput, ["xls"])) {
            _this.canImportExcelWithFilter(true);
        } else {
            _this.canImportExcelWithFilter(false);
        }
    };

    this.setOptionsAttributesForQuestions = function (option, item, maxLength) {
        if (item) {
            ko.shared.setOptionsAttributes(option, item, maxLength, "Name", false, item.decodeHtmlEncodedText);
        }
    };

    this.onExportExcelTemplate = function () {
        var obj = {
            surveyId: _this.SurveyId(),
            reportId: 221307,
        };

        Webropol.Shared.Common.callAsync(
            obj,
            _urls.getExcelLocationAutoFilterTemplate,
            function (result) {
                Webropol.Common.showSuccessMessage(result);
            });
    };

    this.onImportExcelAutoFilter = function () {
        var fileInput = $('.' + _this.ImportExcelButtonClass()).find('input:file');
        var fileName = fileInput.val().split('\\').pop();

        if (fileName == null || fileName.length < 1) return;

        // this uses jquery.form.js plugin
        var $form = $(fileInput).parents('form').first();
        Webropol.Shared.Common.callAjaxSubmit($form, {
            url: _this.IsUseForMultiPassword() ? _urls.importLoginPasswordsDataUrl : _urls.importPersonnelDemDataUrl,
            success: function (data) {
                var result = Webropol.Shared.Common.parseJSON(data);
                if (result.ErrorCode == Webropol.Constants.Common.ErrorCode.Ok) {
                    ko.shared.notifySuccess(_this, result.Message);
                    
                    _this.reloadPersonnelRecipientGrid();
                } 
                else if (result.ErrorCode == Webropol.Constants.Common.ErrorCode.Error) {
                    ko.shared.notifyError(_this, result.Message);
                } 

                clearInput(fileInput);
                _this.canImportExcelWithFilter(false);
            }
        });
    };

    function clearInput(input) {
        if (ko.shared.isIE()) {
            input.after(input.clone(true)).remove();
        }
        else {
            input.val('');
        }
    };

    this.loadActivationDeletePersonnels = function () {
        var $selectCols = $('.col-select-pers');
        if (_this.deletingPersonnelsActivated()) {
            $selectCols.addClass('visible');
        } else {
            $selectCols.removeClass('visible');
        };
    };

    var createPersonnelFilterGrid = function (initialData, isUseForMultiPassword) {
        var gridOptions = { 
            onLoad: function () {
                _this.loadActivationDeletePersonnels();
            },
            items: {
                'IsSelected': {
                    click: function (row) {
                    }
                }
            },
            requestData: {
                questionFilter: _this.selectedQuestionsForGridFiltering()
            }
        };

        var gridUrls = {
            loadDataUrl: isUseForMultiPassword ? _urls.getPublicLinkPasswordsGridUrl : _urls.getPersonnelResponsibilityGridUrl,
            exportToExcelUrl: isUseForMultiPassword ? _urls.exportPublicLinkPasswordsGriUrl :_urls.exportPersonnelsUrl
        };

        var grid = new Webropol.BossTools.GenericGrid(gridUrls, _messages, _this, gridOptions);
        grid.init(initialData);

        return grid;
    };


    this.onDeleteRowFromGrid = function () {
        if (_this.IsUseForMultiPassword()) {
            _this.onDeleteLoginPasswordsConfirmation();
        } else {
            _this.onDeletePersonnelsConfirmation();
        }
    };

    this.onDeleteLoginPasswordsConfirmation = function () {
        ko.shared.showConfirmDialog(
            _messages.publicLoginPasswordsData.deletePasswordsBody,
            function () {
                _this.onDeleteLoginPasswords();
            },
            function () {
            },
            _messages.publicLoginPasswordsData.deletePasswordsHeader,
            _messages.publicLoginPasswordsData.deletePasswordsButton
        );
    };

    this.onDeleteLoginPasswords = function () {
        var passwordsIdsToDelete = [];
        ko.utils.arrayForEach(_this.PersonnelResponsibilityGrid.Items(), function (item) {
            if (item.IsSelected()) {
                passwordsIdsToDelete.push(item.RowId());
            }
        });

        var viewModel = ko.mapping.toJSON(passwordsIdsToDelete);
        Webropol.Shared.Common.callAsync(
            viewModel,
            _urls.removeLoginPasswordsUrl,
            function (result) {
                if (result.ErrorCode == Webropol.Constants.Common.ErrorCode.Ok) {

                    _this.reloadPersonnelRecipientGrid();

                    Webropol.Common.showSuccessMessage(result);
                }
            });
    };

    this.onDeletePersonnelsConfirmation = function () {
        ko.shared.showConfirmDialog(
            _messages.personnelAutoFilterDemData.deletePersonnelsBody,
            function () {
                _this.onDeletePersonnels();
            },
            function () {
            },
            _messages.personnelAutoFilterDemData.deletePersonnelsHeader,
            _messages.personnelAutoFilterDemData.deletePersonnelsButton
        );
    };

    this.onDeletePersonnels = function () {
        var personnelIdsToDelete = [];
        ko.utils.arrayForEach(_this.PersonnelResponsibilityGrid.Items(), function (item) {
            if (item.IsSelected()) {
                personnelIdsToDelete.push(item.RowId());
            }
        });

        var viewModel = ko.mapping.toJSON(personnelIdsToDelete);
        Webropol.Shared.Common.callAsync(
            viewModel,
            _urls.removePersonnelsUrl,
            function (result) {
                if (result.ErrorCode == Webropol.Constants.Common.ErrorCode.Ok) {
                    
                    _this.reloadPersonnelRecipientGrid();

                    Webropol.Common.showSuccessMessage(result);
                }
            });
    };


    this.reloadPersonnelRecipientGrid = function () {
        _this.isResponsibilityGridLoad(false);
        _this.PersonnelResponsibilityGrid.reload(function() {
            _this.isResponsibilityGridLoad(true);
        });

        _this.reloadQuestionsForGridFiltering();

        if (onPersonnelResponsibilityGridReload) {
            onPersonnelResponsibilityGridReload();
        }
    };

    this.reloadQuestionsForGridFiltering = function () {
        var obj = {
            surveyId: _this.SurveyId()
        };

        Webropol.Shared.Common.callAsync(
            obj,
            _urls.getQuestionsUsedInDemDataUrl,
            function (result) {
                _this.QuestionsForGridFiltering(result);
            });
    };

    this.toggleActivationDeletePersonnels = function() {
        _this.deletingPersonnelsActivated(!_this.deletingPersonnelsActivated());
        _this.loadActivationDeletePersonnels();
    };

    this.getActivationDeletePersonnelsBtnText = function () {
        return _this.deletingPersonnelsActivated() ? _messages.personnelAutoFilterDemData.deletePersonnelBtnActivate : _messages.personnelAutoFilterDemData.deletePersonnelBtnDeactivate;
    };

    this.onGeneratePasswordsClick = function() {
        var obj = {
            surveyId: _this.getPublish().Id(),
            passwordCount: _this.generatedPasswordCount()
        };

        Webropol.Shared.Common.callAsync(
           obj,
           _urls.generatedPublicLinkPasswordsUrl,
           function(result) {
               ko.shared.notifySuccess(_this, result.Message);

               _this.reloadPersonnelRecipientGrid();
           });
    };

    this.getExcelAutoFilterTemplateUrl = function () {
        return _this.IsUseForMultiPassword()
            ? _urls.getExcelGeneratedPasswordsTemplate
            : _this.exportTemplateType() == "location"
                ? _urls.getExcelLocationAutoFilterTemplate
                : _urls.getExcelPersonnelAutoFilterTemplate;
    };


    this.filterPersonnelResponsibilityGridByQuestions = function () {
        _this.PersonnelResponsibilityGrid.setRequestData({
            questionFilter: _this.selectedQuestionsForGridFiltering()
        });

        _this.PersonnelResponsibilityGrid.reload();
    };
};;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.LoginPageSettings = function (urls, messages, publish) {
    var _this = this;
    var _urls = urls;
    var _messages = messages;
    this.isExpandedLoginPageSettings = ko.observable(false);
    this.isShowPublicLinkPassword = ko.observable(false);
    this.isShowLoginPagePassword = ko.observable(false);
    this.SelectedLoginPageTemplate = ko.observable(false);

    this.getPublish = function () {
        return publish;
    };

    this.getConst = function () {
        return {
            ImagePlacement: {
                Top: 0,
                Bottom: 1
            },
            ImageAlignment: {
                Center: 0,
                Left: 1,
                Right: 2
            },
            LoginPasswordType: {
                Single: 0,
                Multiple: 1,
                None: 2,
                Captcha: 3
            },
            SinglePasswordLoginPageType: {
                Survey: 0,
                MyWebropol: 1
            }
        };
    };

    this.getBodyAutoSaveTimeout = function () {
        return 5000;
    };

    this.init = function (initialData) {
        var mapping = {
            'MultiplePasswordSettings': {
                create: function (options) {
                    var s = new Webropol.Shared.AutoReportFilterSettings(_urls, _messages, _this.getPublish());
                    s.init(options.data);
                    return s;
                }
            },
        };

        ko.mapping.fromJS(initialData, mapping, _this);

        _this.setSelectedLoginPageTemplate(_this.LoginPageTemplateId());
        _this.initializeComputed();
        _this.subscribeOnValuesChanged();
    };

    this.initializeComputed = function () {
        _this.canShowSelectedImage = ko.pureComputed({
            read: function () {
                if (_this.Logo.ImagePath) {
                    return _this.Logo.ImagePath() != null;
                }

                return false;
            },
            deferEvaluation: true
        });

        _this.CanApplyTemplate = ko.computed(function () {
            return _this.LoginPageTemplates().length > 0;
        });
    };

    this.subscribeOnValuesChanged = function () {
        _this.IsLogoAdded.subscribe(function (newValue) {
            if (!newValue) {
                _this.Logo.ImagePath = '';
                _this.onSaveSettings();
            }
        });

        _this.LogoPlacement.subscribe(function () {
            _this.onSaveSettings();
        });

        _this.LogoAlignment.subscribe(function () {
            _this.onSaveSettings();
        });

        _this.AltText.subscribe(function () {
            _this.onSaveSettings();
        });

        _this.PublicLinkPassword.subscribe(function (newValue) {
            _this.onSaveSettings();
        });

        _this.LoginPagePassword.subscribe(function (newValue) {
            _this.onSaveSettings();
        });

        //_this.IsRequirePublicLinkPassword.subscribe(function(newValue) {
        //    if (!newValue && _this.PublicLinkPassword())
        //        _this.PublicLinkPassword(null);
        //});

        _this.PasswordType.subscribe(function (newValue) {

            if (newValue != _this.getConst().LoginPasswordType.Single) {
                _this.PublicLinkPassword(null);
            }
            _this.onSaveSettings();
        });

        _this.LoginPageType.subscribe(function (newValue) {
            $('[data-toggle="popover"]').popover();

            _this.onSaveSettings();
        });

        _this.LoginPageTemplateId.subscribe(function (newValue) {
            _this.setSelectedLoginPageTemplate(newValue);
            _this.onSaveSettings();
        });
    };

    this.setSelectedLoginPageTemplate = function(templateId) {
        var selectedTemplate = ko.utils.arrayFirst(_this.LoginPageTemplates(), function (element) {
            return element.Id() === templateId;
        });

        _this.SelectedLoginPageTemplate(selectedTemplate);
    };

    this.onBindingComplete = function () {
        ko.autoSaveObservable(_this.LoginPageDescription, null, _this.getBodyAutoSaveTimeout(), _this.autoSave);
    };

    this.onSaveSettings = function () {
        var option = {
            'ignore': ['MultiplePasswordSettings', 'LoginPageTemplates']
        };
        var obj = ko.mapping.toJSON(_this, option);

        Webropol.Shared.Common.callAsync(
            obj,
            _urls.saveLoginPageSettingsUrl,
            function (data) {
                _this.Id(data.ExtraData);
                ko.shared.notifySuccess(_this, data.Message);
            });
    };

    this.autoSave = $.debounce(100, true, _this.onSaveSettings);

    this.toggleExpandedLoginPageSettingsState = function () {
        _this.isExpandedLoginPageSettings(!_this.isExpandedLoginPageSettings());

        if (_this.isExpandedLoginPageSettings()) {
            $('[data-toggle="popover"]').popover();
        }
    };

    this.onBrowseImage = function () {
        this.getPublish().getImageGallery().showImageGallery(Webropol.Constants.ImageGalleryMode.SingleAdd, function (image) {
            function updateLogo() {
                ko.mapping.fromJSON(ko.mapping.toJSON(image), {}, _this.Logo);
                _this.AltText(null);
                _this.onSaveSettings();
            }

            var currentAltText = _this.AltText();

            if (currentAltText) {
                var confirmOptions = {
                    message: _messages.changeImageDialogDescriptionText + ":</br>" + currentAltText,
                    onOk: updateLogo,
                    onCancel: function () { },
                    header: _messages.changeImageDialogHeaderText,
                    okButtonText: _messages.apply,
                    isHtml: true
                };

                ko.shared.showConfirmation(confirmOptions);
            } else {
                updateLogo();
            }
        });
    };
};;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.AddRecipientsFromHierarchy = function (urls, messages, publish) {
    var _this = this,
        _publish = publish;

    this.IsLoaded = ko.observable(false);

    this.init = function (data) {
        _this.HierarchyGrid = new Webropol.SurveyPublish.HierarchySelectionGrid(urls, messages);
        _this.HierarchyGrid.init(data.Model);

        var $gridElement = $("#import-from-hierarchy-grid");
        $gridElement.append(data.View);
        ko.applyBindings(_this.HierarchyGrid, $gridElement[0]);

        _this.IsLoaded(true);
    };

    _this.CanAddRecipients = ko.pureComputed(function() {
        return _this.IsLoaded() && _this.HierarchyGrid.HasSelectedPerson();
    });

    this.addRecipients = function () {
        var selectedPersons = _this.HierarchyGrid.getSelectedIds();
        if (_publish.IsEmailRecipients()) {
            _publish.addRecipientsFromHierarchy(selectedPersons);
        }
        else {
            _publish.addSMSRecipientsFromHierarchy(selectedPersons);
        }
    };

    this.reset = function () {
        if (_this.IsLoaded()) {
            _this.HierarchyGrid.reset();
        }
    };
};
;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.HierarchySelectionGrid = function (urls, messages) {
    var _this = this,
        _hierarchyCommon;

    var onLevelChecked = function(parentRow, columnId) {
        var column = _this.HierarchyGrid.getColumn(columnId);
        var checked = parentRow[column.MapValue()]();

        if (parentRow.HasChilds()) {
            var rows = _this.HierarchyGrid.Items();

            var needToCheckPerson = function(row) {
                if (!_this.SelectedCheckModeId || !_this.SelectedCheckModeId()) {
                    return true;
                }
                if (_this.SelectedCheckModeId() === Webropol.Constants.CheckMode.All) {
                    return true;
                }
                if (_this.SelectedCheckModeId() === Webropol.Constants.CheckMode.OnlyManagers) {
                    return row.IsManager();
                }
                if (_this.SelectedCheckModeId() === Webropol.Constants.CheckMode.OnlyRespondents) {
                    return !row.IsManager();
                }
                return true;
            };

            var setIsSelectedPersonForRow = function (row) {
                if (row.CanSelectPerson()) {
                    if (!checked) {
                        row.IsPersonSelected(checked); // unchecking everyone
                    } else {
                        row.IsPersonSelected(needToCheckPerson(row)); // checking persons based on dropdown
                    }
                }
            };
            
            var setIsSelectedForRow = function(row) {
                if (row.HasChilds()) {
                    var parentRowId = row.RowId();

                    ko.utils.arrayForEach(rows, function(r) {
                        if (r.ParentId() === parentRowId) {
                            if (r.CanBeSelected()) {
                                r[column.MapValue()](checked);
                                setIsSelectedForRow(r);
                            }

                            setIsSelectedPersonForRow(r);
                        }
                    });
                }

                setIsSelectedPersonForRow(row);
            };

            setIsSelectedForRow(parentRow);
        }
    };

    var createGrid = function(options) {
        var gridOptions = {
            items: {
                'IsSelected': {
                    click: onLevelChecked
                }
            }
        };

        var grid = new Webropol.BossTools.GenericGrid({}, messages, _this, gridOptions);
        grid.init(options.data);

        return grid;
    };

    var update = function(data) {
        var mapping = {
            'HierarchyGrid': {
                create: createGrid
            }
        };

        ko.mapping.fromJS(data, mapping, _this);
    };

    this.init = function (initialData) {
        update(initialData);
        _this.initializeComputed();

        _hierarchyCommon = new Webropol.Hierarchy.Common(urls, messages, _this);
    };

    this.initializeComputed = function () {

        _this.SelectedRespondentsCount = ko.pureComputed(function () {
            return _this.HierarchyGrid.getSelectedRows("IsPersonSelected").length;
        });
        _this.HasSelectedPerson = ko.pureComputed(function () {
            return _this.getSelectedIds().length > 0;
        });
    };

    this.search = function () {
        if (_this.isShowAll()) {
            _hierarchyCommon.resetSearch();
        } else {
            _hierarchyCommon.clientSearch();
        }
    };

    this.canSearch = function () {
        return _this.SelectedSearchMode() != null || _this.isShowAll();
    };

    this.isShowAll = function () {
        return $.trim(_this.SearchText()).length === 0;
    };

    this.getSelectedIds = function() {
        var selectedRows = _this.HierarchyGrid.getSelectedRows("IsPersonSelected");
        return ko.utils.arrayMap(selectedRows, function (row) {
            return row.PersonId();
        });
    };

    this.getSelectedRecipientIds = function () {
        var selectedRows = _this.HierarchyGrid.getSelectedRows("IsPersonSelected");
        return ko.utils.arrayMap(selectedRows, function (row) {
            return row.RecipientIds();
        });
    };

    this.reset = function() {
        ko.utils.arrayForEach(_this.HierarchyGrid.Items(), function (person) {
            person.IsSelected(false);
            person.IsPersonSelected(false);
            person.Expanded(false);
        });
    };
};;
var Webropol = Webropol || {};
Webropol.MyWebropol = Webropol.MyWebropol || {};
Webropol.MyWebropol.LibraryEmailTemplates = Webropol.MyWebropol.LibraryEmailTemplates || {};

Webropol.MyWebropol.LibraryEmailTemplates.TemplatePreview = function (previewUrl, previewModel, editTemplateCallback) {
    var _this = this;
    
    this.show = function () {
        var templateName = "email-template-preview-template";
        
        $('body').find("#" + templateName).remove();

        ko.shared.showPopupFromTemplate(
            templateName,
            _this,
            null,
            previewUrl,
            JSON.stringify(previewModel)
        );
    };
    
    this.editTemplate = function () {
        if (editTemplateCallback && typeof editTemplateCallback === "function") {
            editTemplateCallback();
        } 
    };
};;
var Webropol = Webropol || {};
Webropol.Common = Webropol.Common || {};

Webropol.Common.SmsUtils = function() {
    var _this = this;
};

Webropol.Common.SmsUtils.gsmCodeOnlyOnePartLength = 160;
Webropol.Common.SmsUtils.gsmCodeTwoOrMorePartLength = 153;
Webropol.Common.SmsUtils.unicodeOnlyOnePartLength = 70;
Webropol.Common.SmsUtils.unicodeTwoOrMorePartLength = 67;
Webropol.Common.SmsUtils.maxCountOfPartsInSms = 5;

Webropol.Common.SmsUtils.calculateInvitationLength = function (smsText) {
    var partLength = this.messagePartLength(smsText);

    var invitationLength = Math.min(Math.ceil(smsText.length / partLength), this.maxCountOfPartsInSms);

    return invitationLength;
};

Webropol.Common.SmsUtils.isGsmAlphabet = function(text) {
    var regexp = new
        RegExp("^[A-Za-z0-9 \\r\\n@£$¥èéùìòÇØøÅå\u0394_\u03A6\u0393\u039B\u03A9\u03A0\u03A8\u03A3\u0398\u039EÆæßÉ!\"#$%&'()*+,\\-./:;<=>?¡ÄÖÑÜ§¿äöñüà^{}\\\\\\[~\\]|\u20AC]*$");

    return regexp.test(text);
};

Webropol.Common.SmsUtils.messagePartLength = function(smsText) {
    if (this.isGsmAlphabet(smsText)) {
        if (smsText.length <= this.gsmCodeOnlyOnePartLength) {
            return this.gsmCodeOnlyOnePartLength;
        } else {
            return this.gsmCodeTwoOrMorePartLength;
        }
    } else {
        if (smsText.length <= this.unicodeOnlyOnePartLength) {
            return this.unicodeOnlyOnePartLength;
        } else {
            return this.unicodeTwoOrMorePartLength;
        }
    }
};;
var Webropol = Webropol || {};
Webropol.SurveyPublish = Webropol.SurveyPublish || {};

Webropol.SurveyPublish.DirectSurveyPublish = function (urls, messages, publish) {
    var _this = this;
    var _urls = urls;
    var _messages = messages;

    this.getPublish = function () {
        return publish;
    };

    this.DirectSurveyAppName = ko.observable().extend({ required: _messages.directSurveyAppNameRequired });
    this.SelectedColor = ko.observable();
    this.ExistingAppColor = ko.observableArray([]);
    this.SurveyLayoutSettingsStatus = ko.observable(false);
    this.isExpandedLayoutSettings = ko.observable(true);
    this.isExpandedPushNotifications = ko.observable(false);
    this.SelectedColorCode = ko.observable();

    this.init = function (initialData) {
        ko.mapping.fromJS(initialData, {}, _this);
        _this.initializeObservables();
        _this.initializeComputed();
    };

    this.initializeObservables = function () {
        _this.ExistingAppColor(_this.ExistingAppColor());
        _this.DirectSurveyAppName(_this.DirectSurveyAppName());
        _this.SelectedColor(_this.SelectedColor());
        _this.SurveyLayoutSettingsStatus(_this.SurveyLayoutSettingsStatus());
        _this.SelectedColorCode(_this.SelectedColorCode());
    };

    this.initializeComputed = function () {
        _this.CanSaveLayout = ko.computed(function () {
            if (_this.DirectSurveyAppName() === null
                || _this.DirectSurveyAppName() === undefined
                || _this.DirectSurveyAppName() === '') {
                return false;
            } else {
                return true;
            }
        });

        _this.SelectedColorName = ko.computed(function () {
            var colorName = _this.getColorName(_this.SelectedColorCode());
            return colorName;
        });

        _this.directSurveyLayoutStatus = ko.pureComputed(function () {
            if (_this.SurveyLayoutSettingsStatus()) {
                var strTemplate = _messages.color + ": <span style='color: " + _this.SelectedColorCode() + "'><strong> {0}</strong></span> " + _messages.text + ": {1}";
                return Webropol.Shared.Common.stringFormat(strTemplate, _this.SelectedColorName(), _this.DirectSurveyAppName());
            } else {
                var strTemplate2 = _messages.undefined;
                return strTemplate2;
            }
        });

        _this.directSurveyLayoutStutusTextColor = ko.pureComputed(function () {
            if (!_this.SurveyLayoutSettingsStatus()) {
                return "red";
            }
        });
    };

    this.toggleExpandedDirectPushNotificationState = function () {
        _this.isExpandedPushNotifications(!_this.isExpandedPushNotifications());
    };

    this.toggleExpandedDirectSurveyLayoutState = function () {
        _this.isExpandedLayoutSettings(!_this.isExpandedLayoutSettings());
    };

    this.getColorName = function (colorCode) {
        var code = Webropol.Constants.SurveyPublish.SelectedColorCode;
        switch (colorCode) {
            case code.Green:
                return _messages.colorGreen;
            case code.Orange:
                return _messages.colorOrange;
            case code.LightBlue:
                return _messages.colorLightBlue;
            case code.Violet:
                return _messages.colorViolet;
            case code.Petroleum:
                return _messages.colorPetroleum;
        }
    };

    this.onSaveSurveyLayout = function () {
        _this.SurveyId = _this.getPublish().Id();
        
        _this.SurveyLayoutSettingsStatus(true);
        var model = ko.mapping.toJS(_this);
        
        Webropol.Shared.Common.callAsync(
            ko.toJSON(model),
            _urls.saveDirectSurveyLayoutSettingsUrl,
            function (data) {
                if (data.ErrorCode === 0) {
                     _this.getPublish().SmsMessage.DirectSurveyLayoutSettingStatus(true);
                    ko.shared.notifySuccess(_this, data.Message);
                    $(".survey-button-layout-regoin > a").click();
                }
            }
        );
    };
};;
